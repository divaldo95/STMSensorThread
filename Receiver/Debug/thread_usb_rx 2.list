
thread_usb_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107c4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08010904  08010904  00020904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d74  08010d74  00020d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d7c  08010d7c  00020d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010d80  08010d80  00020d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000004  08010d84  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000208  08010f88  00030208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200002a4  08011021  000302a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000210c  200002b8  08011032  000302b8  2**2
                  ALLOC
 10 ._user_heap_stack 00002a04  200023c4  08011032  000323c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000c0  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000b83  200300e8  200300e8  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  000302e5  2**0
                  CONTENTS, READONLY
 16 .debug_info   000359e8  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007e7e  00000000  00000000  00065d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002c60  00000000  00000000  0006db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000020fa  00000000  00000000  000707f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003152a  00000000  00000000  000728ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003725b  00000000  00000000  000a3e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00100e1c  00000000  00000000  000db06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000badc  00000000  00000000  001dbe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008a  00000000  00000000  001e7968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002b8 	.word	0x200002b8
 800015c:	00000000 	.word	0x00000000
 8000160:	080108ec 	.word	0x080108ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002bc 	.word	0x200002bc
 800017c:	080108ec 	.word	0x080108ec

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <LL_C2_PWR_SetPowerMode+0x28>)
 8000546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800054a:	f023 0207 	bic.w	r2, r3, #7
 800054e:	4905      	ldr	r1, [pc, #20]	; (8000564 <LL_C2_PWR_SetPowerMode+0x28>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4313      	orrs	r3, r2
 8000554:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	58000400 	.word	0x58000400

08000568 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_EXTI_EnableIT_32_63+0x24>)
 8000572:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000576:	4905      	ldr	r1, [pc, #20]	; (800058c <LL_EXTI_EnableIT_32_63+0x24>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	58000800 	.word	0x58000800

08000590 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800059e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	021b      	lsls	r3, r3, #8
 80005b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b6:	4313      	orrs	r3, r2
 80005b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	cafecafe 	.word	0xcafecafe

080005cc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	608b      	str	r3, [r1, #8]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80005f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800061a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800064c:	d101      	bne.n	8000652 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000672:	d101      	bne.n	8000678 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800068c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800069c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a8:	68fb      	ldr	r3, [r7, #12]
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	431a      	orrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	605a      	str	r2, [r3, #4]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	431a      	orrs	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	615a      	str	r2, [r3, #20]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	431a      	orrs	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	615a      	str	r2, [r3, #20]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	609a      	str	r2, [r3, #8]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	619a      	str	r2, [r3, #24]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	22ca      	movs	r2, #202	; 0xca
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2253      	movs	r2, #83	; 0x53
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f023 0207 	bic.w	r2, r3, #7
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	609a      	str	r2, [r3, #8]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <MX_APPE_Config+0x18>)
 80007e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80007e8:	f000 f824 	bl	8000834 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80007ec:	f000 f864 	bl	80008b8 <Config_HSE>

  return;
 80007f0:	bf00      	nop
}
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58004000 	.word	0x58004000

080007f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80007fc:	f000 f870 	bl	80008e0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000800:	f000 f888 	bl	8000914 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000804:	4903      	ldr	r1, [pc, #12]	; (8000814 <MX_APPE_Init+0x1c>)
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fa50 	bl	8000cac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800080c:	f000 f890 	bl	8000930 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000810:	bf00      	nop
}
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000328 	.word	0x20000328

08000818 <Init_Smps>:

void Init_Smps(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800081c:	bf00      	nop
}
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <Init_Exti>:

void Init_Exti(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800082a:	2050      	movs	r0, #80	; 0x50
 800082c:	f7ff fe9c 	bl	8000568 <LL_EXTI_EnableIT_32_63>

  return;
 8000830:	bf00      	nop
}
 8000832:	bd80      	pop	{r7, pc}

08000834 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000838:	f000 f804 	bl	8000844 <Reset_BackupDomain>

  Reset_IPCC();
 800083c:	f000 f81a 	bl	8000874 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000840:	bf00      	nop
}
 8000842:	bd80      	pop	{r7, pc}

08000844 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000848:	f7ff fef6 	bl	8000638 <LL_RCC_IsActiveFlag_PINRST>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00d      	beq.n	800086e <Reset_BackupDomain+0x2a>
 8000852:	f7ff ff04 	bl	800065e <LL_RCC_IsActiveFlag_SFTRST>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d108      	bne.n	800086e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800085c:	f003 fc78 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000860:	f003 fc76 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000864:	f7ff fec6 	bl	80005f4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000868:	f7ff fed5 	bl	8000616 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800086c:	bf00      	nop
 800086e:	bf00      	nop
}
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000878:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087c:	f7ff ff02 	bl	8000684 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000880:	213f      	movs	r1, #63	; 0x3f
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <Reset_IPCC+0x40>)
 8000884:	f7ff ff5d 	bl	8000742 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000888:	213f      	movs	r1, #63	; 0x3f
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <Reset_IPCC+0x40>)
 800088c:	f7ff ff67 	bl	800075e <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000890:	213f      	movs	r1, #63	; 0x3f
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <Reset_IPCC+0x40>)
 8000894:	f7ff ff0f 	bl	80006b6 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000898:	213f      	movs	r1, #63	; 0x3f
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <Reset_IPCC+0x40>)
 800089c:	f7ff ff2e 	bl	80006fc <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008a0:	213f      	movs	r1, #63	; 0x3f
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <Reset_IPCC+0x40>)
 80008a4:	f7ff ff19 	bl	80006da <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008a8:	213f      	movs	r1, #63	; 0x3f
 80008aa:	4802      	ldr	r0, [pc, #8]	; (80008b4 <Reset_IPCC+0x40>)
 80008ac:	f7ff ff38 	bl	8000720 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008b0:	bf00      	nop
}
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58000c00 	.word	0x58000c00

080008b8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f00c ffdc 	bl	800d87c <OTP_Read>
 80008c4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d005      	beq.n	80008d8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe5d 	bl	8000590 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <System_Init>:

static void System_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  Init_Smps();
 80008e4:	f7ff ff98 	bl	8000818 <Init_Smps>

  Init_Exti();
 80008e8:	f7ff ff9d 	bl	8000826 <Init_Exti>

  Init_Rtc();
 80008ec:	f000 f802 	bl	80008f4 <Init_Rtc>

  return;
 80008f0:	bf00      	nop
}
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <Init_Rtc+0x1c>)
 80008fa:	f7ff ff4b 	bl	8000794 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80008fe:	2100      	movs	r1, #0
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <Init_Rtc+0x1c>)
 8000902:	f7ff ff57 	bl	80007b4 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <Init_Rtc+0x1c>)
 8000908:	f7ff ff37 	bl	800077a <LL_RTC_EnableWriteProtection>

  return;
 800090c:	bf00      	nop
}
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40002800 	.word	0x40002800

08000914 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000918:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800091c:	f7ff fe56 	bl	80005cc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000920:	f00e fd60 	bl	800f3e4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000924:	2004      	movs	r0, #4
 8000926:	f7ff fe09 	bl	800053c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800092a:	bf00      	nop
}
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000936:	f00b fd91 	bl	800c45c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <appe_Tl_Init+0x50>)
 800093c:	2100      	movs	r1, #0
 800093e:	2004      	movs	r0, #4
 8000940:	f00e febe 	bl	800f6c0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <appe_Tl_Init+0x54>)
 8000946:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <appe_Tl_Init+0x58>)
 800094a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	480e      	ldr	r0, [pc, #56]	; (800098c <appe_Tl_Init+0x5c>)
 8000952:	f00b fc49 	bl	800c1e8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <appe_Tl_Init+0x60>)
 800095c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <appe_Tl_Init+0x64>)
 8000960:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000962:	f240 533c 	movw	r3, #1340	; 0x53c
 8000966:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4618      	mov	r0, r3
 800096e:	f00b fee3 	bl	800c738 <TL_MM_Init>

  TL_Enable();
 8000972:	f00b fd6d 	bl	800c450 <TL_Enable>

  return;
 8000976:	bf00      	nop
}
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800c221 	.word	0x0800c221
 8000984:	20030624 	.word	0x20030624
 8000988:	08000999 	.word	0x08000999
 800098c:	080009af 	.word	0x080009af
 8000990:	20030730 	.word	0x20030730
 8000994:	200300e8 	.word	0x200300e8

08000998 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009a2:	bf00      	nop
}
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	330b      	adds	r3, #11
 80009bc:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80009c8:	d004      	beq.n	80009d4 <APPE_SysUserEvtRx+0x26>
 80009ca:	f249 2201 	movw	r2, #37377	; 0x9201
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d003      	beq.n	80009da <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80009d2:	e008      	b.n	80009e6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80009d4:	f000 f834 	bl	8000a40 <APPE_SysEvtReadyProcessing>
         break;
 80009d8:	e005      	b.n	80009e6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f806 	bl	80009f0 <APPE_SysEvtError>
         break;
 80009e4:	bf00      	nop
  }
  return;
 80009e6:	bf00      	nop
}
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b7d      	cmp	r3, #125	; 0x7d
 80009fe:	d002      	beq.n	8000a06 <APPE_SysEvtError+0x16>
 8000a00:	2b7e      	cmp	r3, #126	; 0x7e
 8000a02:	d006      	beq.n	8000a12 <APPE_SysEvtError+0x22>
 8000a04:	e00b      	b.n	8000a1e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <APPE_SysEvtError+0x44>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 fd34 	bl	8001478 <logApplication>
       break;
 8000a10:	e00c      	b.n	8000a2c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <APPE_SysEvtError+0x48>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fd2e 	bl	8001478 <logApplication>
       break;
 8000a1c:	e006      	b.n	8000a2c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <APPE_SysEvtError+0x4c>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fd27 	bl	8001478 <logApplication>
       break;
 8000a2a:	bf00      	nop
  }
  return;
 8000a2c:	bf00      	nop
}
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	08010904 	.word	0x08010904
 8000a38:	08010928 	.word	0x08010928
 8000a3c:	08010948 	.word	0x08010948

08000a40 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8000a44:	f00b feec 	bl	800c820 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000a48:	f00c fffe 	bl	800da48 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f00e fcda 	bl	800f408 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2001      	movs	r0, #1
 8000a58:	f00e fd06 	bl	800f468 <UTIL_LPM_SetOffMode>
  return;
 8000a5c:	bf00      	nop
}
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	f00e fd2e 	bl	800f4c8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a74:	bf00      	nop
}
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d003      	beq.n	8000a98 <UTIL_SEQ_EvtIdle+0x18>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d00c      	beq.n	8000ab0 <UTIL_SEQ_EvtIdle+0x30>
 8000a96:	e012      	b.n	8000abe <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <UTIL_SEQ_EvtIdle+0x50>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f00e fd11 	bl	800f4c8 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8000aa6:	e00f      	b.n	8000ac8 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f00e fd0d 	bl	800f4c8 <UTIL_SEQ_Run>
    break;
 8000aae:	e00b      	b.n	8000ac8 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f00e fe53 	bl	800f75c <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f00e fd06 	bl	800f4c8 <UTIL_SEQ_Run>
    break;
 8000abc:	e004      	b.n	8000ac8 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac2:	f00e fd01 	bl	800f4c8 <UTIL_SEQ_Run>
    break;
 8000ac6:	bf00      	nop
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200002d4 	.word	0x200002d4

08000ad4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f00e fe10 	bl	800f704 <UTIL_SEQ_SetTask>
  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f00e fe31 	bl	800f75c <UTIL_SEQ_SetEvt>
  return;
 8000afa:	bf00      	nop
}
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f00e fe46 	bl	800f79c <UTIL_SEQ_WaitEvt>
  return;
 8000b10:	bf00      	nop
}
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f00b fe45 	bl	800c7b0 <TL_MM_EvtDone>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <LL_AHB1_GRP1_EnableClock>:
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b64:	2004      	movs	r0, #4
 8000b66:	f7ff ffe2 	bl	8000b2e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff ffdf 	bl	8000b2e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	200b      	movs	r0, #11
 8000b76:	f001 f898 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f001 f8af 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	200c      	movs	r0, #12
 8000b86:	f001 f890 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f001 f8a7 	bl	8001cde <HAL_NVIC_EnableIRQ>

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <LL_AHB2_GRP1_EnableClock>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	2004      	movs	r0, #4
 8000bde:	f7ff ffd9 	bl	8000b94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff ffd6 	bl	8000b94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff ffd3 	bl	8000b94 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f001 fc97 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	4817      	ldr	r0, [pc, #92]	; (8000c5c <MX_GPIO_Init+0x94>)
 8000c00:	f001 fc92 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c04:	2310      	movs	r3, #16
 8000c06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fb14 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|RED_LED_Pin;
 8000c20:	2303      	movs	r3, #3
 8000c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_GPIO_Init+0x94>)
 8000c36:	f001 fb07 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f001 fafa 	bl	8002248 <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	48000400 	.word	0x48000400

08000c60 <LL_EXTI_EnableIT_0_31>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000c6e:	4905      	ldr	r1, [pc, #20]	; (8000c84 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	58000800 	.word	0x58000800

08000c88 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]

}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	58000800 	.word	0x58000800

08000cac <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000cb8:	4a64      	ldr	r2, [pc, #400]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	22ca      	movs	r2, #202	; 0xca
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc8:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2253      	movs	r2, #83	; 0x53
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000cd2:	4b5f      	ldr	r3, [pc, #380]	; (8000e50 <HW_TS_Init+0x1a4>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <HW_TS_Init+0x1a4>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000cde:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <HW_TS_Init+0x1a4>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f1c3 0304 	rsb	r3, r3, #4
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <HW_TS_Init+0x1a8>)
 8000cf2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HW_TS_Init+0x1a4>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000cfc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000d00:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	fa92 f2a2 	rbit	r2, r2
 8000d08:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d101      	bne.n	8000d18 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000d14:	2220      	movs	r2, #32
 8000d16:	e003      	b.n	8000d20 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	40d3      	lsrs	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HW_TS_Init+0x1ac>)
 8000d2a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <HW_TS_Init+0x1a4>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <HW_TS_Init+0x1b0>)
 8000d3e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HW_TS_Init+0x1b0>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HW_TS_Init+0x1ac>)
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	fb02 f303 	mul.w	r3, r2, r3
 8000d4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000d52:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <HW_TS_Init+0x1a8>)
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d904      	bls.n	8000d6e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <HW_TS_Init+0x1b4>)
 8000d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6a:	801a      	strh	r2, [r3, #0]
 8000d6c:	e003      	b.n	8000d76 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <HW_TS_Init+0x1b4>)
 8000d74:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d7a:	f7ff ff85 	bl	8000c88 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d82:	f7ff ff6d 	bl	8000c60 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d143      	bne.n	8000e14 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <HW_TS_Init+0x1b8>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <HW_TS_Init+0x1bc>)
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d98:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	77fb      	strb	r3, [r7, #31]
 8000d9e:	e00c      	b.n	8000dba <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000da0:	7ffa      	ldrb	r2, [r7, #31]
 8000da2:	4932      	ldr	r1, [pc, #200]	; (8000e6c <HW_TS_Init+0x1c0>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	330c      	adds	r3, #12
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000db4:	7ffb      	ldrb	r3, [r7, #31]
 8000db6:	3301      	adds	r3, #1
 8000db8:	77fb      	strb	r3, [r7, #31]
 8000dba:	7ffb      	ldrb	r3, [r7, #31]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d9ef      	bls.n	8000da0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HW_TS_Init+0x1c4>)
 8000dc2:	2206      	movs	r2, #6
 8000dc4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dd8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dee:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HW_TS_Init+0x1c8>)
 8000df2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 ff9c 	bl	8001d36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	e00a      	b.n	8000e2a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 ff78 	bl	8001d1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HW_TS_Init+0x1a0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000e34:	2200      	movs	r2, #0
 8000e36:	2103      	movs	r1, #3
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 ff36 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 ff4d 	bl	8001cde <HAL_NVIC_EnableIRQ>

  return;
 8000e44:	bf00      	nop
}
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200002d8 	.word	0x200002d8
 8000e50:	40002800 	.word	0x40002800
 8000e54:	200002dc 	.word	0x200002dc
 8000e58:	200002dd 	.word	0x200002dd
 8000e5c:	200002de 	.word	0x200002de
 8000e60:	200002e0 	.word	0x200002e0
 8000e64:	200002a0 	.word	0x200002a0
 8000e68:	2000029c 	.word	0x2000029c
 8000e6c:	20000208 	.word	0x20000208
 8000e70:	20000298 	.word	0x20000298
 8000e74:	58000800 	.word	0x58000800

08000e78 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	4613      	mov	r3, r2
 8000e88:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10c      	bne.n	8000eaa <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HW_UART_Receive_IT+0x3c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HW_UART_Receive_IT+0x40>)
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HW_UART_Receive_IT+0x44>)
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HW_UART_Receive_IT+0x40>)
 8000ea4:	f005 f936 	bl	8006114 <HAL_UART_Receive_IT>
            break;
 8000ea8:	e000      	b.n	8000eac <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8000eaa:	bf00      	nop
    }

    return;
 8000eac:	bf00      	nop
}
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002e4 	.word	0x200002e4
 8000eb8:	20000350 	.word	0x20000350
 8000ebc:	40013800 	.word	0x40013800

08000ec0 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10c      	bne.n	8000ef2 <HW_UART_Transmit_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HW_UART_Transmit_IT+0x3c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HW_UART_Transmit_IT+0x40>)
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HW_UART_Transmit_IT+0x44>)
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HW_UART_Transmit_IT+0x40>)
 8000eec:	f005 f86a 	bl	8005fc4 <HAL_UART_Transmit_IT>
            break;
 8000ef0:	e000      	b.n	8000ef4 <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8000ef2:	bf00      	nop
    }

    return;
 8000ef4:	bf00      	nop
}
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002e8 	.word	0x200002e8
 8000f00:	20000350 	.word	0x20000350
 8000f04:	40013800 	.word	0x40013800

08000f08 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_UART_RxCpltCallback+0x34>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d107      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_UART_RxCpltCallback+0x38>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_UART_RxCpltCallback+0x38>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4798      	blx	r3
            }
            break;
 8000f2a:	e001      	b.n	8000f30 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8000f2c:	bf00      	nop
 8000f2e:	e000      	b.n	8000f32 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8000f30:	bf00      	nop
    }

    return;
 8000f32:	bf00      	nop
}
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	200002e4 	.word	0x200002e4

08000f44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_UART_TxCpltCallback+0x34>)
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d107      	bne.n	8000f68 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_UART_TxCpltCallback+0x38>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_UART_TxCpltCallback+0x38>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4798      	blx	r3
            }
            break;
 8000f66:	e001      	b.n	8000f6c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8000f68:	bf00      	nop
 8000f6a:	e000      	b.n	8000f6e <HAL_UART_TxCpltCallback+0x2a>
            break;
 8000f6c:	bf00      	nop
    }

    return;
 8000f6e:	bf00      	nop
}
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	200002e8 	.word	0x200002e8

08000f80 <LL_AHB3_GRP1_EnableClock>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_IPCC_Init+0x20>)
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <MX_IPCC_Init+0x24>)
 8000fbc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_IPCC_Init+0x20>)
 8000fc0:	f001 faee 	bl	80025a0 <HAL_IPCC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000fca:	f000 f931 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002ec 	.word	0x200002ec
 8000fd8:	58000c00 	.word	0x58000c00

08000fdc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_IPCC_MspInit+0x44>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d113      	bne.n	8001016 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000fee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ff2:	f7ff ffc5 	bl	8000f80 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	202c      	movs	r0, #44	; 0x2c
 8000ffc:	f000 fe55 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001000:	202c      	movs	r0, #44	; 0x2c
 8001002:	f000 fe6c 	bl	8001cde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	202d      	movs	r0, #45	; 0x2d
 800100c:	f000 fe4d 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001010:	202d      	movs	r0, #45	; 0x2d
 8001012:	f000 fe64 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	58000c00 	.word	0x58000c00

08001024 <LL_RCC_LSE_SetDriveCapability>:
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001034:	f023 0218 	bic.w	r2, r3, #24
 8001038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4313      	orrs	r3, r2
 8001040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	3220      	adds	r2, #32
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <LL_HSEM_1StepLock+0x2c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d001      	beq.n	800106e <LL_HSEM_1StepLock+0x1e>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <LL_HSEM_1StepLock+0x20>
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	80000400 	.word	0x80000400

08001080 <__io_putchar>:
/* USER CODE BEGIN 0 */

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 // HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	while(CDC_Transmit_FS((uint8_t *)&ch, 1) == 1);
 8001088:	bf00      	nop
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f00d fd02 	bl	800ea98 <CDC_Transmit_FS>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d0f7      	beq.n	800108a <__io_putchar+0xa>

  return ch;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b0c0      	sub	sp, #256	; 0x100
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f000 fc4b 	bl	8001944 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80010ae:	f7ff fb95 	bl	80007dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f82b 	bl	800110c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010b6:	f000 f895 	bl	80011e4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80010ba:	f7ff ff7b 	bl	8000fb4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f7ff fd83 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c2:	f7ff fd4d 	bl	8000b60 <MX_DMA_Init>
  MX_RTC_Init();
 80010c6:	f000 f8e9 	bl	800129c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80010ca:	f000 fb0d 	bl	80016e8 <MX_USART1_UART_Init>
  MX_RF_Init();
 80010ce:	f000 f8b4 	bl	800123a <MX_RF_Init>
  MX_USB_Device_Init();
 80010d2:	f00d fc0f 	bl	800e8f4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  char buf[256] = "Hello world\n";
 80010d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010da:	f5a3 7580 	sub.w	r5, r3, #256	; 0x100
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <main+0x64>)
 80010e0:	462b      	mov	r3, r5
 80010e2:	4614      	mov	r4, r2
 80010e4:	6820      	ldr	r0, [r4, #0]
 80010e6:	6861      	ldr	r1, [r4, #4]
 80010e8:	68a2      	ldr	r2, [r4, #8]
 80010ea:	c307      	stmia	r3!, {r0, r1, r2}
 80010ec:	7b22      	ldrb	r2, [r4, #12]
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	f105 030d 	add.w	r3, r5, #13
 80010f4:	22f3      	movs	r2, #243	; 0xf3
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00e fd23 	bl	800fb44 <memset>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80010fe:	f7ff fb7b 	bl	80007f8 <MX_APPE_Init>
*/
	 // CDC_Transmit_FS(buf, strlen(buf));


    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001102:	f7ff fcad 	bl	8000a60 <MX_APPE_Process>
 8001106:	e7fc      	b.n	8001102 <main+0x5e>
 8001108:	08010968 	.word	0x08010968

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b09a      	sub	sp, #104	; 0x68
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2248      	movs	r2, #72	; 0x48
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f00e fd12 	bl	800fb44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001132:	f003 f80d 	bl	8004150 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff ff74 	bl	8001024 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <SystemClock_Config+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <SystemClock_Config+0xd4>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <SystemClock_Config+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001158:	2307      	movs	r3, #7
 800115a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001174:	2303      	movs	r3, #3
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001178:	2310      	movs	r3, #16
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 12;
 800117c:	230c      	movs	r3, #12
 800117e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800118c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001190:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fb7e 	bl	8004898 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011a2:	f000 f845 	bl	8001230 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011a6:	236f      	movs	r3, #111	; 0x6f
 80011a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 feda 	bl	8004f80 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011d2:	f000 f82d 	bl	8001230 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3768      	adds	r7, #104	; 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	58000400 	.word	0x58000400

080011e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2250      	movs	r2, #80	; 0x50
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e fca7 	bl	800fb44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80011f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80011fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001206:	2310      	movs	r3, #16
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c


  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f004 faf4 	bl	80057fa <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001218:	f000 f80a 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  LL_HSEM_1StepLock( HSEM, 5 );  //add this to prevent thread stack usb clock disable!!!!
 800121c:	2105      	movs	r1, #5
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <PeriphCommonClock_Config+0x48>)
 8001220:	f7ff ff16 	bl	8001050 <LL_HSEM_1StepLock>
     // PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
      //PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
      //HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);

  /* USER CODE END Smps */
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	; 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58001400 	.word	0x58001400

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>

0800123a <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_RCC_EnableRTC>:
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800124c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001286:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_RTC_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012ae:	220f      	movs	r2, #15
 80012b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_RTC_Init+0x4c>)
 80012d4:	f004 fd18 	bl	8005d08 <HAL_RTC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80012de:	f7ff ffa7 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000328 	.word	0x20000328
 80012ec:	40002800 	.word	0x40002800

080012f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b096      	sub	sp, #88	; 0x58
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2250      	movs	r2, #80	; 0x50
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00e fc1f 	bl	800fb44 <memset>
  if(rtcHandle->Instance==RTC)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_RTC_MspInit+0x54>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d115      	bne.n	800133c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001314:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f004 fa6a 	bl	80057fa <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800132c:	f7ff ff80 	bl	8001230 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001330:	f7ff ff8a 	bl	8001248 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001334:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001338:	f7ff ff97 	bl	800126a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40002800 	.word	0x40002800

08001348 <LL_AHB3_GRP1_EnableClock>:
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800137e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001382:	f7ff ffe1 	bl	8001348 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	202e      	movs	r0, #46	; 0x2e
 800138c:	f000 fc8d 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001390:	202e      	movs	r0, #46	; 0x2e
 8001392:	f000 fca4 	bl	8001cde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139e:	e7fe      	b.n	800139e <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <HardFault_Handler+0x4>

080013a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <BusFault_Handler+0x4>

080013b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 fb07 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <DMA1_Channel1_IRQHandler+0x10>)
 80013f6:	f000 fe13 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003e0 	.word	0x200003e0

08001404 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Channel2_IRQHandler+0x10>)
 800140a:	f000 fe09 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000440 	.word	0x20000440

08001418 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <USB_HP_IRQHandler+0x10>)
 800141e:	f001 fa52 	bl	80028c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001cb8 	.word	0x20001cb8

0800142c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USB_LP_IRQHandler+0x10>)
 8001432:	f001 fa48 	bl	80028c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20001cb8 	.word	0x20001cb8

08001440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART1_IRQHandler+0x10>)
 8001446:	f004 febb 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000350 	.word	0x20000350

08001454 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001458:	f00d f88c 	bl	800e574 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001464:	f00d f8dc 	bl	800e620 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001470:	f001 f872 	bl	8002558 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001478:	b40c      	push	{r2, r3}
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	460a      	mov	r2, r1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	4613      	mov	r3, r2
 8001488:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	b002      	add	sp, #8
 8001496:	4770      	bx	lr

08001498 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
	}

return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdc7 	bl	8001080 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
	}
	return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f00e fad6 	bl	800fb54 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000a00 	.word	0x00000a00
 80015d8:	2000034c 	.word	0x2000034c
 80015dc:	200023c8 	.word	0x200023c8

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <SystemInit+0x98>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <SystemInit+0x98>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800160c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <SystemInit+0x9c>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162a:	f023 0305 	bic.w	r3, r3, #5
 800162e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <SystemInit+0xa0>)
 800164c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <SystemInit+0xa0>)
 8001654:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	faf6fefb 	.word	0xfaf6fefb
 8001680:	22041000 	.word	0x22041000

08001684 <LL_AHB2_GRP1_EnableClock>:
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a8:	68fb      	ldr	r3, [r7, #12]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_USART1_UART_Init+0x94>)
 80016ee:	4a24      	ldr	r2, [pc, #144]	; (8001780 <MX_USART1_UART_Init+0x98>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <MX_USART1_UART_Init+0x94>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_USART1_UART_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_USART1_UART_Init+0x94>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_USART1_UART_Init+0x94>)
 800171a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART1_UART_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001734:	f004 fbf6 	bl	8005f24 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800173e:	f7ff fd77 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001746:	f006 fc6c 	bl	8008022 <HAL_UARTEx_SetTxFifoThreshold>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001750:	f7ff fd6e 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001758:	f006 fca1 	bl	800809e <HAL_UARTEx_SetRxFifoThreshold>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001762:	f7ff fd65 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_USART1_UART_Init+0x94>)
 8001768:	f006 fc22 	bl	8007fb0 <HAL_UARTEx_DisableFifoMode>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001772:	f7ff fd5d 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000350 	.word	0x20000350
 8001780:	40013800 	.word	0x40013800

08001784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09c      	sub	sp, #112	; 0x70
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2250      	movs	r2, #80	; 0x50
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00e f9cd 	bl	800fb44 <memset>
  if(uartHandle->Instance==USART1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a43      	ldr	r2, [pc, #268]	; (80018bc <HAL_UART_MspInit+0x138>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d17e      	bne.n	80018b2 <HAL_UART_MspInit+0x12e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f81a 	bl	80057fa <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017cc:	f7ff fd30 	bl	8001230 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017d4:	f7ff ff6f 	bl	80016b6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff ff53 	bl	8001684 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ee:	2307      	movs	r3, #7
 80017f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4831      	ldr	r0, [pc, #196]	; (80018c0 <HAL_UART_MspInit+0x13c>)
 80017fa:	f000 fd25 	bl	8002248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001800:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_UART_MspInit+0x144>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001806:	220e      	movs	r2, #14
 8001808:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_UART_MspInit+0x140>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_UART_MspInit+0x140>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_UART_MspInit+0x140>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001834:	4823      	ldr	r0, [pc, #140]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001836:	f000 fa8d 	bl	8001d54 <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001840:	f7ff fcf6 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_UART_MspInit+0x140>)
 8001848:	67da      	str	r2, [r3, #124]	; 0x7c
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_UART_MspInit+0x140>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_UART_MspInit+0x14c>)
 8001854:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001858:	220f      	movs	r2, #15
 800185a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_UART_MspInit+0x148>)
 800185e:	2210      	movs	r2, #16
 8001860:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_UART_MspInit+0x148>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_MspInit+0x148>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001886:	4811      	ldr	r0, [pc, #68]	; (80018cc <HAL_UART_MspInit+0x148>)
 8001888:	f000 fa64 	bl	8001d54 <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001892:	f7ff fccd 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_UART_MspInit+0x148>)
 800189a:	679a      	str	r2, [r3, #120]	; 0x78
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_UART_MspInit+0x148>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2024      	movs	r0, #36	; 0x24
 80018a8:	f000 f9ff 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018ac:	2024      	movs	r0, #36	; 0x24
 80018ae:	f000 fa16 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018b2:	bf00      	nop
 80018b4:	3770      	adds	r7, #112	; 0x70
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40013800 	.word	0x40013800
 80018c0:	48000400 	.word	0x48000400
 80018c4:	200003e0 	.word	0x200003e0
 80018c8:	40020008 	.word	0x40020008
 80018cc:	20000440 	.word	0x20000440
 80018d0:	4002001c 	.word	0x4002001c

080018d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d8:	3304      	adds	r3, #4

080018da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018de:	d3f9      	bcc.n	80018d4 <CopyDataInit>
  bx lr
 80018e0:	4770      	bx	lr

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018e4:	3004      	adds	r0, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>
  bx lr
 80018ea:	4770      	bx	lr

080018ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018f0:	f7ff fe76 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <LoopForever+0x8>)
 80018f6:	490c      	ldr	r1, [pc, #48]	; (8001928 <LoopForever+0xc>)
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <LoopForever+0x10>)
 80018fa:	2300      	movs	r3, #0
 80018fc:	f7ff ffed 	bl	80018da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <LoopForever+0x14>)
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <LoopForever+0x18>)
 8001904:	2300      	movs	r3, #0
 8001906:	f7ff ffee 	bl	80018e6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopForever+0x1c>)
 800190c:	490b      	ldr	r1, [pc, #44]	; (800193c <LoopForever+0x20>)
 800190e:	2300      	movs	r3, #0
 8001910:	f7ff ffe9 	bl	80018e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001914:	f00e f924 	bl	800fb60 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001918:	f7ff fbc4 	bl	80010a4 <main>

0800191c <LoopForever>:

LoopForever:
  b LoopForever
 800191c:	e7fe      	b.n	800191c <LoopForever>
 800191e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001920:	20020000 	.word	0x20020000
  INIT_DATA _sdata, _edata, _sidata
 8001924:	20000004 	.word	0x20000004
 8001928:	20000208 	.word	0x20000208
 800192c:	08010d84 	.word	0x08010d84
  INIT_BSS _sbss, _ebss
 8001930:	200002b8 	.word	0x200002b8
 8001934:	200023c4 	.word	0x200023c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001938:	200300e8 	.word	0x200300e8
 800193c:	20030c6b 	.word	0x20030c6b

08001940 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_Init+0x3c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x3c>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195a:	2003      	movs	r0, #3
 800195c:	f000 f99a 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001960:	200f      	movs	r0, #15
 8001962:	f000 f80f 	bl	8001984 <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	e001      	b.n	8001976 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001972:	f7ff fd02 	bl	800137a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001976:	79fb      	ldrb	r3, [r7, #7]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	58004000 	.word	0x58004000

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_InitTick+0x6c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d024      	beq.n	80019e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001998:	f003 fc9e 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_InitTick+0x6c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f9a6 	bl	8001d02 <HAL_SYSTICK_Config>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d809      	bhi.n	80019d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ca:	f000 f96e 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_InitTick+0x70>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e004      	b.n	80019e6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e001      	b.n	80019e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	200004a0 	.word	0x200004a0

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200004a0 	.word	0x200004a0

08001a38 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTickPrio+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0c      	blt.n	8001b1c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_SetPendingIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	3340      	adds	r3, #64	; 0x40
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0c      	blt.n	8001b58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_ClearPendingIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	3360      	adds	r3, #96	; 0x60
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001c28:	f3bf 8f4f 	dsb	sy
}
 8001c2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <__NVIC_SystemReset+0x24>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c36:	4904      	ldr	r1, [pc, #16]	; (8001c48 <__NVIC_SystemReset+0x24>)
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_SystemReset+0x28>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3e:	f3bf 8f4f 	dsb	sy
}
 8001c42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <__NVIC_SystemReset+0x20>
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	05fa0004 	.word	0x05fa0004

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c74:	f7ff ff78 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fed7 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff feee 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff7a 	bl	8001bbc <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff49 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fee1 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001cfe:	f7ff ff91 	bl	8001c24 <__NVIC_SystemReset>

08001d02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa0 	bl	8001c50 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fee1 	bl	8001af0 <__NVIC_SetPendingIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fef1 	bl	8001b2c <__NVIC_ClearPendingIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e08e      	b.n	8001e84 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_DMA_Init+0x138>)
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d80f      	bhi.n	8001d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <HAL_DMA_Init+0x13c>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <HAL_DMA_Init+0x140>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <HAL_DMA_Init+0x144>)
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d90:	e00e      	b.n	8001db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_DMA_Init+0x148>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_DMA_Init+0x140>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <HAL_DMA_Init+0x14c>)
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9bc 	bl	8002180 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e10:	d102      	bne.n	8001e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001e24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_DMA_Init+0x106>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d80c      	bhi.n	8001e5a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f9db 	bl	80021fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e008      	b.n	8001e6c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020407 	.word	0x40020407
 8001e90:	bffdfff8 	.word	0xbffdfff8
 8001e94:	cccccccd 	.word	0xcccccccd
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	bffdfbf8 	.word	0xbffdfbf8
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e04f      	b.n	8001f56 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d008      	beq.n	8001ed4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e040      	b.n	8001f56 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 020e 	bic.w	r2, r2, #14
 8001ee2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f003 021c 	and.w	r2, r3, #28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d005      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e047      	b.n	8002016 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020e 	bic.w	r2, r2, #14
 8001f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f003 021c 	and.w	r2, r3, #28
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00c      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ff4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
    }
  }
  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f003 031c 	and.w	r3, r3, #28
 8002040:	2204      	movs	r2, #4
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d026      	beq.n	800209a <HAL_DMA_IRQHandler+0x7a>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d021      	beq.n	800209a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f003 021c 	and.w	r2, r3, #28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2104      	movs	r1, #4
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	2b00      	cmp	r3, #0
 800208e:	d071      	beq.n	8002174 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002098:	e06c      	b.n	8002174 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 031c 	and.w	r3, r3, #28
 80020a2:	2202      	movs	r2, #2
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d02e      	beq.n	800210c <HAL_DMA_IRQHandler+0xec>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d029      	beq.n	800210c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020a 	bic.w	r2, r2, #10
 80020d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 021c 	and.w	r2, r3, #28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2102      	movs	r1, #2
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d038      	beq.n	8002174 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800210a:	e033      	b.n	8002174 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f003 031c 	and.w	r3, r3, #28
 8002114:	2208      	movs	r2, #8
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d02a      	beq.n	8002176 <HAL_DMA_IRQHandler+0x156>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d025      	beq.n	8002176 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 020e 	bic.w	r2, r2, #14
 8002138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 021c 	and.w	r2, r3, #28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002174:	bf00      	nop
 8002176:	bf00      	nop
}
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002190:	429a      	cmp	r2, r3
 8002192:	d80a      	bhi.n	80021aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6493      	str	r3, [r2, #72]	; 0x48
 80021a8:	e007      	b.n	80021ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021b4:	4413      	add	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3b08      	subs	r3, #8
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2201      	movs	r2, #1
 80021da:	409a      	lsls	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40020407 	.word	0x40020407
 80021f0:	4002081c 	.word	0x4002081c
 80021f4:	cccccccd 	.word	0xcccccccd
 80021f8:	40020880 	.word	0x40020880

080021fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3b01      	subs	r3, #1
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2201      	movs	r2, #1
 800222c:	409a      	lsls	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	1000823f 	.word	0x1000823f
 8002244:	40020940 	.word	0x40020940

08002248 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	e14c      	b.n	80024f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 813e 	beq.w	80024ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d005      	beq.n	8002288 <HAL_GPIO_Init+0x40>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d017      	beq.n	8002326 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d123      	bne.n	800237a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8098 	beq.w	80024ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x2c8>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023e6:	d019      	beq.n	800241c <HAL_GPIO_Init+0x1d4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4a      	ldr	r2, [pc, #296]	; (8002514 <HAL_GPIO_Init+0x2cc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_Init+0x1d0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a49      	ldr	r2, [pc, #292]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1cc>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_GPIO_Init+0x2d4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1c8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_GPIO_Init+0x2d8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1c4>
 8002408:	2304      	movs	r3, #4
 800240a:	e008      	b.n	800241e <HAL_GPIO_Init+0x1d6>
 800240c:	2307      	movs	r3, #7
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x1d6>
 8002410:	2303      	movs	r3, #3
 8002412:	e004      	b.n	800241e <HAL_GPIO_Init+0x1d6>
 8002414:	2302      	movs	r3, #2
 8002416:	e002      	b.n	800241e <HAL_GPIO_Init+0x1d6>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_GPIO_Init+0x1d6>
 800241c:	2300      	movs	r3, #0
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800242e:	4938      	ldr	r1, [pc, #224]	; (8002510 <HAL_GPIO_Init+0x2c8>)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002460:	4a30      	ldr	r2, [pc, #192]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800248a:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 8002492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f47f aeab 	bne.w	8002258 <HAL_GPIO_Init+0x10>
  }
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40010000 	.word	0x40010000
 8002514:	48000400 	.word	0x48000400
 8002518:	48000800 	.word	0x48000800
 800251c:	48000c00 	.word	0x48000c00
 8002520:	48001000 	.word	0x48001000
 8002524:	58000800 	.word	0x58000800

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002544:	e002      	b.n	800254c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_HSEM_IRQHandler+0x30>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_HSEM_IRQHandler+0x30>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	43db      	mvns	r3, r3
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <HAL_HSEM_IRQHandler+0x30>)
 800256e:	4013      	ands	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_HSEM_IRQHandler+0x30>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f807 	bl	800258c <HAL_HSEM_FreeCallback>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	58001500 	.word	0x58001500

0800258c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01e      	beq.n	80025f0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_IPCC_Init+0x60>)
 80025b4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fd0a 	bl	8000fdc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80025c8:	68b8      	ldr	r0, [r7, #8]
 80025ca:	f000 f85b 	bl	8002684 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f82c 	bl	8002638 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80025ee:	e001      	b.n	80025f4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58000c00 	.word	0x58000c00

08002604 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	4613      	mov	r3, r2
 800262a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e00f      	b.n	8002666 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <IPCC_SetDefaultCallbacks+0x44>)
 8002650:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3306      	adds	r3, #6
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	4a08      	ldr	r2, [pc, #32]	; (8002680 <IPCC_SetDefaultCallbacks+0x48>)
 800265e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d9ec      	bls.n	8002646 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	08002605 	.word	0x08002605
 8002680:	0800261f 	.word	0x0800261f

08002684 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002698:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223f      	movs	r2, #63	; 0x3f
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af06      	add	r7, sp, #24
 80026b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0dd      	b.n	800287a <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f00c fb62 	bl	800ed9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f005 fd7b 	bl	80081e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e04d      	b.n	8002792 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3305      	adds	r3, #5
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3304      	adds	r3, #4
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b298      	uxth	r0, r3
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	333a      	adds	r3, #58	; 0x3a
 8002736:	4602      	mov	r2, r0
 8002738:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3307      	adds	r3, #7
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	333c      	adds	r3, #60	; 0x3c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3340      	adds	r3, #64	; 0x40
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	3344      	adds	r3, #68	; 0x44
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	3301      	adds	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3ac      	bcc.n	80026f6 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e044      	b.n	800282c <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3301      	adds	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3b5      	bcc.n	80027a2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	687e      	ldr	r6, [r7, #4]
 800283e:	466d      	mov	r5, sp
 8002840:	f106 0410 	add.w	r4, r6, #16
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002850:	1d33      	adds	r3, r6, #4
 8002852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	f005 fce1 	bl	800821c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f001 fc42 	bl	80040fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002882 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_Start+0x16>
 8002894:	2302      	movs	r3, #2
 8002896:	e012      	b.n	80028be <HAL_PCD_Start+0x3c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 fc87 	bl	80081b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f007 fec6 	bl	800a640 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f007 fecb 	bl	800a66e <USB_ReadInterrupts>
 80028d8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb30 	bl	8002f4a <PCD_EP_ISR_Handler>

    return;
 80028ea:	e110      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d013      	beq.n	800291e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	b292      	uxth	r2, r2
 800290a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f00c faf1 	bl	800eef6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002914:	2100      	movs	r1, #0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8fc 	bl	8002b14 <HAL_PCD_SetAddress>

    return;
 800291c:	e0f7      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800293a:	b292      	uxth	r2, r2
 800293c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002940:	e0e5      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00c      	beq.n	8002966 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295e:	b292      	uxth	r2, r2
 8002960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002964:	e0d3      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d034      	beq.n	80029da <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0204 	bic.w	r2, r2, #4
 8002982:	b292      	uxth	r2, r2
 8002984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002990:	b29a      	uxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0208 	bic.w	r2, r2, #8
 800299a:	b292      	uxth	r2, r2
 800299c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029b2:	2100      	movs	r1, #0
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f00c fc95 	bl	800f2e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f00c fad4 	bl	800ef68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d2:	b292      	uxth	r2, r2
 80029d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029d8:	e099      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d027      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0208 	orr.w	r2, r2, #8
 80029f6:	b292      	uxth	r2, r2
 80029f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0204 	orr.w	r2, r2, #4
 8002a26:	b292      	uxth	r2, r2
 8002a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f00c fa81 	bl	800ef34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a32:	e06c      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d040      	beq.n	8002ac0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a50:	b292      	uxth	r2, r2
 8002a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d12b      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0204 	orr.w	r2, r2, #4
 8002a72:	b292      	uxth	r2, r2
 8002a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002aae:	2101      	movs	r1, #1
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f00c fc17 	bl	800f2e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ab6:	e02a      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f00c fa3b 	bl	800ef34 <HAL_PCD_SuspendCallback>
    return;
 8002abe:	e026      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00f      	beq.n	8002aea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f00c f9f9 	bl	800eeda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ae8:	e011      	b.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b0c:	bf00      	nop
  }
}
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_PCD_SetAddress+0x1a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e013      	b.n	8002b56 <HAL_PCD_SetAddress+0x42>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f007 fd66 	bl	800a618 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	4608      	mov	r0, r1
 8002b68:	4611      	mov	r1, r2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	70fb      	strb	r3, [r7, #3]
 8002b70:	460b      	mov	r3, r1
 8002b72:	803b      	strh	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da0f      	bge.n	8002ba4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	705a      	strb	r2, [r3, #1]
 8002ba2:	e00f      	b.n	8002bc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 0207 	and.w	r2, r3, #7
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bd0:	883a      	ldrh	r2, [r7, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	78ba      	ldrb	r2, [r7, #2]
 8002bda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bee:	78bb      	ldrb	r3, [r7, #2]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_EP_Open+0xaa>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e00e      	b.n	8002c26 <HAL_PCD_EP_Open+0xc8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fb22 	bl	8008260 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002c24:	7afb      	ldrb	r3, [r7, #11]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da0f      	bge.n	8002c62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	705a      	strb	r2, [r3, #1]
 8002c60:	e00f      	b.n	8002c82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 0207 	and.w	r2, r3, #7
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_PCD_EP_Close+0x6e>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e00e      	b.n	8002cba <HAL_PCD_EP_Close+0x8c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f005 fe92 	bl	80089d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	f003 0207 	and.w	r2, r3, #7
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6979      	ldr	r1, [r7, #20]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f006 f844 	bl	8008dae <USB_EPStartXfer>
 8002d26:	e005      	b.n	8002d34 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f006 f83d 	bl	8008dae <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 0207 	and.w	r2, r3, #7
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	3304      	adds	r3, #4
 8002d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2201      	movs	r2, #1
 8002dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 ffe8 	bl	8008dae <USB_EPStartXfer>
 8002dde:	e005      	b.n	8002dec <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 ffe1 	bl	8008dae <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0207 	and.w	r2, r3, #7
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e040      	b.n	8002e96 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da0f      	bge.n	8002e3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
 8002e3a:	e00d      	b.n	8002e58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_EP_SetStall+0x82>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e00e      	b.n	8002e96 <HAL_PCD_EP_SetStall+0xa0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 fac7 	bl	800a41a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d901      	bls.n	8002ebc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e042      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da0f      	bge.n	8002ee4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	705a      	strb	r2, [r3, #1]
 8002ee2:	e00f      	b.n	8002f04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 0207 	and.w	r2, r3, #7
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_PCD_EP_ClrStall+0x86>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e00e      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0xa4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68f9      	ldr	r1, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f007 fac2 	bl	800a4bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b096      	sub	sp, #88	; 0x58
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f52:	e3a9      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002f6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8169 	bne.w	800324a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d150      	bne.n	8003026 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	81fb      	strh	r3, [r7, #14]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	332c      	adds	r3, #44	; 0x2c
 8002fac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	441a      	add	r2, r3
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f00b ff5d 	bl	800eea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8357 	beq.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 8352 	bne.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b292      	uxth	r2, r2
 8003018:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003024:	e340      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800302c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003038:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	2b00      	cmp	r3, #0
 8003042:	d032      	beq.n	80030aa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4413      	add	r3, r2
 800305e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800307e:	b29b      	uxth	r3, r3
 8003080:	f007 fb47 	bl	800a712 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29a      	uxth	r2, r3
 800308c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003090:	4013      	ands	r3, r2
 8003092:	823b      	strh	r3, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	8a3a      	ldrh	r2, [r7, #16]
 800309a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309e:	b292      	uxth	r2, r2
 80030a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f00b fed2 	bl	800ee4c <HAL_PCD_SetupStageCallback>
 80030a8:	e2fe      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030aa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f280 82fa 	bge.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030c0:	4013      	ands	r3, r2
 80030c2:	83fb      	strh	r3, [r7, #30]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	8bfa      	ldrh	r2, [r7, #30]
 80030ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ce:	b292      	uxth	r2, r2
 80030d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d019      	beq.n	8003136 <PCD_EP_ISR_Handler+0x1ec>
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	6959      	ldr	r1, [r3, #20]
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003118:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800311a:	b29b      	uxth	r3, r3
 800311c:	f007 faf9 	bl	800a712 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	441a      	add	r2, r3
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f00b fe9d 	bl	800ee70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003140:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 82ad 	bne.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
 800314e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003152:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800315a:	f000 82a5 	beq.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b3e      	cmp	r3, #62	; 0x3e
 8003184:	d918      	bls.n	80031b8 <PCD_EP_ISR_Handler+0x26e>
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <PCD_EP_ISR_Handler+0x256>
 800319a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319c:	3b01      	subs	r3, #1
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
 80031a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e029      	b.n	800320c <PCD_EP_ISR_Handler+0x2c2>
 80031b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d112      	bne.n	80031e6 <PCD_EP_ISR_Handler+0x29c>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	801a      	strh	r2, [r3, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031de:	b29a      	uxth	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	e012      	b.n	800320c <PCD_EP_ISR_Handler+0x2c2>
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <PCD_EP_ISR_Handler+0x2b6>
 80031fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fc:	3301      	adds	r3, #1
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003202:	b29b      	uxth	r3, r3
 8003204:	029b      	lsls	r3, r3, #10
 8003206:	b29a      	uxth	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321c:	827b      	strh	r3, [r7, #18]
 800321e:	8a7b      	ldrh	r3, [r7, #18]
 8003220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003224:	827b      	strh	r3, [r7, #18]
 8003226:	8a7b      	ldrh	r3, [r7, #18]
 8003228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800322c:	827b      	strh	r3, [r7, #18]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	8a7b      	ldrh	r3, [r7, #18]
 8003234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
 8003248:	e22e      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800325e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003262:	2b00      	cmp	r3, #0
 8003264:	f280 80f7 	bge.w	8003456 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29a      	uxth	r2, r3
 800327a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800327e:	4013      	ands	r3, r2
 8003280:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800329a:	b292      	uxth	r2, r2
 800329c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800329e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b8:	7b1b      	ldrb	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d123      	bne.n	8003306 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80032e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 808e 	beq.w	800340c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f6:	6959      	ldr	r1, [r3, #20]
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	88da      	ldrh	r2, [r3, #6]
 80032fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003300:	f007 fa07 	bl	800a712 <USB_ReadPMA>
 8003304:	e082      	b.n	800340c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d10a      	bne.n	8003324 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800330e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003312:	461a      	mov	r2, r3
 8003314:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9d4 	bl	80036c4 <HAL_PCD_EP_DB_Receive>
 800331c:	4603      	mov	r3, r0
 800331e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003322:	e073      	b.n	800340c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338a:	b29b      	uxth	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4413      	add	r3, r2
 800339c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80033aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02c      	beq.n	800340c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	6959      	ldr	r1, [r3, #20]
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	891a      	ldrh	r2, [r3, #8]
 80033be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033c2:	f007 f9a6 	bl	800a712 <USB_ReadPMA>
 80033c6:	e021      	b.n	800340c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80033f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	6959      	ldr	r1, [r3, #20]
 8003400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003402:	895a      	ldrh	r2, [r3, #10]
 8003404:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003408:	f007 f983 	bl	800a712 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003414:	441a      	add	r2, r3
 8003416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003418:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003422:	441a      	add	r2, r3
 8003424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003426:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <PCD_EP_ISR_Handler+0x4f2>
 8003430:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d206      	bcs.n	800344a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f00b fd14 	bl	800ee70 <HAL_PCD_DataOutStageCallback>
 8003448:	e005      	b.n	8003456 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003450:	4618      	mov	r0, r3
 8003452:	f005 fcac 	bl	8008dae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8122 	beq.w	80036a8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003464:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b8:	78db      	ldrb	r3, [r3, #3]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f040 80a2 	bne.w	8003604 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 80034c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c8:	7b1b      	ldrb	r3, [r3, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8093 	beq.w	80035f6 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d046      	beq.n	800356a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d126      	bne.n	8003532 <PCD_EP_ISR_Handler+0x5e8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	4413      	add	r3, r2
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00da      	lsls	r2, r3, #3
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	4413      	add	r3, r2
 8003506:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003516:	b29a      	uxth	r2, r3
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	801a      	strh	r2, [r3, #0]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352a:	b29a      	uxth	r2, r3
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	e061      	b.n	80035f6 <PCD_EP_ISR_Handler+0x6ac>
 8003532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d15d      	bne.n	80035f6 <PCD_EP_ISR_Handler+0x6ac>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	4413      	add	r3, r2
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	00da      	lsls	r2, r3, #3
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	4413      	add	r3, r2
 800355c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2200      	movs	r2, #0
 8003566:	801a      	strh	r2, [r3, #0]
 8003568:	e045      	b.n	80035f6 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d126      	bne.n	80035c6 <PCD_EP_ISR_Handler+0x67c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	4413      	add	r3, r2
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00da      	lsls	r2, r3, #3
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	4413      	add	r3, r2
 800359a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035be:	b29a      	uxth	r2, r3
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	e017      	b.n	80035f6 <PCD_EP_ISR_Handler+0x6ac>
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d113      	bne.n	80035f6 <PCD_EP_ISR_Handler+0x6ac>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	4413      	add	r3, r2
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00da      	lsls	r2, r3, #3
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	4413      	add	r3, r2
 80035ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	2200      	movs	r2, #0
 80035f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f00b fc52 	bl	800eea6 <HAL_PCD_DataInStageCallback>
 8003602:	e051      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003604:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d144      	bne.n	800369a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003640:	429a      	cmp	r2, r3
 8003642:	d907      	bls.n	8003654 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800364c:	1ad2      	subs	r2, r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	619a      	str	r2, [r3, #24]
 8003652:	e002      	b.n	800365a <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800365a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f00b fc1c 	bl	800eea6 <HAL_PCD_DataInStageCallback>
 800366e:	e01b      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003678:	441a      	add	r2, r3
 800367a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003686:	441a      	add	r2, r3
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fb8b 	bl	8008dae <USB_EPStartXfer>
 8003698:	e006      	b.n	80036a8 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800369a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800369e:	461a      	mov	r2, r3
 80036a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f917 	bl	80038d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f6ff ac4d 	blt.w	8002f54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3758      	adds	r7, #88	; 0x58
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d07c      	beq.n	80037d6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003700:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	8b7b      	ldrh	r3, [r7, #26]
 8003708:	429a      	cmp	r2, r3
 800370a:	d306      	bcc.n	800371a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	8b7b      	ldrh	r3, [r7, #26]
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	619a      	str	r2, [r3, #24]
 8003718:	e002      	b.n	8003720 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d123      	bne.n	8003770 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	833b      	strh	r3, [r7, #24]
 8003744:	8b3b      	ldrh	r3, [r7, #24]
 8003746:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800374a:	833b      	strh	r3, [r7, #24]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	8b3b      	ldrh	r3, [r7, #24]
 800375c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376c:	b29b      	uxth	r3, r3
 800376e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01f      	beq.n	80037ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	82fb      	strh	r3, [r7, #22]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	8afb      	ldrh	r3, [r7, #22]
 80037a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037ba:	8b7b      	ldrh	r3, [r7, #26]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8085 	beq.w	80038cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6959      	ldr	r1, [r3, #20]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	891a      	ldrh	r2, [r3, #8]
 80037ce:	8b7b      	ldrh	r3, [r7, #26]
 80037d0:	f006 ff9f 	bl	800a712 <USB_ReadPMA>
 80037d4:	e07a      	b.n	80038cc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	8b7b      	ldrh	r3, [r7, #26]
 8003802:	429a      	cmp	r2, r3
 8003804:	d306      	bcc.n	8003814 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	8b7b      	ldrh	r3, [r7, #26]
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e002      	b.n	800381a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d123      	bne.n	800386a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383c:	83fb      	strh	r3, [r7, #30]
 800383e:	8bfb      	ldrh	r3, [r7, #30]
 8003840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003844:	83fb      	strh	r3, [r7, #30]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	8bfb      	ldrh	r3, [r7, #30]
 8003856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003866:	b29b      	uxth	r3, r3
 8003868:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11f      	bne.n	80038b4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	83bb      	strh	r3, [r7, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	8bbb      	ldrh	r3, [r7, #28]
 80038a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038b4:	8b7b      	ldrh	r3, [r7, #26]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6959      	ldr	r1, [r3, #20]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	895a      	ldrh	r2, [r3, #10]
 80038c6:	8b7b      	ldrh	r3, [r7, #26]
 80038c8:	f006 ff23 	bl	800a712 <USB_ReadPMA>
    }
  }

  return count;
 80038cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b0a2      	sub	sp, #136	; 0x88
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 81c5 	beq.w	8003c7a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	4413      	add	r3, r2
 800390a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003914:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	429a      	cmp	r2, r3
 8003922:	d907      	bls.n	8003934 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	619a      	str	r2, [r3, #24]
 8003932:	e002      	b.n	800393a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 80b9 	bne.w	8003ab6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d126      	bne.n	800399a <HAL_PCD_EP_DB_Transmit+0xc4>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	4413      	add	r3, r2
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	4413      	add	r3, r2
 800396e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800397e:	b29a      	uxth	r2, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003992:	b29a      	uxth	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	e01a      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d116      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	4413      	add	r3, r2
 80039b8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d126      	bne.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x156>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	4413      	add	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	e017      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x186>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d113      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x186>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	4413      	add	r3, r2
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f00b fa1f 	bl	800eea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 82d2 	beq.w	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	827b      	strh	r3, [r7, #18]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	8a7b      	ldrh	r3, [r7, #18]
 8003aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	8013      	strh	r3, [r2, #0]
 8003ab4:	e2b0      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d021      	beq.n	8003b04 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	441a      	add	r2, r3
 8003aec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	f040 8284 	bne.w	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b18:	441a      	add	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b26:	441a      	add	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d309      	bcc.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	1ad2      	subs	r2, r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	621a      	str	r2, [r3, #32]
 8003b4a:	e015      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003b54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b62:	e009      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d155      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x356>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	4413      	add	r3, r2
 8003b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	00da      	lsls	r2, r3, #3
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003baa:	2b3e      	cmp	r3, #62	; 0x3e
 8003bac:	d916      	bls.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x306>
 8003bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e043      	b.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d112      	bne.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x332>
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e02d      	b.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x348>
 8003c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e01b      	b.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d117      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	4413      	add	r3, r2
 8003c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00da      	lsls	r2, r3, #3
 8003c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6959      	ldr	r1, [r3, #20]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	891a      	ldrh	r2, [r3, #8]
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f006 fd0b 	bl	800a68e <USB_WritePMA>
 8003c78:	e1ce      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d307      	bcc.n	8003cbe <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	619a      	str	r2, [r3, #24]
 8003cbc:	e002      	b.n	8003cc4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 80c4 	bne.w	8003e56 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d126      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cea:	4413      	add	r3, r2
 8003cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e01a      	b.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x484>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d116      	bne.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x484>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	673b      	str	r3, [r7, #112]	; 0x70
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d40:	4413      	add	r3, r2
 8003d42:	673b      	str	r3, [r7, #112]	; 0x70
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	00da      	lsls	r2, r3, #3
 8003d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	2200      	movs	r2, #0
 8003d58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d12f      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d80:	4413      	add	r3, r2
 8003d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00da      	lsls	r2, r3, #3
 8003d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	e017      	b.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x522>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d113      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x522>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dde:	4413      	add	r3, r2
 8003de0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00da      	lsls	r2, r3, #3
 8003de8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dea:	4413      	add	r3, r2
 8003dec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df4:	2200      	movs	r2, #0
 8003df6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f00b f851 	bl	800eea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8104 	bne.w	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8013      	strh	r3, [r2, #0]
 8003e54:	e0e0      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d121      	bne.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f040 80b4 	bne.w	8004018 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb8:	441a      	add	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d309      	bcc.n	8003eec <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	1ad2      	subs	r2, r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	621a      	str	r2, [r3, #32]
 8003eea:	e015      	b.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003ef4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f02:	e009      	b.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d155      	bne.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f3a:	4413      	add	r3, r2
 8003f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00da      	lsls	r2, r3, #3
 8003f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f46:	4413      	add	r3, r2
 8003f48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f50:	2b3e      	cmp	r3, #62	; 0x3e
 8003f52:	d916      	bls.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x694>
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	3b01      	subs	r3, #1
 8003f68:	677b      	str	r3, [r7, #116]	; 0x74
 8003f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e040      	b.n	8004004 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d112      	bne.n	8003fae <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	e02a      	b.n	8004004 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8003fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	677b      	str	r3, [r7, #116]	; 0x74
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	029b      	lsls	r3, r3, #10
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	e018      	b.n	8004004 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d114      	bne.n	8004004 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe8:	4413      	add	r3, r2
 8003fea:	663b      	str	r3, [r7, #96]	; 0x60
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	00da      	lsls	r2, r3, #3
 8003ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004002:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6959      	ldr	r1, [r3, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	895a      	ldrh	r2, [r3, #10]
 8004010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	f006 fb3b 	bl	800a68e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	823b      	strh	r3, [r7, #16]
 8004034:	8a3b      	ldrh	r3, [r7, #16]
 8004036:	f083 0310 	eor.w	r3, r3, #16
 800403a:	823b      	strh	r3, [r7, #16]
 800403c:	8a3b      	ldrh	r3, [r7, #16]
 800403e:	f083 0320 	eor.w	r3, r3, #32
 8004042:	823b      	strh	r3, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	8a3b      	ldrh	r3, [r7, #16]
 8004054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004064:	b29b      	uxth	r3, r3
 8004066:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3788      	adds	r7, #136	; 0x88
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	817b      	strh	r3, [r7, #10]
 8004080:	4613      	mov	r3, r2
 8004082:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e00a      	b.n	80040c0 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040aa:	897a      	ldrh	r2, [r7, #10]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	80da      	strh	r2, [r3, #6]
 80040d4:	e00b      	b.n	80040ee <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2201      	movs	r2, #1
 80040da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004120:	b29b      	uxth	r3, r3
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004134:	b29b      	uxth	r3, r3
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	58000400 	.word	0x58000400

08004170 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_PWREx_GetVoltageRange+0x18>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	58000400 	.word	0x58000400

0800418c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419a:	6053      	str	r3, [r2, #4]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	58000400 	.word	0x58000400

080041ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d101      	bne.n	80041c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_HSE_Enable>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_HSE_Disable>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_HSE_IsReady>:
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421e:	d101      	bne.n	8004224 <LL_RCC_HSE_IsReady+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <LL_RCC_HSE_IsReady+0x1a>
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_RCC_HSI_Enable>:
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_RCC_HSI_Disable>:
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_RCC_HSI_IsReady>:
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d101      	bne.n	8004284 <LL_RCC_HSI_IsReady+0x18>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <LL_RCC_HSI_IsReady+0x1a>
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_RCC_HSI48_Enable>:
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_HSI48_Disable>:
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_HSI48_IsReady>:
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	d101      	bne.n	8004316 <LL_RCC_HSI48_IsReady+0x18>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <LL_RCC_HSI48_IsReady+0x1a>
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_RCC_LSE_Enable>:
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_RCC_LSE_Disable>:
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_LSE_EnableBypass>:
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_RCC_LSE_DisableBypass>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_LSE_IsReady>:
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d101      	bne.n	80043c2 <LL_RCC_LSE_IsReady+0x18>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <LL_RCC_LSE_IsReady+0x1a>
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_RCC_LSI1_Enable>:
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_LSI1_Disable>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_RCC_LSI1_IsReady>:
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d101      	bne.n	800442a <LL_RCC_LSI1_IsReady+0x18>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <LL_RCC_LSI1_IsReady+0x1a>
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_RCC_LSI2_Enable>:
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_LSI2_Disable>:
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_RCC_LSI2_IsReady>:
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b08      	cmp	r3, #8
 800448c:	d101      	bne.n	8004492 <LL_RCC_LSI2_IsReady+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_RCC_LSI2_IsReady+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_RCC_LSI2_SetTrimming>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_MSI_Enable>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_MSI_Disable>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_RCC_MSI_IsReady>:
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800450c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d101      	bne.n	800451e <LL_RCC_MSI_IsReady+0x16>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_RCC_MSI_IsReady+0x18>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_RCC_MSI_SetRange>:
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_RCC_MSI_GetRange>:
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2bb0      	cmp	r3, #176	; 0xb0
 8004568:	d901      	bls.n	800456e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800456a:	23b0      	movs	r3, #176	; 0xb0
 800456c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800456e:	687b      	ldr	r3, [r7, #4]
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_RCC_MSI_SetCalibTrimming>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_SetSysClkSource>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 0203 	bic.w	r2, r3, #3
 80045b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_RCC_GetSysClkSource>:
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_RCC_SetAHBPrescaler>:
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_C2_RCC_SetAHBPrescaler>:
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800461e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_RCC_SetAHB4Prescaler>:
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800464a:	f023 020f 	bic.w	r2, r3, #15
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_RCC_SetAPB1Prescaler>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800467a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_RCC_SetAPB2Prescaler>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_RCC_GetAHBPrescaler>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_GetAHB4Prescaler>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_RCC_GetAPB1Prescaler>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_RCC_GetAPB2Prescaler>:
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_PLL_Enable>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_RCC_PLL_Disable>:
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_RCC_PLL_IsReady>:
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476a:	d101      	bne.n	8004770 <LL_RCC_PLL_IsReady+0x18>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <LL_RCC_PLL_IsReady+0x1a>
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_RCC_PLL_GetN>:
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_PLL_GetR>:
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_PLL_GetDivider>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_PLL_GetMainSource>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0303 	and.w	r3, r3, #3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_RCC_IsActiveFlag_HPRE>:
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d101      	bne.n	80047f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004816:	d101      	bne.n	800481c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d101      	bne.n	8004842 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004860:	d101      	bne.n	8004866 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004884:	d101      	bne.n	800488a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b08d      	sub	sp, #52	; 0x34
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e363      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 808d 	beq.w	80049d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b8:	f7ff fe89 	bl	80045ce <LL_RCC_GetSysClkSource>
 80048bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048be:	f7ff ff82 	bl	80047c6 <LL_RCC_PLL_GetMainSource>
 80048c2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x3e>
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d147      	bne.n	8004960 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d144      	bne.n	8004960 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e347      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80048e6:	f7ff fe34 	bl	8004552 <LL_RCC_MSI_GetRange>
 80048ea:	4603      	mov	r3, r0
 80048ec:	429c      	cmp	r4, r3
 80048ee:	d914      	bls.n	800491a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd2f 	bl	8005358 <RCC_SetFlashLatencyFromMSIRange>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e336      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fe0e 	bl	800452a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fe32 	bl	800457c <LL_RCC_MSI_SetCalibTrimming>
 8004918:	e013      	b.n	8004942 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe03 	bl	800452a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fe27 	bl	800457c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fd10 	bl	8005358 <RCC_SetFlashLatencyFromMSIRange>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e317      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004942:	f000 fcc9 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8004946:	4603      	mov	r3, r0
 8004948:	4aa4      	ldr	r2, [pc, #656]	; (8004bdc <HAL_RCC_OscConfig+0x344>)
 800494a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800494c:	4ba4      	ldr	r3, [pc, #656]	; (8004be0 <HAL_RCC_OscConfig+0x348>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd f817 	bl	8001984 <HAL_InitTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d039      	beq.n	80049d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e308      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01e      	beq.n	80049a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004968:	f7ff fdb0 	bl	80044cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800496c:	f7fd f858 	bl	8001a20 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004974:	f7fd f854 	bl	8001a20 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e2f5      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004986:	f7ff fdbf 	bl	8004508 <LL_RCC_MSI_IsReady>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f1      	beq.n	8004974 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fdc8 	bl	800452a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fdec 	bl	800457c <LL_RCC_MSI_SetCalibTrimming>
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049a6:	f7ff fda0 	bl	80044ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049aa:	f7fd f839 	bl	8001a20 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b2:	f7fd f835 	bl	8001a20 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e2d6      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80049c4:	f7ff fda0 	bl	8004508 <LL_RCC_MSI_IsReady>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f1      	bne.n	80049b2 <HAL_RCC_OscConfig+0x11a>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80049d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d047      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049de:	f7ff fdf6 	bl	80045ce <LL_RCC_GetSysClkSource>
 80049e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e4:	f7ff feef 	bl	80047c6 <LL_RCC_PLL_GetMainSource>
 80049e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x164>
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d105      	bne.n	8004a08 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d134      	bne.n	8004a6e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e2b4      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d102      	bne.n	8004a18 <HAL_RCC_OscConfig+0x180>
 8004a12:	f7ff fbdd 	bl	80041d0 <LL_RCC_HSE_Enable>
 8004a16:	e001      	b.n	8004a1c <HAL_RCC_OscConfig+0x184>
 8004a18:	f7ff fbe9 	bl	80041ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc fffc 	bl	8001a20 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fff8 	bl	8001a20 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e299      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a3e:	f7ff fbe5 	bl	800420c <LL_RCC_HSE_IsReady>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f1      	beq.n	8004a2c <HAL_RCC_OscConfig+0x194>
 8004a48:	e011      	b.n	8004a6e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fc ffe9 	bl	8001a20 <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a52:	f7fc ffe5 	bl	8001a20 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e286      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a64:	f7ff fbd2 	bl	800420c <LL_RCC_HSE_IsReady>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f1      	bne.n	8004a52 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7a:	f7ff fda8 	bl	80045ce <LL_RCC_GetSysClkSource>
 8004a7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a80:	f7ff fea1 	bl	80047c6 <LL_RCC_PLL_GetMainSource>
 8004a84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d10e      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e266      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fbf1 	bl	8004290 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004aae:	e031      	b.n	8004b14 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	f7ff fbba 	bl	8004230 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fc ffb0 	bl	8001a20 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fc ffac 	bl	8001a20 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e24d      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ad6:	f7ff fbc9 	bl	800426c <LL_RCC_HSI_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f1      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fbd3 	bl	8004290 <LL_RCC_HSI_SetCalibTrimming>
 8004aea:	e013      	b.n	8004b14 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aec:	f7ff fbaf 	bl	800424e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc ff96 	bl	8001a20 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fc ff92 	bl	8001a20 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e233      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b0a:	f7ff fbaf 	bl	800426c <LL_RCC_HSI_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f1      	bne.n	8004af8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a3 	beq.w	8004c74 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d076      	beq.n	8004c24 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d046      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004b42:	f7ff fc66 	bl	8004412 <LL_RCC_LSI1_IsReady>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004b4c:	f7ff fc3f 	bl	80043ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b50:	f7fc ff66 	bl	8001a20 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b58:	f7fc ff62 	bl	8001a20 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e203      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b6a:	f7ff fc52 	bl	8004412 <LL_RCC_LSI1_IsReady>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f1      	beq.n	8004b58 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004b74:	f7ff fc5f 	bl	8004436 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc ff52 	bl	8001a20 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b80:	f7fc ff4e 	bl	8001a20 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1ef      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b92:	f7ff fc72 	bl	800447a <LL_RCC_LSI2_IsReady>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f1      	beq.n	8004b80 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fc7c 	bl	800449e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ba6:	f7ff fc23 	bl	80043f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fc ff39 	bl	8001a20 <HAL_GetTick>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bb2:	f7fc ff35 	bl	8001a20 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1d6      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004bc4:	f7ff fc25 	bl	8004412 <LL_RCC_LSI1_IsReady>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f1      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x31a>
 8004bce:	e051      	b.n	8004c74 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004bd0:	f7ff fbfd 	bl	80043ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc ff24 	bl	8001a20 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004bda:	e00c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004be4:	f7fc ff1c 	bl	8001a20 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e1bd      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004bf6:	f7ff fc0c 	bl	8004412 <LL_RCC_LSI1_IsReady>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f1      	beq.n	8004be4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004c00:	f7ff fc2a 	bl	8004458 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c06:	f7fc ff0b 	bl	8001a20 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1ac      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c18:	f7ff fc2f 	bl	800447a <LL_RCC_LSI2_IsReady>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f1      	bne.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004c22:	e027      	b.n	8004c74 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004c24:	f7ff fc18 	bl	8004458 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fc fefa 	bl	8001a20 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c30:	f7fc fef6 	bl	8001a20 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e197      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c42:	f7ff fc1a 	bl	800447a <LL_RCC_LSI2_IsReady>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f1      	bne.n	8004c30 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004c4c:	f7ff fbd0 	bl	80043f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fc fee6 	bl	8001a20 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c58:	f7fc fee2 	bl	8001a20 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e183      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c6a:	f7ff fbd2 	bl	8004412 <LL_RCC_LSI1_IsReady>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f1      	bne.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05b      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c80:	4ba7      	ldr	r3, [pc, #668]	; (8004f20 <HAL_RCC_OscConfig+0x688>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d114      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c8c:	f7ff fa60 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c90:	f7fc fec6 	bl	8001a20 <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fc fec2 	bl	8001a20 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e163      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004caa:	4b9d      	ldr	r3, [pc, #628]	; (8004f20 <HAL_RCC_OscConfig+0x688>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d102      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x42c>
 8004cbe:	f7ff fb30 	bl	8004322 <LL_RCC_LSE_Enable>
 8004cc2:	e00c      	b.n	8004cde <HAL_RCC_OscConfig+0x446>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d104      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x43e>
 8004ccc:	f7ff fb4b 	bl	8004366 <LL_RCC_LSE_EnableBypass>
 8004cd0:	f7ff fb27 	bl	8004322 <LL_RCC_LSE_Enable>
 8004cd4:	e003      	b.n	8004cde <HAL_RCC_OscConfig+0x446>
 8004cd6:	f7ff fb35 	bl	8004344 <LL_RCC_LSE_Disable>
 8004cda:	f7ff fb55 	bl	8004388 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d014      	beq.n	8004d10 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fc fe9b 	bl	8001a20 <HAL_GetTick>
 8004cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fc fe97 	bl	8001a20 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e136      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d04:	f7ff fb51 	bl	80043aa <LL_RCC_LSE_IsReady>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <HAL_RCC_OscConfig+0x456>
 8004d0e:	e013      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fc fe86 	bl	8001a20 <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fc fe82 	bl	8001a20 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e121      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d2e:	f7ff fb3c 	bl	80043aa <LL_RCC_LSE_IsReady>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ef      	bne.n	8004d18 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02c      	beq.n	8004d9e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d014      	beq.n	8004d76 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d4c:	f7ff fab5 	bl	80042ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fc fe66 	bl	8001a20 <HAL_GetTick>
 8004d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d58:	f7fc fe62 	bl	8001a20 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e103      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d6a:	f7ff fac8 	bl	80042fe <LL_RCC_HSI48_IsReady>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f1      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4c0>
 8004d74:	e013      	b.n	8004d9e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d76:	f7ff fab1 	bl	80042dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fc fe51 	bl	8001a20 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fc fe4d 	bl	8001a20 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0ee      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d94:	f7ff fab3 	bl	80042fe <LL_RCC_HSI48_IsReady>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f1      	bne.n	8004d82 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80e4 	beq.w	8004f70 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da8:	f7ff fc11 	bl	80045ce <LL_RCC_GetSysClkSource>
 8004dac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	f040 80b4 	bne.w	8004f28 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d123      	bne.n	8004e16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d11c      	bne.n	8004e16 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d114      	bne.n	8004e16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10d      	bne.n	8004e16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d106      	bne.n	8004e16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d05d      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d058      	beq.n	8004ece <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0a1      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e2e:	f7ff fc84 	bl	800473a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e32:	f7fc fdf5 	bl	8001a20 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fc fdf1 	bl	8001a20 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e092      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ef      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <HAL_RCC_OscConfig+0x68c>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e72:	0212      	lsls	r2, r2, #8
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e86:	430a      	orrs	r2, r1
 8004e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e90:	f7ff fc44 	bl	800471c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ea4:	f7fc fdbc 	bl	8001a20 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fc fdb8 	bl	8001a20 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e059      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ef      	beq.n	8004eac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ecc:	e050      	b.n	8004f70 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e04f      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d147      	bne.n	8004f70 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ee0:	f7ff fc1c 	bl	800471c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ef4:	f7fc fd94 	bl	8001a20 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fc fd90 	bl	8001a20 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e031      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ef      	beq.n	8004efc <HAL_RCC_OscConfig+0x664>
 8004f1c:	e028      	b.n	8004f70 <HAL_RCC_OscConfig+0x6d8>
 8004f1e:	bf00      	nop
 8004f20:	58000400 	.word	0x58000400
 8004f24:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d01e      	beq.n	8004f6c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	f7ff fc04 	bl	800473a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fc fd75 	bl	8001a20 <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fc fd71 	bl	8001a20 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e012      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ef      	bne.n	8004f3a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_OscConfig+0x6e4>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60cb      	str	r3, [r1, #12]
 8004f6a:	e001      	b.n	8004f70 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3734      	adds	r7, #52	; 0x34
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd90      	pop	{r4, r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	eefefffc 	.word	0xeefefffc

08004f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e12d      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f94:	4b98      	ldr	r3, [pc, #608]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d91b      	bls.n	8004fda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b95      	ldr	r3, [pc, #596]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 0207 	bic.w	r2, r3, #7
 8004faa:	4993      	ldr	r1, [pc, #588]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fd35 	bl	8001a20 <HAL_GetTick>
 8004fb6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fba:	f7fc fd31 	bl	8001a20 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e111      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fcc:	4b8a      	ldr	r3, [pc, #552]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d1ef      	bne.n	8004fba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fafb 	bl	80045e6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc fd16 	bl	8001a20 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ff8:	f7fc fd12 	bl	8001a20 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0f2      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800500a:	f7ff fbe8 	bl	80047de <LL_RCC_IsActiveFlag_HPRE>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f1      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff faf2 	bl	800460e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800502a:	f7fc fcf9 	bl	8001a20 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005032:	f7fc fcf5 	bl	8001a20 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e0d5      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005044:	f7ff fbdd 	bl	8004802 <LL_RCC_IsActiveFlag_C2HPRE>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f1      	beq.n	8005032 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff faeb 	bl	800463a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005064:	f7fc fcdc 	bl	8001a20 <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800506c:	f7fc fcd8 	bl	8001a20 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0b8      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800507e:	f7ff fbd3 	bl	8004828 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f1      	beq.n	800506c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fae5 	bl	8004668 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800509e:	f7fc fcbf 	bl	8001a20 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050a6:	f7fc fcbb 	bl	8001a20 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e09b      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80050b8:	f7ff fbc9 	bl	800484e <LL_RCC_IsActiveFlag_PPRE1>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f1      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fadb 	bl	8004690 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050da:	f7fc fca1 	bl	8001a20 <HAL_GetTick>
 80050de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050e2:	f7fc fc9d 	bl	8001a20 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e07d      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050f4:	f7ff fbbd 	bl	8004872 <LL_RCC_IsActiveFlag_PPRE2>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f1      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d043      	beq.n	8005192 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d106      	bne.n	8005120 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005112:	f7ff f87b 	bl	800420c <LL_RCC_HSE_IsReady>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11e      	bne.n	800515a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e067      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d106      	bne.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005128:	f7ff fb16 	bl	8004758 <LL_RCC_PLL_IsReady>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e05c      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800513e:	f7ff f9e3 	bl	8004508 <LL_RCC_MSI_IsReady>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e051      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800514c:	f7ff f88e 	bl	800426c <LL_RCC_HSI_IsReady>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e04a      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fa21 	bl	80045a6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005164:	f7fc fc5c 	bl	8001a20 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fc fc58 	bl	8001a20 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e036      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	f7ff fa24 	bl	80045ce <LL_RCC_GetSysClkSource>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	429a      	cmp	r2, r3
 8005190:	d1ec      	bne.n	800516c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d21b      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f023 0207 	bic.w	r2, r3, #7
 80051a8:	4913      	ldr	r1, [pc, #76]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b0:	f7fc fc36 	bl	8001a20 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051b8:	f7fc fc32 	bl	8001a20 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e012      	b.n	80051f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_RCC_ClockConfig+0x278>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1ef      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051d8:	f000 f87e 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80051dc:	4603      	mov	r3, r0
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_RCC_ClockConfig+0x27c>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80051e2:	f7fc fc29 	bl	8001a38 <HAL_GetTickPrio>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fc fbcb 	bl	8001984 <HAL_InitTick>
 80051ee:	4603      	mov	r3, r0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	58004000 	.word	0x58004000
 80051fc:	20000004 	.word	0x20000004

08005200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005206:	f7ff f9e2 	bl	80045ce <LL_RCC_GetSysClkSource>
 800520a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005212:	f7ff f99e 	bl	8004552 <LL_RCC_MSI_GetRange>
 8005216:	4603      	mov	r3, r0
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e04b      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d102      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e045      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d10a      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800523a:	f7fe ffb7 	bl	80041ac <LL_RCC_HSE_IsEnabledDiv2>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d102      	bne.n	800524a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e03a      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800524a:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e037      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005250:	f7ff fab9 	bl	80047c6 <LL_RCC_PLL_GetMainSource>
 8005254:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d003      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x64>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d003      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x6a>
 8005262:	e00d      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005266:	60bb      	str	r3, [r7, #8]
        break;
 8005268:	e015      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800526a:	f7fe ff9f 	bl	80041ac <LL_RCC_HSE_IsEnabledDiv2>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d102      	bne.n	800527a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005274:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005276:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005278:	e00d      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800527c:	60bb      	str	r3, [r7, #8]
        break;
 800527e:	e00a      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005280:	f7ff f967 	bl	8004552 <LL_RCC_MSI_GetRange>
 8005284:	4603      	mov	r3, r0
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800528e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005292:	60bb      	str	r3, [r7, #8]
        break;
 8005294:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005296:	f7ff fa71 	bl	800477c <LL_RCC_PLL_GetN>
 800529a:	4602      	mov	r2, r0
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	fb03 f402 	mul.w	r4, r3, r2
 80052a2:	f7ff fa84 	bl	80047ae <LL_RCC_PLL_GetDivider>
 80052a6:	4603      	mov	r3, r0
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	3301      	adds	r3, #1
 80052ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80052b0:	f7ff fa71 	bl	8004796 <LL_RCC_PLL_GetR>
 80052b4:	4603      	mov	r3, r0
 80052b6:	0f5b      	lsrs	r3, r3, #29
 80052b8:	3301      	adds	r3, #1
 80052ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80052be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80052c0:	68fb      	ldr	r3, [r7, #12]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	08010cc0 	.word	0x08010cc0
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	01e84800 	.word	0x01e84800

080052d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b598      	push	{r3, r4, r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80052dc:	f7ff ff90 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80052e0:	4604      	mov	r4, r0
 80052e2:	f7ff f9e9 	bl	80046b8 <LL_RCC_GetAHBPrescaler>
 80052e6:	4603      	mov	r3, r0
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	4a03      	ldr	r2, [pc, #12]	; (80052fc <HAL_RCC_GetHCLKFreq+0x24>)
 80052f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd98      	pop	{r3, r4, r7, pc}
 80052fc:	08010c60 	.word	0x08010c60

08005300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005300:	b598      	push	{r3, r4, r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005304:	f7ff ffe8 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005308:	4604      	mov	r4, r0
 800530a:	f7ff f9ef 	bl	80046ec <LL_RCC_GetAPB1Prescaler>
 800530e:	4603      	mov	r3, r0
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd98      	pop	{r3, r4, r7, pc}
 8005328:	08010ca0 	.word	0x08010ca0

0800532c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800532c:	b598      	push	{r3, r4, r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005330:	f7ff ffd2 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005334:	4604      	mov	r4, r0
 8005336:	f7ff f9e5 	bl	8004704 <LL_RCC_GetAPB2Prescaler>
 800533a:	4603      	mov	r3, r0
 800533c:	0adb      	lsrs	r3, r3, #11
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd98      	pop	{r3, r4, r7, pc}
 8005354:	08010ca0 	.word	0x08010ca0

08005358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2bb0      	cmp	r3, #176	; 0xb0
 8005364:	d903      	bls.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e007      	b.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	4a11      	ldr	r2, [pc, #68]	; (80053bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800537e:	f7ff f9a7 	bl	80046d0 <LL_RCC_GetAHB4Prescaler>
 8005382:	4603      	mov	r3, r0
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	0c9c      	lsrs	r4, r3, #18
 80053a2:	f7fe fee5 	bl	8004170 <HAL_PWREx_GetVoltageRange>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4619      	mov	r1, r3
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f80c 	bl	80053c8 <RCC_SetFlashLatency>
 80053b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd90      	pop	{r4, r7, pc}
 80053ba:	bf00      	nop
 80053bc:	08010cc0 	.word	0x08010cc0
 80053c0:	08010c60 	.word	0x08010c60
 80053c4:	431bde83 	.word	0x431bde83

080053c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b093      	sub	sp, #76	; 0x4c
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <RCC_SetFlashLatency+0xe8>)
 80053d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80053d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80053de:	4a35      	ldr	r2, [pc, #212]	; (80054b4 <RCC_SetFlashLatency+0xec>)
 80053e0:	f107 031c 	add.w	r3, r7, #28
 80053e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80053e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <RCC_SetFlashLatency+0xf0>)
 80053ec:	f107 040c 	add.w	r4, r7, #12
 80053f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80053f6:	2300      	movs	r3, #0
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005400:	d11a      	bne.n	8005438 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005402:	2300      	movs	r3, #0
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
 8005406:	e013      	b.n	8005430 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	443b      	add	r3, r7
 8005410:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d807      	bhi.n	800542a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800541a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	3348      	adds	r3, #72	; 0x48
 8005420:	443b      	add	r3, r7
 8005422:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005428:	e020      	b.n	800546c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542c:	3301      	adds	r3, #1
 800542e:	643b      	str	r3, [r7, #64]	; 0x40
 8005430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005432:	2b03      	cmp	r3, #3
 8005434:	d9e8      	bls.n	8005408 <RCC_SetFlashLatency+0x40>
 8005436:	e019      	b.n	800546c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005438:	2300      	movs	r3, #0
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	e013      	b.n	8005466 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	3348      	adds	r3, #72	; 0x48
 8005444:	443b      	add	r3, r7
 8005446:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d807      	bhi.n	8005460 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	3348      	adds	r3, #72	; 0x48
 8005456:	443b      	add	r3, r7
 8005458:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800545e:	e005      	b.n	800546c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	3301      	adds	r3, #1
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	2b02      	cmp	r3, #2
 800546a:	d9e8      	bls.n	800543e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800546c:	4b13      	ldr	r3, [pc, #76]	; (80054bc <RCC_SetFlashLatency+0xf4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 0207 	bic.w	r2, r3, #7
 8005474:	4911      	ldr	r1, [pc, #68]	; (80054bc <RCC_SetFlashLatency+0xf4>)
 8005476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800547c:	f7fc fad0 	bl	8001a20 <HAL_GetTick>
 8005480:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005482:	e008      	b.n	8005496 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005484:	f7fc facc 	bl	8001a20 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e007      	b.n	80054a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <RCC_SetFlashLatency+0xf4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d1ef      	bne.n	8005484 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	374c      	adds	r7, #76	; 0x4c
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	bf00      	nop
 80054b0:	08010978 	.word	0x08010978
 80054b4:	08010988 	.word	0x08010988
 80054b8:	08010994 	.word	0x08010994
 80054bc:	58004000 	.word	0x58004000

080054c0 <LL_RCC_LSE_IsEnabled>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <LL_RCC_LSE_IsEnabled+0x18>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <LL_RCC_LSE_IsEnabled+0x1a>
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <LL_RCC_LSE_IsReady>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d101      	bne.n	80054fc <LL_RCC_LSE_IsReady+0x18>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <LL_RCC_LSE_IsReady+0x1a>
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_RCC_SetRFWKPClockSource>:
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005518:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800551c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_RCC_SetSMPSClockSource>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4313      	orrs	r3, r2
 800554e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_RCC_SetSMPSPrescaler>:
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_RCC_SetUSARTClockSource>:
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f023 0203 	bic.w	r2, r3, #3
 8005598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_RCC_SetLPUARTClockSource>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_SetI2CClockSource>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055f4:	43db      	mvns	r3, r3
 80055f6:	401a      	ands	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_RCC_SetLPTIMClockSource>:
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_RCC_SetSAIClockSource>:
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800565e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_RCC_SetRNGClockSource>:
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800568a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <LL_RCC_SetCLK48ClockSource>:
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_RCC_SetUSBClockSource>:
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ffe3 	bl	80056a2 <LL_RCC_SetCLK48ClockSource>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <LL_RCC_SetADCClockSource>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_RCC_SetRTCClockSource>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <LL_RCC_GetRTCClockSource>:
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_ForceBackupDomainReset>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_RCC_PLLSAI1_Enable>:
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057ac:	6013      	str	r3, [r2, #0]
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_RCC_PLLSAI1_Disable>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057ca:	6013      	str	r3, [r2, #0]
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_PLLSAI1_IsReady>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e8:	d101      	bne.n	80057ee <LL_RCC_PLLSAI1_IsReady+0x18>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005802:	2300      	movs	r3, #0
 8005804:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005806:	2300      	movs	r3, #0
 8005808:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d034      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800581e:	d021      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005820:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005824:	d81b      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800582a:	d01d      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800582c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005830:	d815      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800583a:	d110      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800584c:	e00d      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f947 	bl	8005ae6 <RCCEx_PLLSAI1_ConfigNP>
 8005858:	4603      	mov	r3, r0
 800585a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77fb      	strb	r3, [r7, #31]
        break;
 8005862:	e002      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	7ffb      	ldrb	r3, [r7, #31]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fee8 	bl	800564a <LL_RCC_SetSAIClockSource>
 800587a:	e001      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	7ffb      	ldrb	r3, [r7, #31]
 800587e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005888:	2b00      	cmp	r3, #0
 800588a:	d046      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800588c:	f7ff ff56 	bl	800573c <LL_RCC_GetRTCClockSource>
 8005890:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	d03c      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800589c:	f7fe fc58 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff ff30 	bl	8005710 <LL_RCC_SetRTCClockSource>
 80058b0:	e02e      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80058bc:	f7ff ff4b 	bl	8005756 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80058c0:	f7ff ff5a 	bl	8005778 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80058dc:	f7ff fdf0 	bl	80054c0 <LL_RCC_LSE_IsEnabled>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d114      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058e6:	f7fc f89b 	bl	8001a20 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80058ec:	e00b      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fc f897 	bl	8001a20 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d902      	bls.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	77fb      	strb	r3, [r7, #31]
              break;
 8005904:	e004      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005906:	f7ff fded 	bl	80054e4 <LL_RCC_LSE_IsReady>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d1ee      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005910:	7ffb      	ldrb	r3, [r7, #31]
 8005912:	77bb      	strb	r3, [r7, #30]
 8005914:	e001      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005916:	7ffb      	ldrb	r3, [r7, #31]
 8005918:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fe2a 	bl	8005584 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fe35 	bl	80055b0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fe5d 	bl	8005616 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff fe52 	bl	8005616 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fe2a 	bl	80055dc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fe1f 	bl	80055dc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d022      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fe8d 	bl	80056ce <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059bc:	d107      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059cc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d6:	d10b      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f8dd 	bl	8005b9c <RCCEx_PLLSAI1_ConfigNQ>
 80059e2:	4603      	mov	r3, r0
 80059e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80059ec:	7ffb      	ldrb	r3, [r7, #31]
 80059ee:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02b      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d008      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fe2a 	bl	8005676 <LL_RCC_SetRNGClockSource>
 8005a22:	e00a      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7ff fe21 	bl	8005676 <LL_RCC_SetRNGClockSource>
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff fe34 	bl	80056a2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005a42:	d107      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d022      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fe3d 	bl	80056e4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a72:	d107      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a8c:	d10b      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f8dd 	bl	8005c52 <RCCEx_PLLSAI1_ConfigNR>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a9c:	7ffb      	ldrb	r3, [r7, #31]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fd26 	bl	8005508 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fd45 	bl	800555c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fd2c 	bl	8005534 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005adc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005af2:	f7ff fe61 	bl	80057b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005af6:	f7fb ff93 	bl	8001a20 <HAL_GetTick>
 8005afa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005afc:	e009      	b.n	8005b12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005afe:	f7fb ff8f 	bl	8001a20 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d902      	bls.n	8005b12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e004      	b.n	8005b1c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b12:	f7ff fe60 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d137      	bne.n	8005b92 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b50:	f7ff fe23 	bl	800579a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fb ff64 	bl	8001a20 <HAL_GetTick>
 8005b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b5a:	e009      	b.n	8005b70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5c:	f7fb ff60 	bl	8001a20 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d902      	bls.n	8005b70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b6e:	e004      	b.n	8005b7a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b70:	f7ff fe31 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d1f0      	bne.n	8005b5c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ba8:	f7ff fe06 	bl	80057b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bac:	f7fb ff38 	bl	8001a20 <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bb2:	e009      	b.n	8005bc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb4:	f7fb ff34 	bl	8001a20 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d902      	bls.n	8005bc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc6:	e004      	b.n	8005bd2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bc8:	f7ff fe05 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d137      	bne.n	8005c48 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c06:	f7ff fdc8 	bl	800579a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0a:	f7fb ff09 	bl	8001a20 <HAL_GetTick>
 8005c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c10:	e009      	b.n	8005c26 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c12:	f7fb ff05 	bl	8001a20 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d902      	bls.n	8005c26 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	73fb      	strb	r3, [r7, #15]
        break;
 8005c24:	e004      	b.n	8005c30 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c26:	f7ff fdd6 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d1f0      	bne.n	8005c12 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d108      	bne.n	8005c48 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c44:	4313      	orrs	r3, r2
 8005c46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c5e:	f7ff fdab 	bl	80057b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c62:	f7fb fedd 	bl	8001a20 <HAL_GetTick>
 8005c66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c68:	e009      	b.n	8005c7e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c6a:	f7fb fed9 	bl	8001a20 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d902      	bls.n	8005c7e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e004      	b.n	8005c88 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c7e:	f7ff fdaa 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d137      	bne.n	8005cfe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005cbc:	f7ff fd6d 	bl	800579a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc0:	f7fb feae 	bl	8001a20 <HAL_GetTick>
 8005cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cc6:	e009      	b.n	8005cdc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cc8:	f7fb feaa 	bl	8001a20 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d902      	bls.n	8005cdc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cda:	e004      	b.n	8005ce6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cdc:	f7ff fd7b 	bl	80057d6 <LL_RCC_PLLSAI1_IsReady>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d1f0      	bne.n	8005cc8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e090      	b.n	8005e3c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fade 	bl	80012f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	22ca      	movs	r2, #202	; 0xca
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2253      	movs	r2, #83	; 0x53
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f89f 	bl	8005e90 <RTC_EnterInitMode>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2204      	movs	r2, #4
 8005d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e067      	b.n	8005e3c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6899      	ldr	r1, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6919      	ldr	r1, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	041a      	lsls	r2, r3, #16
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dca:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0203 	bic.w	r2, r2, #3
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f81e 	bl	8005e44 <HAL_RTC_WaitForSynchro>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00d      	beq.n	8005e2a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22ff      	movs	r2, #255	; 0xff
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e008      	b.n	8005e3c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e5c:	f7fb fde0 	bl	8001a20 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e62:	e009      	b.n	8005e78 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e64:	f7fb fddc 	bl	8001a20 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e72:	d901      	bls.n	8005e78 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e007      	b.n	8005e88 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d119      	bne.n	8005eda <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005eb0:	f7fb fdb6 	bl	8001a20 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005eb6:	e009      	b.n	8005ecc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005eb8:	f7fb fdb2 	bl	8001a20 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ec6:	d901      	bls.n	8005ecc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e007      	b.n	8005edc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0ee      	beq.n	8005eb8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <LL_RCC_GetUSARTClockSource>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4013      	ands	r3, r2
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_RCC_GetLPUARTClockSource>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4013      	ands	r3, r2
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e042      	b.n	8005fbc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fb fc1b 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2224      	movs	r2, #36	; 0x24
 8005f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fc58 	bl	800681c <UART_SetConfig>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e022      	b.n	8005fbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fe72 	bl	8006c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fef9 	bl	8006dac <UART_CheckIdleState>
 8005fba:	4603      	mov	r3, r0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b091      	sub	sp, #68	; 0x44
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	f040 808c 	bne.w	80060f6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_UART_Transmit_IT+0x26>
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e084      	b.n	80060f8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Transmit_IT+0x38>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e07d      	b.n	80060f8 <HAL_UART_Transmit_IT+0x134>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2221      	movs	r2, #33	; 0x21
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006038:	d12e      	bne.n	8006098 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006042:	d107      	bne.n	8006054 <HAL_UART_Transmit_IT+0x90>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <HAL_UART_Transmit_IT+0x140>)
 8006050:	675a      	str	r2, [r3, #116]	; 0x74
 8006052:	e002      	b.n	800605a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <HAL_UART_Transmit_IT+0x144>)
 8006058:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006082:	637a      	str	r2, [r7, #52]	; 0x34
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <HAL_UART_Transmit_IT+0x9e>
 8006096:	e02c      	b.n	80060f2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d107      	bne.n	80060b2 <HAL_UART_Transmit_IT+0xee>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a17      	ldr	r2, [pc, #92]	; (800610c <HAL_UART_Transmit_IT+0x148>)
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74
 80060b0:	e002      	b.n	80060b8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a16      	ldr	r2, [pc, #88]	; (8006110 <HAL_UART_Transmit_IT+0x14c>)
 80060b6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	613b      	str	r3, [r7, #16]
   return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	69f9      	ldr	r1, [r7, #28]
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e6      	bne.n	80060c0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e000      	b.n	80060f8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80060f6:	2302      	movs	r3, #2
  }
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3744      	adds	r7, #68	; 0x44
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	0800757b 	.word	0x0800757b
 8006108:	0800749b 	.word	0x0800749b
 800610c:	080073d9 	.word	0x080073d9
 8006110:	08007321 	.word	0x08007321

08006114 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	2b20      	cmp	r3, #32
 800612a:	d142      	bne.n	80061b2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_UART_Receive_IT+0x24>
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e03b      	b.n	80061b4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UART_Receive_IT+0x36>
 8006146:	2302      	movs	r3, #2
 8006148:	e034      	b.n	80061b4 <HAL_UART_Receive_IT+0xa0>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a17      	ldr	r2, [pc, #92]	; (80061bc <HAL_UART_Receive_IT+0xa8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01f      	beq.n	80061a2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	613b      	str	r3, [r7, #16]
   return(result);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	623b      	str	r3, [r7, #32]
 8006190:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	61bb      	str	r3, [r7, #24]
   return(result);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e6      	bne.n	8006170 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 ff13 	bl	8006fd4 <UART_Start_Receive_IT>
 80061ae:	4603      	mov	r3, r0
 80061b0:	e000      	b.n	80061b4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3728      	adds	r7, #40	; 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40008000 	.word	0x40008000

080061c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b0ba      	sub	sp, #232	; 0xe8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80061ee:	4013      	ands	r3, r2
 80061f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11b      	bne.n	8006234 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d009      	beq.n	8006234 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 82d6 	beq.w	80067d6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
      }
      return;
 8006232:	e2d0      	b.n	80067d6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 811f 	beq.w	800647c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800623e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006242:	4b8b      	ldr	r3, [pc, #556]	; (8006470 <HAL_UART_IRQHandler+0x2b0>)
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800624a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800624e:	4b89      	ldr	r3, [pc, #548]	; (8006474 <HAL_UART_IRQHandler+0x2b4>)
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8112 	beq.w	800647c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d011      	beq.n	8006288 <HAL_UART_IRQHandler+0xc8>
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2201      	movs	r2, #1
 8006276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627e:	f043 0201 	orr.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d011      	beq.n	80062b8 <HAL_UART_IRQHandler+0xf8>
 8006294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2202      	movs	r2, #2
 80062a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ae:	f043 0204 	orr.w	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <HAL_UART_IRQHandler+0x128>
 80062c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2204      	movs	r2, #4
 80062d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062de:	f043 0202 	orr.w	r2, r3, #2
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006300:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006304:	4b5a      	ldr	r3, [pc, #360]	; (8006470 <HAL_UART_IRQHandler+0x2b0>)
 8006306:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2208      	movs	r2, #8
 8006312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631a:	f043 0208 	orr.w	r2, r3, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800632c:	2b00      	cmp	r3, #0
 800632e:	d012      	beq.n	8006356 <HAL_UART_IRQHandler+0x196>
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 823c 	beq.w	80067da <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d013      	beq.n	8006396 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d005      	beq.n	80063ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d04f      	beq.n	800645a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 ff34 	bl	8007228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d141      	bne.n	8006452 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3308      	adds	r3, #8
 80063f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1d9      	bne.n	80063ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006426:	4a14      	ldr	r2, [pc, #80]	; (8006478 <HAL_UART_IRQHandler+0x2b8>)
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642e:	4618      	mov	r0, r3
 8006430:	f7fb fd97 	bl	8001f62 <HAL_DMA_Abort_IT>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d017      	beq.n	800646a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006448:	e00f      	b.n	800646a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9d0 	bl	80067f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	e00b      	b.n	800646a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9cc 	bl	80067f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	e007      	b.n	800646a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9c8 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006468:	e1b7      	b.n	80067da <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646a:	bf00      	nop
    return;
 800646c:	e1b5      	b.n	80067da <HAL_UART_IRQHandler+0x61a>
 800646e:	bf00      	nop
 8006470:	10000001 	.word	0x10000001
 8006474:	04000120 	.word	0x04000120
 8006478:	080072f5 	.word	0x080072f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 814a 	bne.w	800671a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8143 	beq.w	800671a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 813c 	beq.w	800671a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	f040 80b5 	bne.w	8006624 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80064c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8187 	beq.w	80067de <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064da:	429a      	cmp	r2, r3
 80064dc:	f080 817f 	bcs.w	80067de <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8086 	bne.w	8006608 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800652a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800653e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1da      	bne.n	80064fc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800656a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800656e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800657c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e1      	bne.n	8006546 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e3      	bne.n	8006582 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d8:	f023 0310 	bic.w	r3, r3, #16
 80065dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e4      	bne.n	80065c8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fc4e 	bl	8001ea4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8f1 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006622:	e0dc      	b.n	80067de <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006630:	b29b      	uxth	r3, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80ce 	beq.w	80067e2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80c9 	beq.w	80067e2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006672:	647b      	str	r3, [r7, #68]	; 0x44
 8006674:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e4      	bne.n	8006650 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	623b      	str	r3, [r7, #32]
   return(result);
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ae:	633a      	str	r2, [r7, #48]	; 0x30
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e1      	bne.n	8006686 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	69b9      	ldr	r1, [r7, #24]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	617b      	str	r3, [r7, #20]
   return(result);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e4      	bne.n	80066d6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800670c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f876 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006718:	e063      	b.n	80067e2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00e      	beq.n	8006744 <HAL_UART_IRQHandler+0x584>
 8006726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800673a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fc19 	bl	8007f74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006742:	e051      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d014      	beq.n	800677a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676c:	2b00      	cmp	r3, #0
 800676e:	d03a      	beq.n	80067e6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
    }
    return;
 8006778:	e035      	b.n	80067e6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_UART_IRQHandler+0x5da>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 ff66 	bl	8007664 <UART_EndTransmit_IT>
    return;
 8006798:	e026      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_UART_IRQHandler+0x5fa>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fbf2 	bl	8007f9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067b8:	e016      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <HAL_UART_IRQHandler+0x628>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da0c      	bge.n	80067e8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fbda 	bl	8007f88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067d4:	e008      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
      return;
 80067d6:	bf00      	nop
 80067d8:	e006      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
    return;
 80067da:	bf00      	nop
 80067dc:	e004      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
      return;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
      return;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <HAL_UART_IRQHandler+0x628>
    return;
 80067e6:	bf00      	nop
  }
}
 80067e8:	37e8      	adds	r7, #232	; 0xe8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop

080067f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800681c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006820:	b08c      	sub	sp, #48	; 0x30
 8006822:	af00      	add	r7, sp, #0
 8006824:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	431a      	orrs	r2, r3
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	431a      	orrs	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4313      	orrs	r3, r2
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4baf      	ldr	r3, [pc, #700]	; (8006b08 <UART_SetConfig+0x2ec>)
 800684c:	4013      	ands	r3, r2
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006854:	430b      	orrs	r3, r1
 8006856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4aa4      	ldr	r2, [pc, #656]	; (8006b0c <UART_SetConfig+0x2f0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006884:	4313      	orrs	r3, r2
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006892:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800689c:	430b      	orrs	r3, r1
 800689e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f023 010f 	bic.w	r1, r3, #15
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a95      	ldr	r2, [pc, #596]	; (8006b10 <UART_SetConfig+0x2f4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d125      	bne.n	800690c <UART_SetConfig+0xf0>
 80068c0:	2003      	movs	r0, #3
 80068c2:	f7ff fb0f 	bl	8005ee4 <LL_RCC_GetUSARTClockSource>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d81b      	bhi.n	8006904 <UART_SetConfig+0xe8>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0xb8>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	080068f5 	.word	0x080068f5
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e042      	b.n	8006972 <UART_SetConfig+0x156>
 80068ec:	2302      	movs	r3, #2
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e03e      	b.n	8006972 <UART_SetConfig+0x156>
 80068f4:	2304      	movs	r3, #4
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e03a      	b.n	8006972 <UART_SetConfig+0x156>
 80068fc:	2308      	movs	r3, #8
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e036      	b.n	8006972 <UART_SetConfig+0x156>
 8006904:	2310      	movs	r3, #16
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690a:	e032      	b.n	8006972 <UART_SetConfig+0x156>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a7e      	ldr	r2, [pc, #504]	; (8006b0c <UART_SetConfig+0x2f0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d12a      	bne.n	800696c <UART_SetConfig+0x150>
 8006916:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800691a:	f7ff faf3 	bl	8005f04 <LL_RCC_GetLPUARTClockSource>
 800691e:	4603      	mov	r3, r0
 8006920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006924:	d01a      	beq.n	800695c <UART_SetConfig+0x140>
 8006926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0x148>
 800692c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006930:	d00c      	beq.n	800694c <UART_SetConfig+0x130>
 8006932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006936:	d815      	bhi.n	8006964 <UART_SetConfig+0x148>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <UART_SetConfig+0x128>
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d008      	beq.n	8006954 <UART_SetConfig+0x138>
 8006942:	e00f      	b.n	8006964 <UART_SetConfig+0x148>
 8006944:	2300      	movs	r3, #0
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e012      	b.n	8006972 <UART_SetConfig+0x156>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e00e      	b.n	8006972 <UART_SetConfig+0x156>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695a:	e00a      	b.n	8006972 <UART_SetConfig+0x156>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006962:	e006      	b.n	8006972 <UART_SetConfig+0x156>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696a:	e002      	b.n	8006972 <UART_SetConfig+0x156>
 800696c:	2310      	movs	r3, #16
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a65      	ldr	r2, [pc, #404]	; (8006b0c <UART_SetConfig+0x2f0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	f040 8097 	bne.w	8006aac <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800697e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006982:	2b08      	cmp	r3, #8
 8006984:	d823      	bhi.n	80069ce <UART_SetConfig+0x1b2>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x170>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069cf 	.word	0x080069cf
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069bf 	.word	0x080069bf
 80069a0:	080069cf 	.word	0x080069cf
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069cf 	.word	0x080069cf
 80069ac:	080069c7 	.word	0x080069c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fe fca6 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e010      	b.n	80069da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b8:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <UART_SetConfig+0x2f8>)
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069bc:	e00d      	b.n	80069da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069be:	f7fe fc1f 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e005      	b.n	80069da <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 812a 	beq.w	8006c36 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	4a4c      	ldr	r2, [pc, #304]	; (8006b18 <UART_SetConfig+0x2fc>)
 80069e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d305      	bcc.n	8006a12 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a18:	e10d      	b.n	8006c36 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	60fa      	str	r2, [r7, #12]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	4a3c      	ldr	r2, [pc, #240]	; (8006b18 <UART_SetConfig+0x2fc>)
 8006a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2200      	movs	r2, #0
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a3c:	f7f9 fc00 	bl	8000240 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	020b      	lsls	r3, r1, #8
 8006a52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a56:	0202      	lsls	r2, r0, #8
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	6849      	ldr	r1, [r1, #4]
 8006a5c:	0849      	lsrs	r1, r1, #1
 8006a5e:	2000      	movs	r0, #0
 8006a60:	460c      	mov	r4, r1
 8006a62:	4605      	mov	r5, r0
 8006a64:	eb12 0804 	adds.w	r8, r2, r4
 8006a68:	eb43 0905 	adc.w	r9, r3, r5
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	469a      	mov	sl, r3
 8006a74:	4693      	mov	fp, r2
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fbdf 	bl	8000240 <__aeabi_uldivmod>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4613      	mov	r3, r2
 8006a88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a90:	d308      	bcc.n	8006aa4 <UART_SetConfig+0x288>
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a98:	d204      	bcs.n	8006aa4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	e0c8      	b.n	8006c36 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aaa:	e0c4      	b.n	8006c36 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d16d      	bne.n	8006b92 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aba:	3b01      	subs	r3, #1
 8006abc:	2b07      	cmp	r3, #7
 8006abe:	d82d      	bhi.n	8006b1c <UART_SetConfig+0x300>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x2ac>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ae9 	.word	0x08006ae9
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006b1d 	.word	0x08006b1d
 8006ad4:	08006af7 	.word	0x08006af7
 8006ad8:	08006b1d 	.word	0x08006b1d
 8006adc:	08006b1d 	.word	0x08006b1d
 8006ae0:	08006b1d 	.word	0x08006b1d
 8006ae4:	08006aff 	.word	0x08006aff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae8:	f7fe fc20 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aee:	e01b      	b.n	8006b28 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <UART_SetConfig+0x2f8>)
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af4:	e018      	b.n	8006b28 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af6:	f7fe fb83 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006afc:	e014      	b.n	8006b28 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b04:	e010      	b.n	8006b28 <UART_SetConfig+0x30c>
 8006b06:	bf00      	nop
 8006b08:	cfff69f3 	.word	0xcfff69f3
 8006b0c:	40008000 	.word	0x40008000
 8006b10:	40013800 	.word	0x40013800
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	08010d00 	.word	0x08010d00
      default:
        pclk = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8083 	beq.w	8006c36 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	4a4a      	ldr	r2, [pc, #296]	; (8006c60 <UART_SetConfig+0x444>)
 8006b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b42:	005a      	lsls	r2, r3, #1
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	441a      	add	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d916      	bls.n	8006b8a <UART_SetConfig+0x36e>
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d212      	bcs.n	8006b8a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f023 030f 	bic.w	r3, r3, #15
 8006b6c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	8bfb      	ldrh	r3, [r7, #30]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	8bfa      	ldrh	r2, [r7, #30]
 8006b86:	60da      	str	r2, [r3, #12]
 8006b88:	e055      	b.n	8006c36 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b90:	e051      	b.n	8006c36 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	d822      	bhi.n	8006be2 <UART_SetConfig+0x3c6>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0x388>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bc5 	.word	0x08006bc5
 8006ba8:	08006bcd 	.word	0x08006bcd
 8006bac:	08006be3 	.word	0x08006be3
 8006bb0:	08006bd3 	.word	0x08006bd3
 8006bb4:	08006be3 	.word	0x08006be3
 8006bb8:	08006be3 	.word	0x08006be3
 8006bbc:	08006be3 	.word	0x08006be3
 8006bc0:	08006bdb 	.word	0x08006bdb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc4:	f7fe fbb2 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8006bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bca:	e010      	b.n	8006bee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <UART_SetConfig+0x448>)
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bd0:	e00d      	b.n	8006bee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bd2:	f7fe fb15 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8006bd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bd8:	e009      	b.n	8006bee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006be0:	e005      	b.n	8006bee <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bec:	bf00      	nop
    }

    if (pclk != 0U)
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	4a19      	ldr	r2, [pc, #100]	; (8006c60 <UART_SetConfig+0x444>)
 8006bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d908      	bls.n	8006c30 <UART_SetConfig+0x414>
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d204      	bcs.n	8006c30 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	e002      	b.n	8006c36 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3730      	adds	r7, #48	; 0x30
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c60:	08010d00 	.word	0x08010d00
 8006c64:	00f42400 	.word	0x00f42400

08006c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01a      	beq.n	8006d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d10a      	bne.n	8006d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dbc:	f7fa fe30 	bl	8001a20 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10e      	bne.n	8006dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f82f 	bl	8006e42 <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e025      	b.n	8006e3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d10e      	bne.n	8006e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f819 	bl	8006e42 <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e00f      	b.n	8006e3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b09c      	sub	sp, #112	; 0x70
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e52:	e0a9      	b.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5a:	f000 80a5 	beq.w	8006fa8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5e:	f7fa fddf 	bl	8001a20 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d302      	bcc.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d140      	bne.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e88:	667b      	str	r3, [r7, #100]	; 0x64
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e069      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d051      	beq.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f12:	d149      	bne.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e6      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3308      	adds	r3, #8
 8006f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f70:	623a      	str	r2, [r7, #32]
 8006f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e010      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	f43f af46 	beq.w	8006e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3770      	adds	r7, #112	; 0x70
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b0a3      	sub	sp, #140	; 0x8c
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d10e      	bne.n	8007026 <UART_Start_Receive_IT+0x52>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <UART_Start_Receive_IT+0x48>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800701a:	e02d      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	22ff      	movs	r2, #255	; 0xff
 8007020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007024:	e028      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10d      	bne.n	800704a <UART_Start_Receive_IT+0x76>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <UART_Start_Receive_IT+0x6c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800703e:	e01b      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	227f      	movs	r2, #127	; 0x7f
 8007044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007048:	e016      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007052:	d10d      	bne.n	8007070 <UART_Start_Receive_IT+0x9c>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <UART_Start_Receive_IT+0x92>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	227f      	movs	r2, #127	; 0x7f
 8007060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007064:	e008      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	223f      	movs	r2, #63	; 0x3f
 800706a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800706e:	e003      	b.n	8007078 <UART_Start_Receive_IT+0xa4>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2222      	movs	r2, #34	; 0x22
 8007084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80070ac:	673a      	str	r2, [r7, #112]	; 0x70
 80070ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80070b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80070ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e3      	bne.n	8007088 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c8:	d153      	bne.n	8007172 <UART_Start_Receive_IT+0x19e>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d34d      	bcc.n	8007172 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d107      	bne.n	80070f0 <UART_Start_Receive_IT+0x11c>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <UART_Start_Receive_IT+0x244>)
 80070ec:	671a      	str	r2, [r3, #112]	; 0x70
 80070ee:	e002      	b.n	80070f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4a4a      	ldr	r2, [pc, #296]	; (800721c <UART_Start_Receive_IT+0x248>)
 80070f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01a      	beq.n	800713c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800711a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800712a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800712e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e4      	bne.n	8007106 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007152:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800715c:	64ba      	str	r2, [r7, #72]	; 0x48
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800716a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_Start_Receive_IT+0x168>
 8007170:	e04a      	b.n	8007208 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d107      	bne.n	800718c <UART_Start_Receive_IT+0x1b8>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4a26      	ldr	r2, [pc, #152]	; (8007220 <UART_Start_Receive_IT+0x24c>)
 8007188:	671a      	str	r2, [r3, #112]	; 0x70
 800718a:	e002      	b.n	8007192 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a25      	ldr	r2, [pc, #148]	; (8007224 <UART_Start_Receive_IT+0x250>)
 8007190:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d019      	beq.n	80071d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071b6:	677b      	str	r3, [r7, #116]	; 0x74
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e6      	bne.n	80071a2 <UART_Start_Receive_IT+0x1ce>
 80071d4:	e018      	b.n	8007208 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	613b      	str	r3, [r7, #16]
   return(result);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f043 0320 	orr.w	r3, r3, #32
 80071ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f4:	623b      	str	r3, [r7, #32]
 80071f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	69f9      	ldr	r1, [r7, #28]
 80071fa:	6a3a      	ldr	r2, [r7, #32]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	61bb      	str	r3, [r7, #24]
   return(result);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	378c      	adds	r7, #140	; 0x8c
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	08007c75 	.word	0x08007c75
 800721c:	0800797d 	.word	0x0800797d
 8007220:	0800781b 	.word	0x0800781b
 8007224:	080076bb 	.word	0x080076bb

08007228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b095      	sub	sp, #84	; 0x54
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724e:	643b      	str	r3, [r7, #64]	; 0x40
 8007250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e6      	bne.n	8007230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	61fb      	str	r3, [r7, #28]
   return(result);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e3      	bne.n	8007262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d118      	bne.n	80072d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 0310 	bic.w	r3, r3, #16
 80072b6:	647b      	str	r3, [r7, #68]	; 0x44
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	613b      	str	r3, [r7, #16]
   return(result);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e6      	bne.n	80072a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80072e8:	bf00      	nop
 80072ea:	3754      	adds	r7, #84	; 0x54
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fa6c 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b08f      	sub	sp, #60	; 0x3c
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732e:	2b21      	cmp	r3, #33	; 0x21
 8007330:	d14c      	bne.n	80073cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d132      	bne.n	80073a4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	61fb      	str	r3, [r7, #28]
   return(result);
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	60bb      	str	r3, [r7, #8]
   return(result);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073a2:	e013      	b.n	80073cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80073cc:	bf00      	nop
 80073ce:	373c      	adds	r7, #60	; 0x3c
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b091      	sub	sp, #68	; 0x44
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e6:	2b21      	cmp	r3, #33	; 0x21
 80073e8:	d151      	bne.n	800748e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d132      	bne.n	800745c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	623b      	str	r3, [r7, #32]
   return(result);
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	633b      	str	r3, [r7, #48]	; 0x30
 8007416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e6      	bne.n	80073f6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60fb      	str	r3, [r7, #12]
   return(result);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	69b9      	ldr	r1, [r7, #24]
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	617b      	str	r3, [r7, #20]
   return(result);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800745a:	e018      	b.n	800748e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007470:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800748e:	bf00      	nop
 8007490:	3744      	adds	r7, #68	; 0x44
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800749a:	b480      	push	{r7}
 800749c:	b091      	sub	sp, #68	; 0x44
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a8:	2b21      	cmp	r3, #33	; 0x21
 80074aa:	d160      	bne.n	800756e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80074b4:	e057      	b.n	8007566 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d133      	bne.n	800752a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	623b      	str	r3, [r7, #32]
   return(result);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e2:	633a      	str	r2, [r7, #48]	; 0x30
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	60fb      	str	r3, [r7, #12]
   return(result);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	617b      	str	r3, [r7, #20]
   return(result);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e6      	bne.n	80074f6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007528:	e021      	b.n	800756e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d013      	beq.n	8007560 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007562:	3b01      	subs	r3, #1
 8007564:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007566:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1a4      	bne.n	80074b6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800756c:	e7ff      	b.n	800756e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800756e:	bf00      	nop
 8007570:	3744      	adds	r7, #68	; 0x44
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800757a:	b480      	push	{r7}
 800757c:	b091      	sub	sp, #68	; 0x44
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007588:	2b21      	cmp	r3, #33	; 0x21
 800758a:	d165      	bne.n	8007658 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007592:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007594:	e05c      	b.n	8007650 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d133      	bne.n	800760a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6979      	ldr	r1, [r7, #20]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	613b      	str	r3, [r7, #16]
   return(result);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e6      	bne.n	80075d6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007608:	e026      	b.n	8007658 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b00      	cmp	r3, #0
 8007616:	d018      	beq.n	800764a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800764a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800764c:	3b01      	subs	r3, #1
 800764e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007652:	2b00      	cmp	r3, #0
 8007654:	d19f      	bne.n	8007596 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007656:	e7ff      	b.n	8007658 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007658:	bf00      	nop
 800765a:	3744      	adds	r7, #68	; 0x44
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	60bb      	str	r3, [r7, #8]
   return(result);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6979      	ldr	r1, [r7, #20]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	613b      	str	r3, [r7, #16]
   return(result);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e6      	bne.n	800766c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7f9 fc49 	bl	8000f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b2:	bf00      	nop
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b096      	sub	sp, #88	; 0x58
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d2:	2b22      	cmp	r3, #34	; 0x22
 80076d4:	f040 8095 	bne.w	8007802 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80076e6:	b2d9      	uxtb	r1, r3
 80076e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f2:	400a      	ands	r2, r1
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d178      	bne.n	8007812 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007734:	653b      	str	r3, [r7, #80]	; 0x50
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
 8007740:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e6      	bne.n	8007720 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	623b      	str	r3, [r7, #32]
   return(result);
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007772:	633a      	str	r2, [r7, #48]	; 0x30
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d12e      	bne.n	80077fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0310 	bic.w	r3, r3, #16
 80077b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	617b      	str	r3, [r7, #20]
   return(result);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e6      	bne.n	80077a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d103      	bne.n	80077ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff f806 	bl	8006804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077f8:	e00b      	b.n	8007812 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f9 fb84 	bl	8000f08 <HAL_UART_RxCpltCallback>
}
 8007800:	e007      	b.n	8007812 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0208 	orr.w	r2, r2, #8
 8007810:	619a      	str	r2, [r3, #24]
}
 8007812:	bf00      	nop
 8007814:	3758      	adds	r7, #88	; 0x58
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b096      	sub	sp, #88	; 0x58
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007828:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	2b22      	cmp	r3, #34	; 0x22
 8007834:	f040 8095 	bne.w	8007962 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007846:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007848:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800784c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007850:	4013      	ands	r3, r2
 8007852:	b29a      	uxth	r2, r3
 8007854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007856:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	1c9a      	adds	r2, r3, #2
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d178      	bne.n	8007972 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789e:	643b      	str	r3, [r7, #64]	; 0x40
 80078a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d12e      	bne.n	800795a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0310 	bic.w	r3, r3, #16
 8007916:	647b      	str	r3, [r7, #68]	; 0x44
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6979      	ldr	r1, [r7, #20]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	613b      	str	r3, [r7, #16]
   return(result);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b10      	cmp	r3, #16
 8007940:	d103      	bne.n	800794a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2210      	movs	r2, #16
 8007948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fe ff56 	bl	8006804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007958:	e00b      	b.n	8007972 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7f9 fad4 	bl	8000f08 <HAL_UART_RxCpltCallback>
}
 8007960:	e007      	b.n	8007972 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0208 	orr.w	r2, r2, #8
 8007970:	619a      	str	r2, [r3, #24]
}
 8007972:	bf00      	nop
 8007974:	3758      	adds	r7, #88	; 0x58
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0a6      	sub	sp, #152	; 0x98
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800798a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	2b22      	cmp	r3, #34	; 0x22
 80079b4:	f040 814f 	bne.w	8007c56 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079c2:	e0f6      	b.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80079d2:	b2d9      	uxtb	r1, r3
 80079d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	400a      	ands	r2, r1
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d053      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2201      	movs	r2, #1
 8007a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2202      	movs	r2, #2
 8007a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9c:	f043 0202 	orr.w	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe fe9d 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d173      	bne.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b24:	657a      	str	r2, [r7, #84]	; 0x54
 8007b26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e3      	bne.n	8007b00 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d12e      	bne.n	8007bac <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	f023 0310 	bic.w	r3, r3, #16
 8007b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b72:	643b      	str	r3, [r7, #64]	; 0x40
 8007b74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e6      	bne.n	8007b54 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d103      	bne.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2210      	movs	r2, #16
 8007b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7fe fe2d 	bl	8006804 <HAL_UARTEx_RxEventCallback>
 8007baa:	e002      	b.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7f9 f9ab 	bl	8000f08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f47f aefe 	bne.w	80079c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bd2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d045      	beq.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d23e      	bcs.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e5      	bne.n	8007be8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f043 0320 	orr.w	r3, r3, #32
 8007c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c54:	e007      	b.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0208 	orr.w	r2, r2, #8
 8007c64:	619a      	str	r2, [r3, #24]
}
 8007c66:	bf00      	nop
 8007c68:	3798      	adds	r7, #152	; 0x98
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	080076bb 	.word	0x080076bb

08007c74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b0a8      	sub	sp, #160	; 0xa0
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c82:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	2b22      	cmp	r3, #34	; 0x22
 8007cac:	f040 8153 	bne.w	8007f56 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cba:	e0fa      	b.n	8007eb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007cce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007cd2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	1c9a      	adds	r2, r3, #2
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d053      	beq.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d011      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d38:	f043 0201 	orr.w	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d68:	f043 0204 	orr.w	r2, r3, #4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d98:	f043 0202 	orr.w	r2, r3, #2
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fe fd1f 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d175      	bne.n	8007eb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e4      	bne.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e1      	bne.n	8007dfc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d12e      	bne.n	8007eac <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	f023 0310 	bic.w	r3, r3, #16
 8007e68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e72:	647b      	str	r3, [r7, #68]	; 0x44
 8007e74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e6      	bne.n	8007e54 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d103      	bne.n	8007e9c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2210      	movs	r2, #16
 8007e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fe fcad 	bl	8006804 <HAL_UARTEx_RxEventCallback>
 8007eaa:	e002      	b.n	8007eb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7f9 f82b 	bl	8000f08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d006      	beq.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f47f aefa 	bne.w	8007cbc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ece:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ed2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d045      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ee0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d23e      	bcs.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007efe:	677b      	str	r3, [r7, #116]	; 0x74
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f08:	633a      	str	r2, [r7, #48]	; 0x30
 8007f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e5      	bne.n	8007ee8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a14      	ldr	r2, [pc, #80]	; (8007f70 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007f20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f043 0320 	orr.w	r3, r3, #32
 8007f36:	673b      	str	r3, [r7, #112]	; 0x70
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f54:	e007      	b.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0208 	orr.w	r2, r2, #8
 8007f64:	619a      	str	r2, [r3, #24]
}
 8007f66:	bf00      	nop
 8007f68:	37a0      	adds	r7, #160	; 0xa0
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	0800781b 	.word	0x0800781b

08007f74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e027      	b.n	8008016 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2224      	movs	r2, #36	; 0x24
 8007fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ff4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008036:	2302      	movs	r3, #2
 8008038:	e02d      	b.n	8008096 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2224      	movs	r2, #36	; 0x24
 8008046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f850 	bl	800811c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e02d      	b.n	8008112 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2224      	movs	r2, #36	; 0x24
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f812 	bl	800811c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	2b00      	cmp	r3, #0
 800812a:	d108      	bne.n	800813e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800813c:	e031      	b.n	80081a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800813e:	2308      	movs	r3, #8
 8008140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008142:	2308      	movs	r3, #8
 8008144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	0e5b      	lsrs	r3, r3, #25
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	0f5b      	lsrs	r3, r3, #29
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	7b3a      	ldrb	r2, [r7, #12]
 800816a:	4911      	ldr	r1, [pc, #68]	; (80081b0 <UARTEx_SetNbDataToProcess+0x94>)
 800816c:	5c8a      	ldrb	r2, [r1, r2]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008172:	7b3a      	ldrb	r2, [r7, #12]
 8008174:	490f      	ldr	r1, [pc, #60]	; (80081b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008178:	fb93 f3f2 	sdiv	r3, r3, r2
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	7b7a      	ldrb	r2, [r7, #13]
 8008188:	4909      	ldr	r1, [pc, #36]	; (80081b0 <UARTEx_SetNbDataToProcess+0x94>)
 800818a:	5c8a      	ldrb	r2, [r1, r2]
 800818c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008190:	7b7a      	ldrb	r2, [r7, #13]
 8008192:	4908      	ldr	r1, [pc, #32]	; (80081b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008196:	fb93 f3f2 	sdiv	r3, r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	08010d18 	.word	0x08010d18
 80081b4:	08010d20 	.word	0x08010d20

080081b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081c8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081ee:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	4013      	ands	r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800821c:	b084      	sub	sp, #16
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	f107 0014 	add.w	r0, r7, #20
 800822a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	b004      	add	sp, #16
 800825c:	4770      	bx	lr
	...

08008260 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008260:	b480      	push	{r7}
 8008262:	b09d      	sub	sp, #116	; 0x74
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d81f      	bhi.n	80082d2 <USB_ActivateEndpoint+0x72>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USB_ActivateEndpoint+0x38>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082db 	.word	0x080082db
 80082a4:	080082b7 	.word	0x080082b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80082a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082b4:	e012      	b.n	80082dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80082b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80082be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082c2:	e00b      	b.n	80082dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082d0:	e004      	b.n	80082dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80082d8:	e000      	b.n	80082dc <USB_ActivateEndpoint+0x7c>
      break;
 80082da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	b21b      	sxth	r3, r3
 800830e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008316:	b21a      	sxth	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	b21b      	sxth	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b21b      	sxth	r3, r3
 8008322:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	441a      	add	r2, r3
 8008330:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	b29b      	uxth	r3, r3
 8008346:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 816e 	bne.w	800862e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 8084 	beq.w	8008464 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008366:	b29b      	uxth	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	4413      	add	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	00da      	lsls	r2, r3, #3
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	88db      	ldrh	r3, [r3, #6]
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	b29b      	uxth	r3, r3
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	827b      	strh	r3, [r7, #18]
 800839e:	8a7b      	ldrh	r3, [r7, #18]
 80083a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01b      	beq.n	80083e0 <USB_ActivateEndpoint+0x180>
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083be:	823b      	strh	r3, [r7, #16]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	8a3b      	ldrh	r3, [r7, #16]
 80083cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	78db      	ldrb	r3, [r3, #3]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d020      	beq.n	800842a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fe:	81bb      	strh	r3, [r7, #12]
 8008400:	89bb      	ldrh	r3, [r7, #12]
 8008402:	f083 0320 	eor.w	r3, r3, #32
 8008406:	81bb      	strh	r3, [r7, #12]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	89bb      	ldrh	r3, [r7, #12]
 8008414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008424:	b29b      	uxth	r3, r3
 8008426:	8013      	strh	r3, [r2, #0]
 8008428:	e2cb      	b.n	80089c2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008440:	81fb      	strh	r3, [r7, #14]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	441a      	add	r2, r3
 800844c:	89fb      	ldrh	r3, [r7, #14]
 800844e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845e:	b29b      	uxth	r3, r3
 8008460:	8013      	strh	r3, [r2, #0]
 8008462:	e2ae      	b.n	80089c2 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	633b      	str	r3, [r7, #48]	; 0x30
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	4413      	add	r3, r2
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	00da      	lsls	r2, r3, #3
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	4413      	add	r3, r2
 8008482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	b29b      	uxth	r3, r3
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	4413      	add	r3, r2
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	00da      	lsls	r2, r3, #3
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	4413      	add	r3, r2
 80084b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b3e      	cmp	r3, #62	; 0x3e
 80084c2:	d918      	bls.n	80084f6 <USB_ActivateEndpoint+0x296>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <USB_ActivateEndpoint+0x27e>
 80084d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084da:	3b01      	subs	r3, #1
 80084dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e029      	b.n	800854a <USB_ActivateEndpoint+0x2ea>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d112      	bne.n	8008524 <USB_ActivateEndpoint+0x2c4>
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008508:	b29a      	uxth	r2, r3
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	e012      	b.n	800854a <USB_ActivateEndpoint+0x2ea>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	66bb      	str	r3, [r7, #104]	; 0x68
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <USB_ActivateEndpoint+0x2de>
 8008538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800853a:	3301      	adds	r3, #1
 800853c:	66bb      	str	r3, [r7, #104]	; 0x68
 800853e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008540:	b29b      	uxth	r3, r3
 8008542:	029b      	lsls	r3, r3, #10
 8008544:	b29a      	uxth	r2, r3
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	847b      	strh	r3, [r7, #34]	; 0x22
 8008558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800855a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01b      	beq.n	800859a <USB_ActivateEndpoint+0x33a>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	843b      	strh	r3, [r7, #32]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	8c3b      	ldrh	r3, [r7, #32]
 8008586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d124      	bne.n	80085ec <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	83bb      	strh	r3, [r7, #28]
 80085ba:	8bbb      	ldrh	r3, [r7, #28]
 80085bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085c0:	83bb      	strh	r3, [r7, #28]
 80085c2:	8bbb      	ldrh	r3, [r7, #28]
 80085c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085c8:	83bb      	strh	r3, [r7, #28]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	8bbb      	ldrh	r3, [r7, #28]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]
 80085ea:	e1ea      	b.n	80089c2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	83fb      	strh	r3, [r7, #30]
 8008604:	8bfb      	ldrh	r3, [r7, #30]
 8008606:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800860a:	83fb      	strh	r3, [r7, #30]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	441a      	add	r2, r3
 8008616:	8bfb      	ldrh	r3, [r7, #30]
 8008618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]
 800862c:	e1c9      	b.n	80089c2 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	78db      	ldrb	r3, [r3, #3]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d11e      	bne.n	8008674 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	441a      	add	r2, r3
 800865a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800865e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008666:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800866a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]
 8008672:	e01d      	b.n	80086b0 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	441a      	add	r2, r3
 8008698:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800869c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c0:	4413      	add	r3, r2
 80086c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	00da      	lsls	r2, r3, #3
 80086ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	891b      	ldrh	r3, [r3, #8]
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	657b      	str	r3, [r7, #84]	; 0x54
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f4:	4413      	add	r3, r2
 80086f6:	657b      	str	r3, [r7, #84]	; 0x54
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	00da      	lsls	r2, r3, #3
 80086fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008700:	4413      	add	r3, r2
 8008702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008706:	653b      	str	r3, [r7, #80]	; 0x50
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	895b      	ldrh	r3, [r3, #10]
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	b29b      	uxth	r3, r3
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008716:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8093 	bne.w	8008848 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008732:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01b      	beq.n	8008776 <USB_ActivateEndpoint+0x516>
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008754:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	441a      	add	r2, r3
 8008760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800876e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008772:	b29b      	uxth	r3, r3
 8008774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01b      	beq.n	80087c6 <USB_ActivateEndpoint+0x566>
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	441a      	add	r2, r3
 80087b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80087de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80087e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	441a      	add	r2, r3
 80087f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008842:	b29b      	uxth	r3, r3
 8008844:	8013      	strh	r3, [r2, #0]
 8008846:	e0bc      	b.n	80089c2 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800885c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01d      	beq.n	80088a0 <USB_ActivateEndpoint+0x640>
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	b29b      	uxth	r3, r3
 8008872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	441a      	add	r2, r3
 8008888:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80088b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01d      	beq.n	80088f8 <USB_ActivateEndpoint+0x698>
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	441a      	add	r2, r3
 80088e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80088e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	78db      	ldrb	r3, [r3, #3]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d024      	beq.n	800894a <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008916:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800891a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800891e:	f083 0320 	eor.w	r3, r3, #32
 8008922:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	441a      	add	r2, r3
 8008930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]
 8008948:	e01d      	b.n	8008986 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008960:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	441a      	add	r2, r3
 800896e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800897e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008982:	b29b      	uxth	r3, r3
 8008984:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	441a      	add	r2, r3
 80089aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80089c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3774      	adds	r7, #116	; 0x74
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b08d      	sub	sp, #52	; 0x34
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	7b1b      	ldrb	r3, [r3, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 808e 	bne.w	8008b04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d044      	beq.n	8008a7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	81bb      	strh	r3, [r7, #12]
 80089fe:	89bb      	ldrh	r3, [r7, #12]
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01b      	beq.n	8008a40 <USB_DeactivateEndpoint+0x6c>
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	817b      	strh	r3, [r7, #10]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	441a      	add	r2, r3
 8008a2a:	897b      	ldrh	r3, [r7, #10]
 8008a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a56:	813b      	strh	r3, [r7, #8]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	441a      	add	r2, r3
 8008a62:	893b      	ldrh	r3, [r7, #8]
 8008a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	8013      	strh	r3, [r2, #0]
 8008a78:	e192      	b.n	8008da0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	827b      	strh	r3, [r7, #18]
 8008a88:	8a7b      	ldrh	r3, [r7, #18]
 8008a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01b      	beq.n	8008aca <USB_DeactivateEndpoint+0xf6>
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa8:	823b      	strh	r3, [r7, #16]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	8a3b      	ldrh	r3, [r7, #16]
 8008ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	81fb      	strh	r3, [r7, #14]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	89fb      	ldrh	r3, [r7, #14]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]
 8008b02:	e14d      	b.n	8008da0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f040 80a5 	bne.w	8008c58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	843b      	strh	r3, [r7, #32]
 8008b1c:	8c3b      	ldrh	r3, [r7, #32]
 8008b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01b      	beq.n	8008b5e <USB_DeactivateEndpoint+0x18a>
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3c:	83fb      	strh	r3, [r7, #30]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	441a      	add	r2, r3
 8008b48:	8bfb      	ldrh	r3, [r7, #30]
 8008b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	83bb      	strh	r3, [r7, #28]
 8008b6c:	8bbb      	ldrh	r3, [r7, #28]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01b      	beq.n	8008bae <USB_DeactivateEndpoint+0x1da>
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8c:	837b      	strh	r3, [r7, #26]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	441a      	add	r2, r3
 8008b98:	8b7b      	ldrh	r3, [r7, #26]
 8008b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	833b      	strh	r3, [r7, #24]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	8b3b      	ldrh	r3, [r7, #24]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfc:	82fb      	strh	r3, [r7, #22]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	441a      	add	r2, r3
 8008c08:	8afb      	ldrh	r3, [r7, #22]
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c34:	82bb      	strh	r3, [r7, #20]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	8abb      	ldrh	r3, [r7, #20]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]
 8008c56:	e0a3      	b.n	8008da0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01b      	beq.n	8008ca8 <USB_DeactivateEndpoint+0x2d4>
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	441a      	add	r2, r3
 8008c92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008cb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01b      	beq.n	8008cf8 <USB_DeactivateEndpoint+0x324>
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	441a      	add	r2, r3
 8008ce2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	441a      	add	r2, r3
 8008d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	441a      	add	r2, r3
 8008d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3734      	adds	r7, #52	; 0x34
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b0c2      	sub	sp, #264	; 0x108
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dbc:	6018      	str	r0, [r3, #0]
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	f040 867b 	bne.w	8009ad0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d908      	bls.n	8008e08 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e06:	e007      	b.n	8008e18 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	7b1b      	ldrb	r3, [r3, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d13a      	bne.n	8008e9e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6959      	ldr	r1, [r3, #20]
 8008e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	88da      	ldrh	r2, [r3, #6]
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	f001 fc1d 	bl	800a68e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	613b      	str	r3, [r7, #16]
 8008e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	4413      	add	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
 8008e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	00da      	lsls	r2, r3, #3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	801a      	strh	r2, [r3, #0]
 8008e9a:	f000 bde3 	b.w	8009a64 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	78db      	ldrb	r3, [r3, #3]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	f040 843a 	bne.w	8009724 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6a1a      	ldr	r2, [r3, #32]
 8008ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	f240 83b7 	bls.w	800963c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	441a      	add	r2, r3
 8008f12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 81b3 	beq.w	80092d6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d16d      	bne.n	8009068 <USB_EPStartXfer+0x2ba>
 8008f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	4413      	add	r3, r2
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	00da      	lsls	r2, r3, #3
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8008fce:	d91c      	bls.n	800900a <USB_EPStartXfer+0x25c>
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <USB_EPStartXfer+0x242>
 8008fe6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008fea:	3b01      	subs	r3, #1
 8008fec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ff0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	029b      	lsls	r3, r3, #10
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009002:	b29a      	uxth	r2, r3
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e053      	b.n	80090b2 <USB_EPStartXfer+0x304>
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900e:	2b00      	cmp	r3, #0
 8009010:	d112      	bne.n	8009038 <USB_EPStartXfer+0x28a>
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800901c:	b29a      	uxth	r2, r3
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009030:	b29a      	uxth	r2, r3
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e03c      	b.n	80090b2 <USB_EPStartXfer+0x304>
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903c:	085b      	lsrs	r3, r3, #1
 800903e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <USB_EPStartXfer+0x2aa>
 800904e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009052:	3301      	adds	r3, #1
 8009054:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009058:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800905c:	b29b      	uxth	r3, r3
 800905e:	029b      	lsls	r3, r3, #10
 8009060:	b29a      	uxth	r2, r3
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	e024      	b.n	80090b2 <USB_EPStartXfer+0x304>
 8009068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d11c      	bne.n	80090b2 <USB_EPStartXfer+0x304>
 8009078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009086:	b29b      	uxth	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	4413      	add	r3, r2
 800908e:	633b      	str	r3, [r7, #48]	; 0x30
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	00da      	lsls	r2, r3, #3
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	4413      	add	r3, r2
 80090a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	895b      	ldrh	r3, [r3, #10]
 80090be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6959      	ldr	r1, [r3, #20]
 80090ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090e0:	6800      	ldr	r0, [r0, #0]
 80090e2:	f001 fad4 	bl	800a68e <USB_WritePMA>
            ep->xfer_buff += len;
 80090e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f6:	441a      	add	r2, r3
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6a1a      	ldr	r2, [r3, #32]
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	429a      	cmp	r2, r3
 800911e:	d90f      	bls.n	8009140 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	621a      	str	r2, [r3, #32]
 800913e:	e00e      	b.n	800915e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800915e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d16d      	bne.n	800924a <USB_EPStartXfer+0x49c>
 800916e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009188:	b29b      	uxth	r3, r3
 800918a:	461a      	mov	r2, r3
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	4413      	add	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
 8009192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	00da      	lsls	r2, r3, #3
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	4413      	add	r3, r2
 80091a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ae:	2b3e      	cmp	r3, #62	; 0x3e
 80091b0:	d91c      	bls.n	80091ec <USB_EPStartXfer+0x43e>
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c0:	f003 031f 	and.w	r3, r3, #31
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <USB_EPStartXfer+0x424>
 80091c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091cc:	3b01      	subs	r3, #1
 80091ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	029b      	lsls	r3, r3, #10
 80091da:	b29b      	uxth	r3, r3
 80091dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	801a      	strh	r2, [r3, #0]
 80091ea:	e059      	b.n	80092a0 <USB_EPStartXfer+0x4f2>
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d112      	bne.n	800921a <USB_EPStartXfer+0x46c>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091fe:	b29a      	uxth	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009212:	b29a      	uxth	r2, r3
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	801a      	strh	r2, [r3, #0]
 8009218:	e042      	b.n	80092a0 <USB_EPStartXfer+0x4f2>
 800921a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <USB_EPStartXfer+0x48c>
 8009230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009234:	3301      	adds	r3, #1
 8009236:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800923a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800923e:	b29b      	uxth	r3, r3
 8009240:	029b      	lsls	r3, r3, #10
 8009242:	b29a      	uxth	r2, r3
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e02a      	b.n	80092a0 <USB_EPStartXfer+0x4f2>
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d122      	bne.n	80092a0 <USB_EPStartXfer+0x4f2>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	623b      	str	r3, [r7, #32]
 8009266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009274:	b29b      	uxth	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	4413      	add	r3, r2
 800927c:	623b      	str	r3, [r7, #32]
 800927e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	00da      	lsls	r2, r3, #3
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	4413      	add	r3, r2
 8009290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	b29a      	uxth	r2, r3
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	891b      	ldrh	r3, [r3, #8]
 80092ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6959      	ldr	r1, [r3, #20]
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80092ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80092ce:	6800      	ldr	r0, [r0, #0]
 80092d0:	f001 f9dd 	bl	800a68e <USB_WritePMA>
 80092d4:	e3c6      	b.n	8009a64 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d16d      	bne.n	80093c2 <USB_EPStartXfer+0x614>
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009300:	b29b      	uxth	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009306:	4413      	add	r3, r2
 8009308:	64bb      	str	r3, [r7, #72]	; 0x48
 800930a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	00da      	lsls	r2, r3, #3
 8009318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800931a:	4413      	add	r3, r2
 800931c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009320:	647b      	str	r3, [r7, #68]	; 0x44
 8009322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009326:	2b3e      	cmp	r3, #62	; 0x3e
 8009328:	d91c      	bls.n	8009364 <USB_EPStartXfer+0x5b6>
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932e:	095b      	lsrs	r3, r3, #5
 8009330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <USB_EPStartXfer+0x59c>
 8009340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009344:	3b01      	subs	r3, #1
 8009346:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800934a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800934e:	b29b      	uxth	r3, r3
 8009350:	029b      	lsls	r3, r3, #10
 8009352:	b29b      	uxth	r3, r3
 8009354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800935c:	b29a      	uxth	r2, r3
 800935e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009360:	801a      	strh	r2, [r3, #0]
 8009362:	e059      	b.n	8009418 <USB_EPStartXfer+0x66a>
 8009364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009368:	2b00      	cmp	r3, #0
 800936a:	d112      	bne.n	8009392 <USB_EPStartXfer+0x5e4>
 800936c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009376:	b29a      	uxth	r2, r3
 8009378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938a:	b29a      	uxth	r2, r3
 800938c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800938e:	801a      	strh	r2, [r3, #0]
 8009390:	e042      	b.n	8009418 <USB_EPStartXfer+0x66a>
 8009392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009396:	085b      	lsrs	r3, r3, #1
 8009398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800939c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <USB_EPStartXfer+0x604>
 80093a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093ac:	3301      	adds	r3, #1
 80093ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	029b      	lsls	r3, r3, #10
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	e02a      	b.n	8009418 <USB_EPStartXfer+0x66a>
 80093c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d122      	bne.n	8009418 <USB_EPStartXfer+0x66a>
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	653b      	str	r3, [r7, #80]	; 0x50
 80093de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f2:	4413      	add	r3, r2
 80093f4:	653b      	str	r3, [r7, #80]	; 0x50
 80093f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	00da      	lsls	r2, r3, #3
 8009404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009406:	4413      	add	r3, r2
 8009408:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800940c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009412:	b29a      	uxth	r2, r3
 8009414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009416:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	891b      	ldrh	r3, [r3, #8]
 8009424:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6959      	ldr	r1, [r3, #20]
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009438:	b29b      	uxth	r3, r3
 800943a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800943e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009442:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009446:	6800      	ldr	r0, [r0, #0]
 8009448:	f001 f921 	bl	800a68e <USB_WritePMA>
            ep->xfer_buff += len;
 800944c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695a      	ldr	r2, [r3, #20]
 8009458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800945c:	441a      	add	r2, r3
 800945e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800946a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6a1a      	ldr	r2, [r3, #32]
 8009476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	429a      	cmp	r2, r3
 8009484:	d90f      	bls.n	80094a6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009496:	1ad2      	subs	r2, r2, r3
 8009498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	621a      	str	r2, [r3, #32]
 80094a4:	e00e      	b.n	80094c4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80094a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80094b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	643b      	str	r3, [r7, #64]	; 0x40
 80094d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d16d      	bne.n	80095bc <USB_EPStartXfer+0x80e>
 80094e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80094ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	4413      	add	r3, r2
 8009502:	63bb      	str	r3, [r7, #56]	; 0x38
 8009504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	00da      	lsls	r2, r3, #3
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	4413      	add	r3, r2
 8009516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800951a:	637b      	str	r3, [r7, #52]	; 0x34
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	2b3e      	cmp	r3, #62	; 0x3e
 8009522:	d91c      	bls.n	800955e <USB_EPStartXfer+0x7b0>
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800952e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009532:	f003 031f 	and.w	r3, r3, #31
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <USB_EPStartXfer+0x796>
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953e:	3b01      	subs	r3, #1
 8009540:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	b29b      	uxth	r3, r3
 800954a:	029b      	lsls	r3, r3, #10
 800954c:	b29b      	uxth	r3, r3
 800954e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009556:	b29a      	uxth	r2, r3
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	e053      	b.n	8009606 <USB_EPStartXfer+0x858>
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	2b00      	cmp	r3, #0
 8009564:	d112      	bne.n	800958c <USB_EPStartXfer+0x7de>
 8009566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	b29b      	uxth	r3, r3
 800956c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009570:	b29a      	uxth	r2, r3
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009584:	b29a      	uxth	r2, r3
 8009586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	e03c      	b.n	8009606 <USB_EPStartXfer+0x858>
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <USB_EPStartXfer+0x7fe>
 80095a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a6:	3301      	adds	r3, #1
 80095a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	029b      	lsls	r3, r3, #10
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b8:	801a      	strh	r2, [r3, #0]
 80095ba:	e024      	b.n	8009606 <USB_EPStartXfer+0x858>
 80095bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d11c      	bne.n	8009606 <USB_EPStartXfer+0x858>
 80095cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095da:	b29b      	uxth	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e0:	4413      	add	r3, r2
 80095e2:	643b      	str	r3, [r7, #64]	; 0x40
 80095e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	00da      	lsls	r2, r3, #3
 80095f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f4:	4413      	add	r3, r2
 80095f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009600:	b29a      	uxth	r2, r3
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	895b      	ldrh	r3, [r3, #10]
 8009612:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6959      	ldr	r1, [r3, #20]
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009626:	b29b      	uxth	r3, r3
 8009628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800962c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009630:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009634:	6800      	ldr	r0, [r0, #0]
 8009636:	f001 f82a 	bl	800a68e <USB_WritePMA>
 800963a:	e213      	b.n	8009a64 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	441a      	add	r2, r3
 8009690:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800969c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c8:	4413      	add	r3, r2
 80096ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	00da      	lsls	r2, r3, #3
 80096da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096dc:	4413      	add	r3, r2
 80096de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	891b      	ldrh	r3, [r3, #8]
 80096fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6959      	ldr	r1, [r3, #20]
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970e:	b29b      	uxth	r3, r3
 8009710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009714:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009718:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800971c:	6800      	ldr	r0, [r0, #0]
 800971e:	f000 ffb6 	bl	800a68e <USB_WritePMA>
 8009722:	e19f      	b.n	8009a64 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 80bc 	beq.w	80098e2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800976a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	673b      	str	r3, [r7, #112]	; 0x70
 8009776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	785b      	ldrb	r3, [r3, #1]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d16d      	bne.n	8009862 <USB_EPStartXfer+0xab4>
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	66bb      	str	r3, [r7, #104]	; 0x68
 8009792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	461a      	mov	r2, r3
 80097a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097a6:	4413      	add	r3, r2
 80097a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80097aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	00da      	lsls	r2, r3, #3
 80097b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ba:	4413      	add	r3, r2
 80097bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097c0:	667b      	str	r3, [r7, #100]	; 0x64
 80097c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c6:	2b3e      	cmp	r3, #62	; 0x3e
 80097c8:	d91c      	bls.n	8009804 <USB_EPStartXfer+0xa56>
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ce:	095b      	lsrs	r3, r3, #5
 80097d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <USB_EPStartXfer+0xa3c>
 80097e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097e4:	3b01      	subs	r3, #1
 80097e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e053      	b.n	80098ac <USB_EPStartXfer+0xafe>
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009808:	2b00      	cmp	r3, #0
 800980a:	d112      	bne.n	8009832 <USB_EPStartXfer+0xa84>
 800980c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009816:	b29a      	uxth	r2, r3
 8009818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b29b      	uxth	r3, r3
 8009822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982a:	b29a      	uxth	r2, r3
 800982c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	e03c      	b.n	80098ac <USB_EPStartXfer+0xafe>
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <USB_EPStartXfer+0xaa4>
 8009848:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800984c:	3301      	adds	r3, #1
 800984e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009852:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009856:	b29b      	uxth	r3, r3
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	b29a      	uxth	r2, r3
 800985c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800985e:	801a      	strh	r2, [r3, #0]
 8009860:	e024      	b.n	80098ac <USB_EPStartXfer+0xafe>
 8009862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d11c      	bne.n	80098ac <USB_EPStartXfer+0xafe>
 8009872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009880:	b29b      	uxth	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009886:	4413      	add	r3, r2
 8009888:	673b      	str	r3, [r7, #112]	; 0x70
 800988a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	00da      	lsls	r2, r3, #3
 8009898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800989a:	4413      	add	r3, r2
 800989c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80098ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	895b      	ldrh	r3, [r3, #10]
 80098b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6959      	ldr	r1, [r3, #20]
 80098c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80098d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80098da:	6800      	ldr	r0, [r0, #0]
 80098dc:	f000 fed7 	bl	800a68e <USB_WritePMA>
 80098e0:	e0c0      	b.n	8009a64 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d16d      	bne.n	80099ce <USB_EPStartXfer+0xc20>
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990c:	b29b      	uxth	r3, r3
 800990e:	461a      	mov	r2, r3
 8009910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009912:	4413      	add	r3, r2
 8009914:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	00da      	lsls	r2, r3, #3
 8009924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009926:	4413      	add	r3, r2
 8009928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800992c:	67bb      	str	r3, [r7, #120]	; 0x78
 800992e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009932:	2b3e      	cmp	r3, #62	; 0x3e
 8009934:	d91c      	bls.n	8009970 <USB_EPStartXfer+0xbc2>
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009944:	f003 031f 	and.w	r3, r3, #31
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <USB_EPStartXfer+0xba8>
 800994c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009950:	3b01      	subs	r3, #1
 8009952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800995a:	b29b      	uxth	r3, r3
 800995c:	029b      	lsls	r3, r3, #10
 800995e:	b29b      	uxth	r3, r3
 8009960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009968:	b29a      	uxth	r2, r3
 800996a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800996c:	801a      	strh	r2, [r3, #0]
 800996e:	e05f      	b.n	8009a30 <USB_EPStartXfer+0xc82>
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009974:	2b00      	cmp	r3, #0
 8009976:	d112      	bne.n	800999e <USB_EPStartXfer+0xbf0>
 8009978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009982:	b29a      	uxth	r2, r3
 8009984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009996:	b29a      	uxth	r2, r3
 8009998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800999a:	801a      	strh	r2, [r3, #0]
 800999c:	e048      	b.n	8009a30 <USB_EPStartXfer+0xc82>
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a2:	085b      	lsrs	r3, r3, #1
 80099a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <USB_EPStartXfer+0xc10>
 80099b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099b8:	3301      	adds	r3, #1
 80099ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	029b      	lsls	r3, r3, #10
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	e030      	b.n	8009a30 <USB_EPStartXfer+0xc82>
 80099ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d128      	bne.n	8009a30 <USB_EPStartXfer+0xc82>
 80099de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a02:	4413      	add	r3, r2
 8009a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	00da      	lsls	r2, r3, #3
 8009a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	891b      	ldrh	r3, [r3, #8]
 8009a3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6959      	ldr	r1, [r3, #20]
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a5e:	6800      	ldr	r0, [r0, #0]
 8009a60:	f000 fe15 	bl	800a68e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8a:	817b      	strh	r3, [r7, #10]
 8009a8c:	897b      	ldrh	r3, [r7, #10]
 8009a8e:	f083 0310 	eor.w	r3, r3, #16
 8009a92:	817b      	strh	r3, [r7, #10]
 8009a94:	897b      	ldrh	r3, [r7, #10]
 8009a96:	f083 0320 	eor.w	r3, r3, #32
 8009a9a:	817b      	strh	r3, [r7, #10]
 8009a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	441a      	add	r2, r3
 8009ab6:	897b      	ldrh	r3, [r7, #10]
 8009ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	8013      	strh	r3, [r2, #0]
 8009acc:	f000 bc9f 	b.w	800a40e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	7b1b      	ldrb	r3, [r3, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 80ae 	bne.w	8009c3e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699a      	ldr	r2, [r3, #24]
 8009aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d917      	bls.n	8009b2e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	619a      	str	r2, [r3, #24]
 8009b2c:	e00e      	b.n	8009b4c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b70:	4413      	add	r3, r2
 8009b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	00da      	lsls	r2, r3, #3
 8009b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b88:	4413      	add	r3, r2
 8009b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b96:	2b3e      	cmp	r3, #62	; 0x3e
 8009b98:	d91d      	bls.n	8009bd6 <USB_EPStartXfer+0xe28>
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <USB_EPStartXfer+0xe0c>
 8009bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	029b      	lsls	r3, r3, #10
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e3e1      	b.n	800a39a <USB_EPStartXfer+0x15ec>
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d116      	bne.n	8009c0c <USB_EPStartXfer+0xe5e>
 8009bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	e3c6      	b.n	800a39a <USB_EPStartXfer+0x15ec>
 8009c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c10:	085b      	lsrs	r3, r3, #1
 8009c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <USB_EPStartXfer+0xe7e>
 8009c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c26:	3301      	adds	r3, #1
 8009c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	029b      	lsls	r3, r3, #10
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	e3ad      	b.n	800a39a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	78db      	ldrb	r3, [r3, #3]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	f040 8200 	bne.w	800a050 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	785b      	ldrb	r3, [r3, #1]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 8091 	bne.w	8009d84 <USB_EPStartXfer+0xfd6>
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c86:	4413      	add	r3, r2
 8009c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	00da      	lsls	r2, r3, #3
 8009c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8009cb6:	d925      	bls.n	8009d04 <USB_EPStartXfer+0xf56>
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f003 031f 	and.w	r3, r3, #31
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <USB_EPStartXfer+0xf3a>
 8009cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	029b      	lsls	r3, r3, #10
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	e074      	b.n	8009dee <USB_EPStartXfer+0x1040>
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d116      	bne.n	8009d42 <USB_EPStartXfer+0xf94>
 8009d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d3e:	801a      	strh	r2, [r3, #0]
 8009d40:	e055      	b.n	8009dee <USB_EPStartXfer+0x1040>
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <USB_EPStartXfer+0xfc4>
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	029b      	lsls	r3, r3, #10
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	e034      	b.n	8009dee <USB_EPStartXfer+0x1040>
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d12c      	bne.n	8009dee <USB_EPStartXfer+0x1040>
 8009d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009db8:	4413      	add	r3, r2
 8009dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	00da      	lsls	r2, r3, #3
 8009dcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 8091 	bne.w	8009f30 <USB_EPStartXfer+0x1182>
 8009e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e32:	4413      	add	r3, r2
 8009e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	00da      	lsls	r2, r3, #3
 8009e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b3e      	cmp	r3, #62	; 0x3e
 8009e62:	d925      	bls.n	8009eb0 <USB_EPStartXfer+0x1102>
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 031f 	and.w	r3, r3, #31
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d104      	bne.n	8009e94 <USB_EPStartXfer+0x10e6>
 8009e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	029b      	lsls	r3, r3, #10
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	e06d      	b.n	8009f8c <USB_EPStartXfer+0x11de>
 8009eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d116      	bne.n	8009eee <USB_EPStartXfer+0x1140>
 8009ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	e04e      	b.n	8009f8c <USB_EPStartXfer+0x11de>
 8009eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	085b      	lsrs	r3, r3, #1
 8009efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <USB_EPStartXfer+0x1170>
 8009f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	029b      	lsls	r3, r3, #10
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	e02d      	b.n	8009f8c <USB_EPStartXfer+0x11de>
 8009f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d125      	bne.n	8009f8c <USB_EPStartXfer+0x11de>
 8009f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f56:	4413      	add	r3, r2
 8009f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	00da      	lsls	r2, r3, #3
 8009f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f6e:	4413      	add	r3, r2
 8009f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 81fe 	beq.w	800a39a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d005      	beq.n	8009fd6 <USB_EPStartXfer+0x1228>
 8009fca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10d      	bne.n	8009ff2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f040 81db 	bne.w	800a39a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fe4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f040 81d4 	bne.w	800a39a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a018:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	441a      	add	r2, r3
 800a036:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	8013      	strh	r3, [r2, #0]
 800a04e:	e1a4      	b.n	800a39a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	78db      	ldrb	r3, [r3, #3]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	f040 819a 	bne.w	800a396 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d917      	bls.n	800a0ae <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	619a      	str	r2, [r3, #24]
 800a0ac:	e00e      	b.n	800a0cc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d178      	bne.n	800a1ce <USB_EPStartXfer+0x1420>
 800a0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a100:	4413      	add	r3, r2
 800a102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	00da      	lsls	r2, r3, #3
 800a114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a118:	4413      	add	r3, r2
 800a11a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a11e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a126:	2b3e      	cmp	r3, #62	; 0x3e
 800a128:	d91d      	bls.n	800a166 <USB_EPStartXfer+0x13b8>
 800a12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12e:	095b      	lsrs	r3, r3, #5
 800a130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a138:	f003 031f 	and.w	r3, r3, #31
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d104      	bne.n	800a14a <USB_EPStartXfer+0x139c>
 800a140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a144:	3b01      	subs	r3, #1
 800a146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a14e:	b29b      	uxth	r3, r3
 800a150:	029b      	lsls	r3, r3, #10
 800a152:	b29b      	uxth	r3, r3
 800a154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a162:	801a      	strh	r2, [r3, #0]
 800a164:	e064      	b.n	800a230 <USB_EPStartXfer+0x1482>
 800a166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d116      	bne.n	800a19c <USB_EPStartXfer+0x13ee>
 800a16e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a192:	b29a      	uxth	r2, r3
 800a194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a198:	801a      	strh	r2, [r3, #0]
 800a19a:	e049      	b.n	800a230 <USB_EPStartXfer+0x1482>
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <USB_EPStartXfer+0x140e>
 800a1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	029b      	lsls	r3, r3, #10
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	e030      	b.n	800a230 <USB_EPStartXfer+0x1482>
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d128      	bne.n	800a230 <USB_EPStartXfer+0x1482>
 800a1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a202:	4413      	add	r3, r2
 800a204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	00da      	lsls	r2, r3, #3
 800a216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a21a:	4413      	add	r3, r2
 800a21c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a228:	b29a      	uxth	r2, r3
 800a22a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a22e:	801a      	strh	r2, [r3, #0]
 800a230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d178      	bne.n	800a340 <USB_EPStartXfer+0x1592>
 800a24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a272:	4413      	add	r3, r2
 800a274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	00da      	lsls	r2, r3, #3
 800a286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a28a:	4413      	add	r3, r2
 800a28c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a298:	2b3e      	cmp	r3, #62	; 0x3e
 800a29a:	d91d      	bls.n	800a2d8 <USB_EPStartXfer+0x152a>
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <USB_EPStartXfer+0x150e>
 800a2b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	029b      	lsls	r3, r3, #10
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2d4:	801a      	strh	r2, [r3, #0]
 800a2d6:	e060      	b.n	800a39a <USB_EPStartXfer+0x15ec>
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d116      	bne.n	800a30e <USB_EPStartXfer+0x1560>
 800a2e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2f2:	801a      	strh	r2, [r3, #0]
 800a2f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a304:	b29a      	uxth	r2, r3
 800a306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	e045      	b.n	800a39a <USB_EPStartXfer+0x15ec>
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <USB_EPStartXfer+0x1580>
 800a324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a328:	3301      	adds	r3, #1
 800a32a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a32e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a332:	b29b      	uxth	r3, r3
 800a334:	029b      	lsls	r3, r3, #10
 800a336:	b29a      	uxth	r2, r3
 800a338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	e02c      	b.n	800a39a <USB_EPStartXfer+0x15ec>
 800a340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	785b      	ldrb	r3, [r3, #1]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d124      	bne.n	800a39a <USB_EPStartXfer+0x15ec>
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35e:	b29b      	uxth	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a366:	4413      	add	r3, r2
 800a368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	00da      	lsls	r2, r3, #3
 800a37a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a37e:	4413      	add	r3, r2
 800a380:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a392:	801a      	strh	r2, [r3, #0]
 800a394:	e001      	b.n	800a39a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e03a      	b.n	800a410 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a3c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a3c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a3d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a3d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	441a      	add	r2, r3
 800a3f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a3fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	785b      	ldrb	r3, [r3, #1]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d020      	beq.n	800a46e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a442:	81bb      	strh	r3, [r7, #12]
 800a444:	89bb      	ldrh	r3, [r7, #12]
 800a446:	f083 0310 	eor.w	r3, r3, #16
 800a44a:	81bb      	strh	r3, [r7, #12]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	441a      	add	r2, r3
 800a456:	89bb      	ldrh	r3, [r7, #12]
 800a458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a468:	b29b      	uxth	r3, r3
 800a46a:	8013      	strh	r3, [r2, #0]
 800a46c:	e01f      	b.n	800a4ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a484:	81fb      	strh	r3, [r7, #14]
 800a486:	89fb      	ldrh	r3, [r7, #14]
 800a488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a48c:	81fb      	strh	r3, [r7, #14]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	441a      	add	r2, r3
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a49e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	7b1b      	ldrb	r3, [r3, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 809d 	bne.w	800a60a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d04c      	beq.n	800a572 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	823b      	strh	r3, [r7, #16]
 800a4e6:	8a3b      	ldrh	r3, [r7, #16]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01b      	beq.n	800a528 <USB_EPClearStall+0x6c>
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a506:	81fb      	strh	r3, [r7, #14]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	441a      	add	r2, r3
 800a512:	89fb      	ldrh	r3, [r7, #14]
 800a514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a51c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a524:	b29b      	uxth	r3, r3
 800a526:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	78db      	ldrb	r3, [r3, #3]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d06c      	beq.n	800a60a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a546:	81bb      	strh	r3, [r7, #12]
 800a548:	89bb      	ldrh	r3, [r7, #12]
 800a54a:	f083 0320 	eor.w	r3, r3, #32
 800a54e:	81bb      	strh	r3, [r7, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	441a      	add	r2, r3
 800a55a:	89bb      	ldrh	r3, [r7, #12]
 800a55c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	8013      	strh	r3, [r2, #0]
 800a570:	e04b      	b.n	800a60a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	82fb      	strh	r3, [r7, #22]
 800a580:	8afb      	ldrh	r3, [r7, #22]
 800a582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01b      	beq.n	800a5c2 <USB_EPClearStall+0x106>
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a0:	82bb      	strh	r3, [r7, #20]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	441a      	add	r2, r3
 800a5ac:	8abb      	ldrh	r3, [r7, #20]
 800a5ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d8:	827b      	strh	r3, [r7, #18]
 800a5da:	8a7b      	ldrh	r3, [r7, #18]
 800a5dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5e0:	827b      	strh	r3, [r7, #18]
 800a5e2:	8a7b      	ldrh	r3, [r7, #18]
 800a5e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5e8:	827b      	strh	r3, [r7, #18]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	441a      	add	r2, r3
 800a5f4:	8a7b      	ldrh	r3, [r7, #18]
 800a5f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a606:	b29b      	uxth	r3, r3
 800a608:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	371c      	adds	r7, #28
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2280      	movs	r2, #128	; 0x80
 800a62e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b085      	sub	sp, #20
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a680:	68fb      	ldr	r3, [r7, #12]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a68e:	b480      	push	{r7}
 800a690:	b08b      	sub	sp, #44	; 0x2c
 800a692:	af00      	add	r7, sp, #0
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	4611      	mov	r1, r2
 800a69a:	461a      	mov	r2, r3
 800a69c:	460b      	mov	r3, r1
 800a69e:	80fb      	strh	r3, [r7, #6]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a6a4:	88bb      	ldrh	r3, [r7, #4]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	085b      	lsrs	r3, r3, #1
 800a6aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c4:	e01b      	b.n	800a6fe <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b21a      	sxth	r2, r3
 800a6d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b21b      	sxth	r3, r3
 800a6de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	8a7a      	ldrh	r2, [r7, #18]
 800a6e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	3302      	adds	r3, #2
 800a6ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e0      	bne.n	800a6c6 <USB_WritePMA+0x38>
  }
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	372c      	adds	r7, #44	; 0x2c
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a712:	b480      	push	{r7}
 800a714:	b08b      	sub	sp, #44	; 0x2c
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	4611      	mov	r1, r2
 800a71e:	461a      	mov	r2, r3
 800a720:	460b      	mov	r3, r1
 800a722:	80fb      	strh	r3, [r7, #6]
 800a724:	4613      	mov	r3, r2
 800a726:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a728:	88bb      	ldrh	r3, [r7, #4]
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a742:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
 800a748:	e018      	b.n	800a77c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	3302      	adds	r3, #2
 800a756:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	3301      	adds	r3, #1
 800a764:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	0a1b      	lsrs	r3, r3, #8
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	3301      	adds	r3, #1
 800a774:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	3b01      	subs	r3, #1
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e3      	bne.n	800a74a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a782:	88bb      	ldrh	r3, [r7, #4]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	b29b      	uxth	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	701a      	strb	r2, [r3, #0]
  }
}
 800a79e:	bf00      	nop
 800a7a0:	372c      	adds	r7, #44	; 0x2c
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a7ba:	f004 fdc9 	bl	800f350 <USBD_static_malloc>
 800a7be:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e066      	b.n	800a8a0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7c1b      	ldrb	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d119      	bne.n	800a816 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	2181      	movs	r1, #129	; 0x81
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f004 fc55 	bl	800f09a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f004 fc4b 	bl	800f09a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2210      	movs	r2, #16
 800a810:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a814:	e016      	b.n	800a844 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	2202      	movs	r2, #2
 800a81a:	2181      	movs	r1, #129	; 0x81
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f004 fc3c 	bl	800f09a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a828:	2340      	movs	r3, #64	; 0x40
 800a82a:	2202      	movs	r2, #2
 800a82c:	2101      	movs	r1, #1
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f004 fc33 	bl	800f09a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2210      	movs	r2, #16
 800a840:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a844:	2308      	movs	r3, #8
 800a846:	2203      	movs	r2, #3
 800a848:	2182      	movs	r1, #130	; 0x82
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f004 fc25 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	7c1b      	ldrb	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a884:	2101      	movs	r1, #1
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f004 fcf7 	bl	800f27a <USBD_LL_PrepareReceive>
 800a88c:	e007      	b.n	800a89e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a894:	2340      	movs	r3, #64	; 0x40
 800a896:	2101      	movs	r1, #1
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f004 fcee 	bl	800f27a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8b4:	2181      	movs	r1, #129	; 0x81
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f004 fc15 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f004 fc0e 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8d2:	2182      	movs	r1, #130	; 0x82
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f004 fc06 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a904:	4618      	mov	r0, r3
 800a906:	f004 fd31 	bl	800f36c <USBD_static_free>
    pdev->pClassData = NULL;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a92c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a932:	2300      	movs	r3, #0
 800a934:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a940:	2303      	movs	r3, #3
 800a942:	e0af      	b.n	800aaa4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d03f      	beq.n	800a9d0 <USBD_CDC_Setup+0xb4>
 800a950:	2b20      	cmp	r3, #32
 800a952:	f040 809f 	bne.w	800aa94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d02e      	beq.n	800a9bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b25b      	sxtb	r3, r3
 800a964:	2b00      	cmp	r3, #0
 800a966:	da16      	bge.n	800a996 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a974:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	88d2      	ldrh	r2, [r2, #6]
 800a97a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	2b07      	cmp	r3, #7
 800a982:	bf28      	it	cs
 800a984:	2307      	movcs	r3, #7
 800a986:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	89fa      	ldrh	r2, [r7, #14]
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 facf 	bl	800bf32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a994:	e085      	b.n	800aaa2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	785a      	ldrb	r2, [r3, #1]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	88db      	ldrh	r3, [r3, #6]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a9ac:	6939      	ldr	r1, [r7, #16]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	88db      	ldrh	r3, [r3, #6]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fae8 	bl	800bf8a <USBD_CtlPrepareRx>
      break;
 800a9ba:	e072      	b.n	800aaa2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	7850      	ldrb	r0, [r2, #1]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	4798      	blx	r3
      break;
 800a9ce:	e068      	b.n	800aaa2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b0b      	cmp	r3, #11
 800a9d6:	d852      	bhi.n	800aa7e <USBD_CDC_Setup+0x162>
 800a9d8:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <USBD_CDC_Setup+0xc4>)
 800a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9de:	bf00      	nop
 800a9e0:	0800aa11 	.word	0x0800aa11
 800a9e4:	0800aa8d 	.word	0x0800aa8d
 800a9e8:	0800aa7f 	.word	0x0800aa7f
 800a9ec:	0800aa7f 	.word	0x0800aa7f
 800a9f0:	0800aa7f 	.word	0x0800aa7f
 800a9f4:	0800aa7f 	.word	0x0800aa7f
 800a9f8:	0800aa7f 	.word	0x0800aa7f
 800a9fc:	0800aa7f 	.word	0x0800aa7f
 800aa00:	0800aa7f 	.word	0x0800aa7f
 800aa04:	0800aa7f 	.word	0x0800aa7f
 800aa08:	0800aa3b 	.word	0x0800aa3b
 800aa0c:	0800aa65 	.word	0x0800aa65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d107      	bne.n	800aa2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa1c:	f107 030a 	add.w	r3, r7, #10
 800aa20:	2202      	movs	r2, #2
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 fa84 	bl	800bf32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa2a:	e032      	b.n	800aa92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fa0e 	bl	800be50 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa34:	2303      	movs	r3, #3
 800aa36:	75fb      	strb	r3, [r7, #23]
          break;
 800aa38:	e02b      	b.n	800aa92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d107      	bne.n	800aa56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa46:	f107 030d 	add.w	r3, r7, #13
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fa6f 	bl	800bf32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa54:	e01d      	b.n	800aa92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 f9f9 	bl	800be50 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	75fb      	strb	r3, [r7, #23]
          break;
 800aa62:	e016      	b.n	800aa92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d00f      	beq.n	800aa90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 f9ec 	bl	800be50 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa7c:	e008      	b.n	800aa90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 f9e5 	bl	800be50 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa86:	2303      	movs	r3, #3
 800aa88:	75fb      	strb	r3, [r7, #23]
          break;
 800aa8a:	e002      	b.n	800aa92 <USBD_CDC_Setup+0x176>
          break;
 800aa8c:	bf00      	nop
 800aa8e:	e008      	b.n	800aaa2 <USBD_CDC_Setup+0x186>
          break;
 800aa90:	bf00      	nop
      }
      break;
 800aa92:	e006      	b.n	800aaa2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 f9da 	bl	800be50 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aabe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e04f      	b.n	800ab6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	3318      	adds	r3, #24
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d029      	beq.n	800ab40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	3318      	adds	r3, #24
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	78f9      	ldrb	r1, [r7, #3]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	460b      	mov	r3, r1
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	4403      	add	r3, r0
 800ab0c:	333c      	adds	r3, #60	; 0x3c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab14:	fb01 f303 	mul.w	r3, r1, r3
 800ab18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d110      	bne.n	800ab40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab32:	78f9      	ldrb	r1, [r7, #3]
 800ab34:	2300      	movs	r3, #0
 800ab36:	2200      	movs	r2, #0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f004 fb7d 	bl	800f238 <USBD_LL_Transmit>
 800ab3e:	e015      	b.n	800ab6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e015      	b.n	800abc4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f004 fb8d 	bl	800f2bc <USBD_LL_GetRxDataSize>
 800aba2:	4602      	mov	r2, r0
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800abbe:	4611      	mov	r1, r2
 800abc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e01b      	b.n	800ac1e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d015      	beq.n	800ac1c <USBD_CDC_EP0_RxReady+0x50>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800abf6:	2bff      	cmp	r3, #255	; 0xff
 800abf8:	d010      	beq.n	800ac1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ac08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac10:	b292      	uxth	r2, r2
 800ac12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2243      	movs	r2, #67	; 0x43
 800ac34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20000098 	.word	0x20000098

0800ac48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2243      	movs	r2, #67	; 0x43
 800ac54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ac56:	4b03      	ldr	r3, [pc, #12]	; (800ac64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20000054 	.word	0x20000054

0800ac68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2243      	movs	r2, #67	; 0x43
 800ac74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ac76:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	200000dc 	.word	0x200000dc

0800ac88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	220a      	movs	r2, #10
 800ac94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac96:	4b03      	ldr	r3, [pc, #12]	; (800aca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	20000010 	.word	0x20000010

0800aca8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	e004      	b.n	800acc6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b087      	sub	sp, #28
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ace4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	e008      	b.n	800ad02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e004      	b.n	800ad34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ad50:	2301      	movs	r3, #1
 800ad52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e01a      	b.n	800ad98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d114      	bne.n	800ad96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad8a:	2181      	movs	r1, #129	; 0x81
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f004 fa53 	bl	800f238 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800adba:	2303      	movs	r3, #3
 800adbc:	e016      	b.n	800adec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7c1b      	ldrb	r3, [r3, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800add0:	2101      	movs	r1, #1
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f004 fa51 	bl	800f27a <USBD_LL_PrepareReceive>
 800add8:	e007      	b.n	800adea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ade0:	2340      	movs	r3, #64	; 0x40
 800ade2:	2101      	movs	r1, #1
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f004 fa48 	bl	800f27a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	4613      	mov	r3, r2
 800ae00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e01f      	b.n	800ae4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	79fa      	ldrb	r2, [r7, #7]
 800ae3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f004 f8ad 	bl	800efa0 <USBD_LL_Init>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e016      	b.n	800ae9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	f107 020e 	add.w	r2, r7, #14
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	4602      	mov	r2, r0
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f004 f8da 	bl	800f064 <USBD_LL_Start>
 800aeb0:	4603      	mov	r3, r0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b083      	sub	sp, #12
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aedc:	2303      	movs	r3, #3
 800aede:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	78fa      	ldrb	r2, [r7, #3]
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
 800aefa:	4603      	mov	r3, r0
 800aefc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	78fa      	ldrb	r2, [r7, #3]
 800af28:	4611      	mov	r1, r2
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	4798      	blx	r3
  }

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 ff46 	bl	800bddc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af5e:	461a      	mov	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af6c:	f003 031f 	and.w	r3, r3, #31
 800af70:	2b02      	cmp	r3, #2
 800af72:	d01a      	beq.n	800afaa <USBD_LL_SetupStage+0x72>
 800af74:	2b02      	cmp	r3, #2
 800af76:	d822      	bhi.n	800afbe <USBD_LL_SetupStage+0x86>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <USBD_LL_SetupStage+0x4a>
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d00a      	beq.n	800af96 <USBD_LL_SetupStage+0x5e>
 800af80:	e01d      	b.n	800afbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f9ee 	bl	800b36c <USBD_StdDevReq>
 800af90:	4603      	mov	r3, r0
 800af92:	73fb      	strb	r3, [r7, #15]
      break;
 800af94:	e020      	b.n	800afd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fa52 	bl	800b448 <USBD_StdItfReq>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
      break;
 800afa8:	e016      	b.n	800afd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fa91 	bl	800b4da <USBD_StdEPReq>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
      break;
 800afbc:	e00c      	b.n	800afd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f004 f8a9 	bl	800f124 <USBD_LL_StallEP>
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]
      break;
 800afd6:	bf00      	nop
  }

  return ret;
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	460b      	mov	r3, r1
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aff0:	7afb      	ldrb	r3, [r7, #11]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d138      	bne.n	800b068 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800affc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b004:	2b03      	cmp	r3, #3
 800b006:	d14a      	bne.n	800b09e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	429a      	cmp	r2, r3
 800b012:	d913      	bls.n	800b03c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	1ad2      	subs	r2, r2, r3
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4293      	cmp	r3, r2
 800b02c:	bf28      	it	cs
 800b02e:	4613      	movcs	r3, r2
 800b030:	461a      	mov	r2, r3
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 ffc5 	bl	800bfc4 <USBD_CtlContinueRx>
 800b03a:	e030      	b.n	800b09e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b03      	cmp	r3, #3
 800b046:	d10b      	bne.n	800b060 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 ffc0 	bl	800bfe6 <USBD_CtlSendStatus>
 800b066:	e01a      	b.n	800b09e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b03      	cmp	r3, #3
 800b072:	d114      	bne.n	800b09e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	7afa      	ldrb	r2, [r7, #11]
 800b08a:	4611      	mov	r1, r2
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	4798      	blx	r3
 800b090:	4603      	mov	r3, r0
 800b092:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	e000      	b.n	800b0a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d16b      	bne.n	800b194 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3314      	adds	r3, #20
 800b0c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d156      	bne.n	800b17a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d914      	bls.n	800b102 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	689a      	ldr	r2, [r3, #8]
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	1ad2      	subs	r2, r2, r3
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 ff3a 	bl	800bf68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f004 f8bd 	bl	800f27a <USBD_LL_PrepareReceive>
 800b100:	e03b      	b.n	800b17a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d11c      	bne.n	800b148 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b116:	429a      	cmp	r2, r3
 800b118:	d316      	bcc.n	800b148 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b124:	429a      	cmp	r2, r3
 800b126:	d20f      	bcs.n	800b148 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b128:	2200      	movs	r2, #0
 800b12a:	2100      	movs	r1, #0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 ff1b 	bl	800bf68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b13a:	2300      	movs	r3, #0
 800b13c:	2200      	movs	r2, #0
 800b13e:	2100      	movs	r1, #0
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f004 f89a 	bl	800f27a <USBD_LL_PrepareReceive>
 800b146:	e018      	b.n	800b17a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d10b      	bne.n	800b16c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b16c:	2180      	movs	r1, #128	; 0x80
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f003 ffd8 	bl	800f124 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 ff49 	bl	800c00c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b180:	2b01      	cmp	r3, #1
 800b182:	d122      	bne.n	800b1ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff fe98 	bl	800aeba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b192:	e01a      	b.n	800b1ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d114      	bne.n	800b1ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00e      	beq.n	800b1ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	7afa      	ldrb	r2, [r7, #11]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	4798      	blx	r3
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	e000      	b.n	800b1cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b204:	2303      	movs	r3, #3
 800b206:	e02f      	b.n	800b268 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00f      	beq.n	800b232 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	6852      	ldr	r2, [r2, #4]
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	4611      	mov	r1, r2
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b232:	2340      	movs	r3, #64	; 0x40
 800b234:	2200      	movs	r2, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f003 ff2e 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2240      	movs	r2, #64	; 0x40
 800b24a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b24e:	2340      	movs	r3, #64	; 0x40
 800b250:	2200      	movs	r2, #0
 800b252:	2180      	movs	r1, #128	; 0x80
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f003 ff20 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2240      	movs	r2, #64	; 0x40
 800b264:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	78fa      	ldrb	r2, [r7, #3]
 800b280:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d106      	bne.n	800b2de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e012      	b.n	800b328 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d10b      	bne.n	800b326 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	3301      	adds	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b34e:	8a3b      	ldrh	r3, [r7, #16]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	b21a      	sxth	r2, r3
 800b354:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b358:	4313      	orrs	r3, r2
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b35e:	89fb      	ldrh	r3, [r7, #14]
}
 800b360:	4618      	mov	r0, r3
 800b362:	371c      	adds	r7, #28
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d005      	beq.n	800b392 <USBD_StdDevReq+0x26>
 800b386:	2b40      	cmp	r3, #64	; 0x40
 800b388:	d853      	bhi.n	800b432 <USBD_StdDevReq+0xc6>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00b      	beq.n	800b3a6 <USBD_StdDevReq+0x3a>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d14f      	bne.n	800b432 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	4798      	blx	r3
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a4:	e04a      	b.n	800b43c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b09      	cmp	r3, #9
 800b3ac:	d83b      	bhi.n	800b426 <USBD_StdDevReq+0xba>
 800b3ae:	a201      	add	r2, pc, #4	; (adr r2, 800b3b4 <USBD_StdDevReq+0x48>)
 800b3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b4:	0800b409 	.word	0x0800b409
 800b3b8:	0800b41d 	.word	0x0800b41d
 800b3bc:	0800b427 	.word	0x0800b427
 800b3c0:	0800b413 	.word	0x0800b413
 800b3c4:	0800b427 	.word	0x0800b427
 800b3c8:	0800b3e7 	.word	0x0800b3e7
 800b3cc:	0800b3dd 	.word	0x0800b3dd
 800b3d0:	0800b427 	.word	0x0800b427
 800b3d4:	0800b3ff 	.word	0x0800b3ff
 800b3d8:	0800b3f1 	.word	0x0800b3f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f9de 	bl	800b7a0 <USBD_GetDescriptor>
          break;
 800b3e4:	e024      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fb6d 	bl	800bac8 <USBD_SetAddress>
          break;
 800b3ee:	e01f      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fbac 	bl	800bb50 <USBD_SetConfig>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800b3fc:	e018      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fc4b 	bl	800bc9c <USBD_GetConfig>
          break;
 800b406:	e013      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fc7c 	bl	800bd08 <USBD_GetStatus>
          break;
 800b410:	e00e      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fcab 	bl	800bd70 <USBD_SetFeature>
          break;
 800b41a:	e009      	b.n	800b430 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fcba 	bl	800bd98 <USBD_ClrFeature>
          break;
 800b424:	e004      	b.n	800b430 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fd11 	bl	800be50 <USBD_CtlError>
          break;
 800b42e:	bf00      	nop
      }
      break;
 800b430:	e004      	b.n	800b43c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fd0b 	bl	800be50 <USBD_CtlError>
      break;
 800b43a:	bf00      	nop
  }

  return ret;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop

0800b448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b45e:	2b40      	cmp	r3, #64	; 0x40
 800b460:	d005      	beq.n	800b46e <USBD_StdItfReq+0x26>
 800b462:	2b40      	cmp	r3, #64	; 0x40
 800b464:	d82f      	bhi.n	800b4c6 <USBD_StdItfReq+0x7e>
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <USBD_StdItfReq+0x26>
 800b46a:	2b20      	cmp	r3, #32
 800b46c:	d12b      	bne.n	800b4c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b474:	b2db      	uxtb	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d81d      	bhi.n	800b4b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	889b      	ldrh	r3, [r3, #4]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b01      	cmp	r3, #1
 800b484:	d813      	bhi.n	800b4ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	4798      	blx	r3
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88db      	ldrh	r3, [r3, #6]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d110      	bne.n	800b4c2 <USBD_StdItfReq+0x7a>
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10d      	bne.n	800b4c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fd9d 	bl	800bfe6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ac:	e009      	b.n	800b4c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fccd 	bl	800be50 <USBD_CtlError>
          break;
 800b4b6:	e004      	b.n	800b4c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fcc8 	bl	800be50 <USBD_CtlError>
          break;
 800b4c0:	e000      	b.n	800b4c4 <USBD_StdItfReq+0x7c>
          break;
 800b4c2:	bf00      	nop
      }
      break;
 800b4c4:	e004      	b.n	800b4d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fcc1 	bl	800be50 <USBD_CtlError>
      break;
 800b4ce:	bf00      	nop
  }

  return ret;
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	889b      	ldrh	r3, [r3, #4]
 800b4ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4f6:	2b40      	cmp	r3, #64	; 0x40
 800b4f8:	d007      	beq.n	800b50a <USBD_StdEPReq+0x30>
 800b4fa:	2b40      	cmp	r3, #64	; 0x40
 800b4fc:	f200 8145 	bhi.w	800b78a <USBD_StdEPReq+0x2b0>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00c      	beq.n	800b51e <USBD_StdEPReq+0x44>
 800b504:	2b20      	cmp	r3, #32
 800b506:	f040 8140 	bne.w	800b78a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	4798      	blx	r3
 800b518:	4603      	mov	r3, r0
 800b51a:	73fb      	strb	r3, [r7, #15]
      break;
 800b51c:	e13a      	b.n	800b794 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	785b      	ldrb	r3, [r3, #1]
 800b522:	2b03      	cmp	r3, #3
 800b524:	d007      	beq.n	800b536 <USBD_StdEPReq+0x5c>
 800b526:	2b03      	cmp	r3, #3
 800b528:	f300 8129 	bgt.w	800b77e <USBD_StdEPReq+0x2a4>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d07f      	beq.n	800b630 <USBD_StdEPReq+0x156>
 800b530:	2b01      	cmp	r3, #1
 800b532:	d03c      	beq.n	800b5ae <USBD_StdEPReq+0xd4>
 800b534:	e123      	b.n	800b77e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d002      	beq.n	800b548 <USBD_StdEPReq+0x6e>
 800b542:	2b03      	cmp	r3, #3
 800b544:	d016      	beq.n	800b574 <USBD_StdEPReq+0x9a>
 800b546:	e02c      	b.n	800b5a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b548:	7bbb      	ldrb	r3, [r7, #14]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00d      	beq.n	800b56a <USBD_StdEPReq+0x90>
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
 800b550:	2b80      	cmp	r3, #128	; 0x80
 800b552:	d00a      	beq.n	800b56a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f003 fde3 	bl	800f124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b55e:	2180      	movs	r1, #128	; 0x80
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f003 fddf 	bl	800f124 <USBD_LL_StallEP>
 800b566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b568:	e020      	b.n	800b5ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fc6f 	bl	800be50 <USBD_CtlError>
              break;
 800b572:	e01b      	b.n	800b5ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	885b      	ldrh	r3, [r3, #2]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10e      	bne.n	800b59a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <USBD_StdEPReq+0xc0>
 800b582:	7bbb      	ldrb	r3, [r7, #14]
 800b584:	2b80      	cmp	r3, #128	; 0x80
 800b586:	d008      	beq.n	800b59a <USBD_StdEPReq+0xc0>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	88db      	ldrh	r3, [r3, #6]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d104      	bne.n	800b59a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f003 fdc5 	bl	800f124 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fd23 	bl	800bfe6 <USBD_CtlSendStatus>

              break;
 800b5a0:	e004      	b.n	800b5ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fc53 	bl	800be50 <USBD_CtlError>
              break;
 800b5aa:	bf00      	nop
          }
          break;
 800b5ac:	e0ec      	b.n	800b788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d002      	beq.n	800b5c0 <USBD_StdEPReq+0xe6>
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d016      	beq.n	800b5ec <USBD_StdEPReq+0x112>
 800b5be:	e030      	b.n	800b622 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00d      	beq.n	800b5e2 <USBD_StdEPReq+0x108>
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	2b80      	cmp	r3, #128	; 0x80
 800b5ca:	d00a      	beq.n	800b5e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f003 fda7 	bl	800f124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5d6:	2180      	movs	r1, #128	; 0x80
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f003 fda3 	bl	800f124 <USBD_LL_StallEP>
 800b5de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5e0:	e025      	b.n	800b62e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fc33 	bl	800be50 <USBD_CtlError>
              break;
 800b5ea:	e020      	b.n	800b62e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	885b      	ldrh	r3, [r3, #2]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d11b      	bne.n	800b62c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f003 fdad 	bl	800f162 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fcec 	bl	800bfe6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	4798      	blx	r3
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b620:	e004      	b.n	800b62c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fc13 	bl	800be50 <USBD_CtlError>
              break;
 800b62a:	e000      	b.n	800b62e <USBD_StdEPReq+0x154>
              break;
 800b62c:	bf00      	nop
          }
          break;
 800b62e:	e0ab      	b.n	800b788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d002      	beq.n	800b642 <USBD_StdEPReq+0x168>
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d032      	beq.n	800b6a6 <USBD_StdEPReq+0x1cc>
 800b640:	e097      	b.n	800b772 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <USBD_StdEPReq+0x17e>
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	2b80      	cmp	r3, #128	; 0x80
 800b64c:	d004      	beq.n	800b658 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fbfd 	bl	800be50 <USBD_CtlError>
                break;
 800b656:	e091      	b.n	800b77c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	da0b      	bge.n	800b678 <USBD_StdEPReq+0x19e>
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	3310      	adds	r3, #16
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	3304      	adds	r3, #4
 800b676:	e00b      	b.n	800b690 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b67e:	4613      	mov	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	3304      	adds	r3, #4
 800b690:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2202      	movs	r2, #2
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fc47 	bl	800bf32 <USBD_CtlSendData>
              break;
 800b6a4:	e06a      	b.n	800b77c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	da11      	bge.n	800b6d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	f003 020f 	and.w	r2, r3, #15
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	440b      	add	r3, r1
 800b6c0:	3324      	adds	r3, #36	; 0x24
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d117      	bne.n	800b6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fbc0 	bl	800be50 <USBD_CtlError>
                  break;
 800b6d0:	e054      	b.n	800b77c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	f003 020f 	and.w	r2, r3, #15
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d104      	bne.n	800b6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fbad 	bl	800be50 <USBD_CtlError>
                  break;
 800b6f6:	e041      	b.n	800b77c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	da0b      	bge.n	800b718 <USBD_StdEPReq+0x23e>
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	3310      	adds	r3, #16
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	4413      	add	r3, r2
 800b714:	3304      	adds	r3, #4
 800b716:	e00b      	b.n	800b730 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	3304      	adds	r3, #4
 800b730:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <USBD_StdEPReq+0x264>
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b80      	cmp	r3, #128	; 0x80
 800b73c:	d103      	bne.n	800b746 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e00e      	b.n	800b764 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f003 fd28 	bl	800f1a0 <USBD_LL_IsStallEP>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2201      	movs	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e002      	b.n	800b764 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2202      	movs	r2, #2
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fbe1 	bl	800bf32 <USBD_CtlSendData>
              break;
 800b770:	e004      	b.n	800b77c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb6b 	bl	800be50 <USBD_CtlError>
              break;
 800b77a:	bf00      	nop
          }
          break;
 800b77c:	e004      	b.n	800b788 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb65 	bl	800be50 <USBD_CtlError>
          break;
 800b786:	bf00      	nop
      }
      break;
 800b788:	e004      	b.n	800b794 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fb5f 	bl	800be50 <USBD_CtlError>
      break;
 800b792:	bf00      	nop
  }

  return ret;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	885b      	ldrh	r3, [r3, #2]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	2b0e      	cmp	r3, #14
 800b7c2:	f200 8152 	bhi.w	800ba6a <USBD_GetDescriptor+0x2ca>
 800b7c6:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <USBD_GetDescriptor+0x2c>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b83d 	.word	0x0800b83d
 800b7d0:	0800b855 	.word	0x0800b855
 800b7d4:	0800b895 	.word	0x0800b895
 800b7d8:	0800ba6b 	.word	0x0800ba6b
 800b7dc:	0800ba6b 	.word	0x0800ba6b
 800b7e0:	0800ba0b 	.word	0x0800ba0b
 800b7e4:	0800ba37 	.word	0x0800ba37
 800b7e8:	0800ba6b 	.word	0x0800ba6b
 800b7ec:	0800ba6b 	.word	0x0800ba6b
 800b7f0:	0800ba6b 	.word	0x0800ba6b
 800b7f4:	0800ba6b 	.word	0x0800ba6b
 800b7f8:	0800ba6b 	.word	0x0800ba6b
 800b7fc:	0800ba6b 	.word	0x0800ba6b
 800b800:	0800ba6b 	.word	0x0800ba6b
 800b804:	0800b809 	.word	0x0800b809
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7c12      	ldrb	r2, [r2, #16]
 800b820:	f107 0108 	add.w	r1, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b82a:	e126      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb0e 	bl	800be50 <USBD_CtlError>
        err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
      break;
 800b83a:	e11e      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	7c12      	ldrb	r2, [r2, #16]
 800b848:	f107 0108 	add.w	r1, r7, #8
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
 800b850:	60f8      	str	r0, [r7, #12]
      break;
 800b852:	e112      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7c1b      	ldrb	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10d      	bne.n	800b878 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b864:	f107 0208 	add.w	r2, r7, #8
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	2202      	movs	r2, #2
 800b874:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b876:	e100      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	f107 0208 	add.w	r2, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	2202      	movs	r2, #2
 800b890:	701a      	strb	r2, [r3, #0]
      break;
 800b892:	e0f2      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b05      	cmp	r3, #5
 800b89c:	f200 80ac 	bhi.w	800b9f8 <USBD_GetDescriptor+0x258>
 800b8a0:	a201      	add	r2, pc, #4	; (adr r2, 800b8a8 <USBD_GetDescriptor+0x108>)
 800b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a6:	bf00      	nop
 800b8a8:	0800b8c1 	.word	0x0800b8c1
 800b8ac:	0800b8f5 	.word	0x0800b8f5
 800b8b0:	0800b929 	.word	0x0800b929
 800b8b4:	0800b95d 	.word	0x0800b95d
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	0800b9c5 	.word	0x0800b9c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00b      	beq.n	800b8e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	7c12      	ldrb	r2, [r2, #16]
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e2:	e091      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fab2 	bl	800be50 <USBD_CtlError>
            err++;
 800b8ec:	7afb      	ldrb	r3, [r7, #11]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f2:	e089      	b.n	800ba08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	7c12      	ldrb	r2, [r2, #16]
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b916:	e077      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fa98 	bl	800be50 <USBD_CtlError>
            err++;
 800b920:	7afb      	ldrb	r3, [r7, #11]
 800b922:	3301      	adds	r3, #1
 800b924:	72fb      	strb	r3, [r7, #11]
          break;
 800b926:	e06f      	b.n	800ba08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	7c12      	ldrb	r2, [r2, #16]
 800b940:	f107 0108 	add.w	r1, r7, #8
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
 800b948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94a:	e05d      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fa7e 	bl	800be50 <USBD_CtlError>
            err++;
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	3301      	adds	r3, #1
 800b958:	72fb      	strb	r3, [r7, #11]
          break;
 800b95a:	e055      	b.n	800ba08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	7c12      	ldrb	r2, [r2, #16]
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97e:	e043      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa64 	bl	800be50 <USBD_CtlError>
            err++;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3301      	adds	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]
          break;
 800b98e:	e03b      	b.n	800ba08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7c12      	ldrb	r2, [r2, #16]
 800b9a8:	f107 0108 	add.w	r1, r7, #8
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b2:	e029      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa4a 	bl	800be50 <USBD_CtlError>
            err++;
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c2:	e021      	b.n	800ba08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9e6:	e00f      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa30 	bl	800be50 <USBD_CtlError>
            err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9f6:	e007      	b.n	800ba08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa28 	bl	800be50 <USBD_CtlError>
          err++;
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	3301      	adds	r3, #1
 800ba04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ba06:	bf00      	nop
      }
      break;
 800ba08:	e037      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7c1b      	ldrb	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1a:	f107 0208 	add.w	r2, r7, #8
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4798      	blx	r3
 800ba22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba24:	e029      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fa11 	bl	800be50 <USBD_CtlError>
        err++;
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	3301      	adds	r3, #1
 800ba32:	72fb      	strb	r3, [r7, #11]
      break;
 800ba34:	e021      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7c1b      	ldrb	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10d      	bne.n	800ba5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba46:	f107 0208 	add.w	r2, r7, #8
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4798      	blx	r3
 800ba4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	2207      	movs	r2, #7
 800ba56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba58:	e00f      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f9f7 	bl	800be50 <USBD_CtlError>
        err++;
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	3301      	adds	r3, #1
 800ba66:	72fb      	strb	r3, [r7, #11]
      break;
 800ba68:	e007      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f9ef 	bl	800be50 <USBD_CtlError>
      err++;
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	3301      	adds	r3, #1
 800ba76:	72fb      	strb	r3, [r7, #11]
      break;
 800ba78:	bf00      	nop
  }

  if (err != 0U)
 800ba7a:	7afb      	ldrb	r3, [r7, #11]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d11e      	bne.n	800babe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	88db      	ldrh	r3, [r3, #6]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d016      	beq.n	800bab6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ba88:	893b      	ldrh	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00e      	beq.n	800baac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88da      	ldrh	r2, [r3, #6]
 800ba92:	893b      	ldrh	r3, [r7, #8]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf28      	it	cs
 800ba98:	4613      	movcs	r3, r2
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba9e:	893b      	ldrh	r3, [r7, #8]
 800baa0:	461a      	mov	r2, r3
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa44 	bl	800bf32 <USBD_CtlSendData>
 800baaa:	e009      	b.n	800bac0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f9ce 	bl	800be50 <USBD_CtlError>
 800bab4:	e004      	b.n	800bac0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa95 	bl	800bfe6 <USBD_CtlSendStatus>
 800babc:	e000      	b.n	800bac0 <USBD_GetDescriptor+0x320>
    return;
 800babe:	bf00      	nop
  }
}
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop

0800bac8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	889b      	ldrh	r3, [r3, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d131      	bne.n	800bb3e <USBD_SetAddress+0x76>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	88db      	ldrh	r3, [r3, #6]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d12d      	bne.n	800bb3e <USBD_SetAddress+0x76>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	2b7f      	cmp	r3, #127	; 0x7f
 800bae8:	d829      	bhi.n	800bb3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d104      	bne.n	800bb0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f9a3 	bl	800be50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0a:	e01d      	b.n	800bb48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7bfa      	ldrb	r2, [r7, #15]
 800bb10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f003 fb6e 	bl	800f1fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa61 	bl	800bfe6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d004      	beq.n	800bb34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb32:	e009      	b.n	800bb48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3c:	e004      	b.n	800bb48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f985 	bl	800be50 <USBD_CtlError>
  }
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	4b4c      	ldr	r3, [pc, #304]	; (800bc98 <USBD_SetConfig+0x148>)
 800bb66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb68:	4b4b      	ldr	r3, [pc, #300]	; (800bc98 <USBD_SetConfig+0x148>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d905      	bls.n	800bb7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f96c 	bl	800be50 <USBD_CtlError>
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e088      	b.n	800bc8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d002      	beq.n	800bb8e <USBD_SetConfig+0x3e>
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d025      	beq.n	800bbd8 <USBD_SetConfig+0x88>
 800bb8c:	e071      	b.n	800bc72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb8e:	4b42      	ldr	r3, [pc, #264]	; (800bc98 <USBD_SetConfig+0x148>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d01c      	beq.n	800bbd0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bb96:	4b40      	ldr	r3, [pc, #256]	; (800bc98 <USBD_SetConfig+0x148>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bba0:	4b3d      	ldr	r3, [pc, #244]	; (800bc98 <USBD_SetConfig+0x148>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff f992 	bl	800aed0 <USBD_SetClassConfig>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d004      	beq.n	800bbc0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f949 	bl	800be50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbbe:	e065      	b.n	800bc8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa10 	bl	800bfe6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2203      	movs	r2, #3
 800bbca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbce:	e05d      	b.n	800bc8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa08 	bl	800bfe6 <USBD_CtlSendStatus>
      break;
 800bbd6:	e059      	b.n	800bc8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbd8:	4b2f      	ldr	r3, [pc, #188]	; (800bc98 <USBD_SetConfig+0x148>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d112      	bne.n	800bc06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bbe8:	4b2b      	ldr	r3, [pc, #172]	; (800bc98 <USBD_SetConfig+0x148>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbf2:	4b29      	ldr	r3, [pc, #164]	; (800bc98 <USBD_SetConfig+0x148>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff f985 	bl	800af08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f9f1 	bl	800bfe6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc04:	e042      	b.n	800bc8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bc06:	4b24      	ldr	r3, [pc, #144]	; (800bc98 <USBD_SetConfig+0x148>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d02a      	beq.n	800bc6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff f973 	bl	800af08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc22:	4b1d      	ldr	r3, [pc, #116]	; (800bc98 <USBD_SetConfig+0x148>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc2c:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <USBD_SetConfig+0x148>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff f94c 	bl	800aed0 <USBD_SetClassConfig>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00f      	beq.n	800bc62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f903 	bl	800be50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff f958 	bl	800af08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc60:	e014      	b.n	800bc8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f9bf 	bl	800bfe6 <USBD_CtlSendStatus>
      break;
 800bc68:	e010      	b.n	800bc8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f9bb 	bl	800bfe6 <USBD_CtlSendStatus>
      break;
 800bc70:	e00c      	b.n	800bc8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f8eb 	bl	800be50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <USBD_SetConfig+0x148>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff f941 	bl	800af08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc86:	2303      	movs	r3, #3
 800bc88:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8a:	bf00      	nop
  }

  return ret;
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	200004a4 	.word	0x200004a4

0800bc9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	88db      	ldrh	r3, [r3, #6]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d004      	beq.n	800bcb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f8cd 	bl	800be50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcb6:	e023      	b.n	800bd00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	dc02      	bgt.n	800bcca <USBD_GetConfig+0x2e>
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dc03      	bgt.n	800bcd0 <USBD_GetConfig+0x34>
 800bcc8:	e015      	b.n	800bcf6 <USBD_GetConfig+0x5a>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d00b      	beq.n	800bce6 <USBD_GetConfig+0x4a>
 800bcce:	e012      	b.n	800bcf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f927 	bl	800bf32 <USBD_CtlSendData>
        break;
 800bce4:	e00c      	b.n	800bd00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3304      	adds	r3, #4
 800bcea:	2201      	movs	r2, #1
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f91f 	bl	800bf32 <USBD_CtlSendData>
        break;
 800bcf4:	e004      	b.n	800bd00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f8a9 	bl	800be50 <USBD_CtlError>
        break;
 800bcfe:	bf00      	nop
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d81e      	bhi.n	800bd5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	88db      	ldrh	r3, [r3, #6]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d004      	beq.n	800bd32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f890 	bl	800be50 <USBD_CtlError>
        break;
 800bd30:	e01a      	b.n	800bd68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f043 0202 	orr.w	r2, r3, #2
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	330c      	adds	r3, #12
 800bd52:	2202      	movs	r2, #2
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f8eb 	bl	800bf32 <USBD_CtlSendData>
      break;
 800bd5c:	e004      	b.n	800bd68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f875 	bl	800be50 <USBD_CtlError>
      break;
 800bd66:	bf00      	nop
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	885b      	ldrh	r3, [r3, #2]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d106      	bne.n	800bd90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f92b 	bl	800bfe6 <USBD_CtlSendStatus>
  }
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d80b      	bhi.n	800bdc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	885b      	ldrh	r3, [r3, #2]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d10c      	bne.n	800bdd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f910 	bl	800bfe6 <USBD_CtlSendStatus>
      }
      break;
 800bdc6:	e004      	b.n	800bdd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f840 	bl	800be50 <USBD_CtlError>
      break;
 800bdd0:	e000      	b.n	800bdd4 <USBD_ClrFeature+0x3c>
      break;
 800bdd2:	bf00      	nop
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	781a      	ldrb	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	781a      	ldrb	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3301      	adds	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fa92 	bl	800b330 <SWAPBYTE>
 800be0c:	4603      	mov	r3, r0
 800be0e:	461a      	mov	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fa85 	bl	800b330 <SWAPBYTE>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3301      	adds	r3, #1
 800be32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fa78 	bl	800b330 <SWAPBYTE>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	80da      	strh	r2, [r3, #6]
}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be5a:	2180      	movs	r1, #128	; 0x80
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f003 f961 	bl	800f124 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f003 f95d 	bl	800f124 <USBD_LL_StallEP>
}
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b086      	sub	sp, #24
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d036      	beq.n	800bef6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be8c:	6938      	ldr	r0, [r7, #16]
 800be8e:	f000 f836 	bl	800befe <USBD_GetLen>
 800be92:	4603      	mov	r3, r0
 800be94:	3301      	adds	r3, #1
 800be96:	b29b      	uxth	r3, r3
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	7812      	ldrb	r2, [r2, #0]
 800beaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800beac:	7dfb      	ldrb	r3, [r7, #23]
 800beae:	3301      	adds	r3, #1
 800beb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	4413      	add	r3, r2
 800beb8:	2203      	movs	r2, #3
 800beba:	701a      	strb	r2, [r3, #0]
  idx++;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	3301      	adds	r3, #1
 800bec0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bec2:	e013      	b.n	800beec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	4413      	add	r3, r2
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	7812      	ldrb	r2, [r2, #0]
 800bece:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	3301      	adds	r3, #1
 800bed4:	613b      	str	r3, [r7, #16]
    idx++;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	3301      	adds	r3, #1
 800beda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	4413      	add	r3, r2
 800bee2:	2200      	movs	r2, #0
 800bee4:	701a      	strb	r2, [r3, #0]
    idx++;
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
 800bee8:	3301      	adds	r3, #1
 800beea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e7      	bne.n	800bec4 <USBD_GetString+0x52>
 800bef4:	e000      	b.n	800bef8 <USBD_GetString+0x86>
    return;
 800bef6:	bf00      	nop
  }
}
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800befe:	b480      	push	{r7}
 800bf00:	b085      	sub	sp, #20
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf0e:	e005      	b.n	800bf1c <USBD_GetLen+0x1e>
  {
    len++;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	3301      	adds	r3, #1
 800bf14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1f5      	bne.n	800bf10 <USBD_GetLen+0x12>
  }

  return len;
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2202      	movs	r2, #2
 800bf42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	2100      	movs	r1, #0
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f003 f96d 	bl	800f238 <USBD_LL_Transmit>

  return USBD_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f003 f95c 	bl	800f238 <USBD_LL_Transmit>

  return USBD_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2203      	movs	r2, #3
 800bf9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f003 f960 	bl	800f27a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f003 f94f 	bl	800f27a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2204      	movs	r2, #4
 800bff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bff6:	2300      	movs	r3, #0
 800bff8:	2200      	movs	r2, #0
 800bffa:	2100      	movs	r1, #0
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f003 f91b 	bl	800f238 <USBD_LL_Transmit>

  return USBD_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2205      	movs	r2, #5
 800c018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c01c:	2300      	movs	r3, #0
 800c01e:	2200      	movs	r2, #0
 800c020:	2100      	movs	r1, #0
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f003 f929 	bl	800f27a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c038:	1d3b      	adds	r3, r7, #4
 800c03a:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2200      	movs	r2, #0
 800c040:	2100      	movs	r1, #0
 800c042:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800c046:	f000 f939 	bl	800c2bc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	330b      	adds	r3, #11
 800c04e:	78db      	ldrb	r3, [r3, #3]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c062:	f107 030c 	add.w	r3, r7, #12
 800c066:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800c068:	79fb      	ldrb	r3, [r7, #7]
 800c06a:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800c06c:	f107 020c 	add.w	r2, r7, #12
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2101      	movs	r1, #1
 800c074:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800c078:	f000 f920 	bl	800c2bc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	330b      	adds	r3, #11
 800c080:	78db      	ldrb	r3, [r3, #3]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3720      	adds	r7, #32
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800c08c:	b480      	push	{r7}
 800c08e:	b08b      	sub	sp, #44	; 0x2c
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c0b4:	4b4a      	ldr	r3, [pc, #296]	; (800c1e0 <SHCI_GetWirelessFwInfo+0x154>)
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c0bc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c0c6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a44      	ldr	r2, [pc, #272]	; (800c1e4 <SHCI_GetWirelessFwInfo+0x158>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d10f      	bne.n	800c0f8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	699b      	ldr	r3, [r3, #24]
 800c0e2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	e01a      	b.n	800c12e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c100:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c104:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	0e1b      	lsrs	r3, r3, #24
 800c132:	b2da      	uxtb	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	0c1b      	lsrs	r3, r3, #16
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	0a1b      	lsrs	r3, r3, #8
 800c146:	b2da      	uxtb	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	091b      	lsrs	r3, r3, #4
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	b2da      	uxtb	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 030f 	and.w	r3, r3, #15
 800c164:	b2da      	uxtb	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	0e1b      	lsrs	r3, r3, #24
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	0c1b      	lsrs	r3, r3, #16
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	0a1b      	lsrs	r3, r3, #8
 800c182:	b2da      	uxtb	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	b2da      	uxtb	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	0e1b      	lsrs	r3, r3, #24
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	0c1b      	lsrs	r3, r3, #16
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	0a1b      	lsrs	r3, r3, #8
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	0e1b      	lsrs	r3, r3, #24
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	0c1b      	lsrs	r3, r3, #16
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	372c      	adds	r7, #44	; 0x2c
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	58004000 	.word	0x58004000
 800c1e4:	a94656b9 	.word	0xa94656b9

0800c1e8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	4a08      	ldr	r2, [pc, #32]	; (800c218 <shci_init+0x30>)
 800c1f8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c1fa:	4a08      	ldr	r2, [pc, #32]	; (800c21c <shci_init+0x34>)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c200:	4806      	ldr	r0, [pc, #24]	; (800c21c <shci_init+0x34>)
 800c202:	f000 f911 	bl	800c428 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f894 	bl	800c338 <TlInit>

  return;
 800c210:	bf00      	nop
}
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	200004c8 	.word	0x200004c8
 800c21c:	200004a8 	.word	0x200004a8

0800c220 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c226:	4822      	ldr	r0, [pc, #136]	; (800c2b0 <shci_user_evt_proc+0x90>)
 800c228:	f001 fb60 	bl	800d8ec <LST_is_empty>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d12b      	bne.n	800c28a <shci_user_evt_proc+0x6a>
 800c232:	4b20      	ldr	r3, [pc, #128]	; (800c2b4 <shci_user_evt_proc+0x94>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d027      	beq.n	800c28a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c23a:	f107 030c 	add.w	r3, r7, #12
 800c23e:	4619      	mov	r1, r3
 800c240:	481b      	ldr	r0, [pc, #108]	; (800c2b0 <shci_user_evt_proc+0x90>)
 800c242:	f001 fbe2 	bl	800da0a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c246:	4b1c      	ldr	r3, [pc, #112]	; (800c2b8 <shci_user_evt_proc+0x98>)
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00c      	beq.n	800c268 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c252:	2301      	movs	r3, #1
 800c254:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c256:	4b18      	ldr	r3, [pc, #96]	; (800c2b8 <shci_user_evt_proc+0x98>)
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	1d3a      	adds	r2, r7, #4
 800c25c:	4610      	mov	r0, r2
 800c25e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c260:	793a      	ldrb	r2, [r7, #4]
 800c262:	4b14      	ldr	r3, [pc, #80]	; (800c2b4 <shci_user_evt_proc+0x94>)
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	e002      	b.n	800c26e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c268:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <shci_user_evt_proc+0x94>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c26e:	4b11      	ldr	r3, [pc, #68]	; (800c2b4 <shci_user_evt_proc+0x94>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fa99 	bl	800c7b0 <TL_MM_EvtDone>
 800c27e:	e004      	b.n	800c28a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4619      	mov	r1, r3
 800c284:	480a      	ldr	r0, [pc, #40]	; (800c2b0 <shci_user_evt_proc+0x90>)
 800c286:	f001 fb53 	bl	800d930 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c28a:	4809      	ldr	r0, [pc, #36]	; (800c2b0 <shci_user_evt_proc+0x90>)
 800c28c:	f001 fb2e 	bl	800d8ec <LST_is_empty>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d107      	bne.n	800c2a6 <shci_user_evt_proc+0x86>
 800c296:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <shci_user_evt_proc+0x94>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c29e:	4804      	ldr	r0, [pc, #16]	; (800c2b0 <shci_user_evt_proc+0x90>)
 800c2a0:	f7f4 fc18 	bl	8000ad4 <shci_notify_asynch_evt>
  }


  return;
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
}
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200002a4 	.word	0x200002a4
 800c2b4:	200002b4 	.word	0x200002b4
 800c2b8:	200004a8 	.word	0x200004a8

0800c2bc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60ba      	str	r2, [r7, #8]
 800c2c4:	607b      	str	r3, [r7, #4]
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	81fb      	strh	r3, [r7, #14]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f000 f864 	bl	800c39c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c2d4:	4b16      	ldr	r3, [pc, #88]	; (800c330 <shci_send+0x74>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	89fa      	ldrh	r2, [r7, #14]
 800c2da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c2de:	4b14      	ldr	r3, [pc, #80]	; (800c330 <shci_send+0x74>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	7b7a      	ldrb	r2, [r7, #13]
 800c2e4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c2e6:	4b12      	ldr	r3, [pc, #72]	; (800c330 <shci_send+0x74>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	330c      	adds	r3, #12
 800c2ec:	7b7a      	ldrb	r2, [r7, #13]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f003 fc5b 	bl	800fbac <memcpy>

  shciContext.io.Send(0,0);
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <shci_send+0x78>)
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c300:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c304:	f7f4 fbfd 	bl	8000b02 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f103 0008 	add.w	r0, r3, #8
 800c30e:	4b08      	ldr	r3, [pc, #32]	; (800c330 <shci_send+0x74>)
 800c310:	6819      	ldr	r1, [r3, #0]
 800c312:	4b07      	ldr	r3, [pc, #28]	; (800c330 <shci_send+0x74>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	789b      	ldrb	r3, [r3, #2]
 800c318:	3303      	adds	r3, #3
 800c31a:	461a      	mov	r2, r3
 800c31c:	f003 fc46 	bl	800fbac <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c320:	2001      	movs	r0, #1
 800c322:	f000 f83b 	bl	800c39c <Cmd_SetStatus>

  return;
 800c326:	bf00      	nop
}
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	200002b0 	.word	0x200002b0
 800c334:	200004a8 	.word	0x200004a8

0800c338 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c340:	4a10      	ldr	r2, [pc, #64]	; (800c384 <TlInit+0x4c>)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c346:	4810      	ldr	r0, [pc, #64]	; (800c388 <TlInit+0x50>)
 800c348:	f001 fac0 	bl	800d8cc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c34c:	2001      	movs	r0, #1
 800c34e:	f000 f825 	bl	800c39c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c352:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <TlInit+0x54>)
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <TlInit+0x58>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00c      	beq.n	800c37a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <TlInit+0x5c>)
 800c366:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c368:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <TlInit+0x60>)
 800c36a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c36c:	4b08      	ldr	r3, [pc, #32]	; (800c390 <TlInit+0x58>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f107 020c 	add.w	r2, r7, #12
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
  }

  return;
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
}
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	200002b0 	.word	0x200002b0
 800c388:	200002a4 	.word	0x200002a4
 800c38c:	200002b4 	.word	0x200002b4
 800c390:	200004a8 	.word	0x200004a8
 800c394:	0800c3ed 	.word	0x0800c3ed
 800c398:	0800c405 	.word	0x0800c405

0800c39c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10b      	bne.n	800c3c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c3ac:	4b0d      	ldr	r3, [pc, #52]	; (800c3e4 <Cmd_SetStatus+0x48>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c3b4:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <Cmd_SetStatus+0x48>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <Cmd_SetStatus+0x4c>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c3c2:	e00b      	b.n	800c3dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c3c4:	4b08      	ldr	r3, [pc, #32]	; (800c3e8 <Cmd_SetStatus+0x4c>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c3ca:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <Cmd_SetStatus+0x48>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c3d2:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <Cmd_SetStatus+0x48>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	4798      	blx	r3
  return;
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
}
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	200004c8 	.word	0x200004c8
 800c3e8:	200002ac 	.word	0x200002ac

0800c3ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f7f4 fb79 	bl	8000aec <shci_cmd_resp_release>

  return;
 800c3fa:	bf00      	nop
}
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4805      	ldr	r0, [pc, #20]	; (800c424 <TlUserEvtReceived+0x20>)
 800c410:	f001 fab4 	bl	800d97c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c414:	4803      	ldr	r0, [pc, #12]	; (800c424 <TlUserEvtReceived+0x20>)
 800c416:	f7f4 fb5d 	bl	8000ad4 <shci_notify_asynch_evt>

  return;
 800c41a:	bf00      	nop
}
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	200002a4 	.word	0x200002a4

0800c428 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a05      	ldr	r2, [pc, #20]	; (800c448 <shci_register_io_bus+0x20>)
 800c434:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a04      	ldr	r2, [pc, #16]	; (800c44c <shci_register_io_bus+0x24>)
 800c43a:	611a      	str	r2, [r3, #16]

  return;
 800c43c:	bf00      	nop
}
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	0800c545 	.word	0x0800c545
 800c44c:	0800c599 	.word	0x0800c599

0800c450 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c454:	f002 f92a 	bl	800e6ac <HW_IPCC_Enable>

  return;
 800c458:	bf00      	nop
}
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <TL_Init>:


void TL_Init( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c460:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <TL_Init+0x48>)
 800c462:	4a11      	ldr	r2, [pc, #68]	; (800c4a8 <TL_Init+0x4c>)
 800c464:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <TL_Init+0x48>)
 800c468:	4a10      	ldr	r2, [pc, #64]	; (800c4ac <TL_Init+0x50>)
 800c46a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c46c:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <TL_Init+0x48>)
 800c46e:	4a10      	ldr	r2, [pc, #64]	; (800c4b0 <TL_Init+0x54>)
 800c470:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c472:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <TL_Init+0x48>)
 800c474:	4a0f      	ldr	r2, [pc, #60]	; (800c4b4 <TL_Init+0x58>)
 800c476:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <TL_Init+0x48>)
 800c47a:	4a0f      	ldr	r2, [pc, #60]	; (800c4b8 <TL_Init+0x5c>)
 800c47c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c47e:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <TL_Init+0x48>)
 800c480:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <TL_Init+0x60>)
 800c482:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <TL_Init+0x48>)
 800c486:	4a0e      	ldr	r2, [pc, #56]	; (800c4c0 <TL_Init+0x64>)
 800c488:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c48a:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <TL_Init+0x48>)
 800c48c:	4a0d      	ldr	r2, [pc, #52]	; (800c4c4 <TL_Init+0x68>)
 800c48e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c490:	4b04      	ldr	r3, [pc, #16]	; (800c4a4 <TL_Init+0x48>)
 800c492:	4a0d      	ldr	r2, [pc, #52]	; (800c4c8 <TL_Init+0x6c>)
 800c494:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c496:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <TL_Init+0x48>)
 800c498:	4a0c      	ldr	r2, [pc, #48]	; (800c4cc <TL_Init+0x70>)
 800c49a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c49c:	f002 f91a 	bl	800e6d4 <HW_IPCC_Init>

  return;
 800c4a0:	bf00      	nop
}
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20030000 	.word	0x20030000
 800c4a8:	20030028 	.word	0x20030028
 800c4ac:	20030048 	.word	0x20030048
 800c4b0:	20030058 	.word	0x20030058
 800c4b4:	20030068 	.word	0x20030068
 800c4b8:	20030070 	.word	0x20030070
 800c4bc:	20030078 	.word	0x20030078
 800c4c0:	20030080 	.word	0x20030080
 800c4c4:	2003009c 	.word	0x2003009c
 800c4c8:	200300a0 	.word	0x200300a0
 800c4cc:	200300ac 	.word	0x200300ac

0800c4d0 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c4d6:	e01c      	b.n	800c512 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c4d8:	1d3b      	adds	r3, r7, #4
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4812      	ldr	r0, [pc, #72]	; (800c528 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c4de:	f001 fa94 	bl	800da0a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7a5b      	ldrb	r3, [r3, #9]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d003      	beq.n	800c4f2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	7a5b      	ldrb	r3, [r3, #9]
 800c4ee:	2b0e      	cmp	r3, #14
 800c4f0:	d105      	bne.n	800c4fe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	2002      	movs	r0, #2
 800c4f8:	f000 f9be 	bl	800c878 <OutputDbgTrace>
 800c4fc:	e004      	b.n	800c508 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4619      	mov	r1, r3
 800c502:	2003      	movs	r0, #3
 800c504:	f000 f9b8 	bl	800c878 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c508:	4b08      	ldr	r3, [pc, #32]	; (800c52c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	4610      	mov	r0, r2
 800c510:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c512:	4805      	ldr	r0, [pc, #20]	; (800c528 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c514:	f001 f9ea 	bl	800d8ec <LST_is_empty>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0dc      	beq.n	800c4d8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c51e:	bf00      	nop
}
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200300c8 	.word	0x200300c8
 800c52c:	200004d4 	.word	0x200004d4

0800c530 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4798      	blx	r3

  return;
 800c53a:	bf00      	nop
}
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	200004d8 	.word	0x200004d8

0800c544 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c550:	480d      	ldr	r0, [pc, #52]	; (800c588 <TL_SYS_Init+0x44>)
 800c552:	f001 f9bb 	bl	800d8cc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c556:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <TL_SYS_Init+0x48>)
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	689a      	ldr	r2, [r3, #8]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	4a08      	ldr	r2, [pc, #32]	; (800c588 <TL_SYS_Init+0x44>)
 800c568:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c56a:	f002 f8e1 	bl	800e730 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a07      	ldr	r2, [pc, #28]	; (800c590 <TL_SYS_Init+0x4c>)
 800c574:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	4a06      	ldr	r2, [pc, #24]	; (800c594 <TL_SYS_Init+0x50>)
 800c57c:	6013      	str	r3, [r2, #0]

  return 0;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	200300d0 	.word	0x200300d0
 800c58c:	20030000 	.word	0x20030000
 800c590:	200004dc 	.word	0x200004dc
 800c594:	200004e0 	.word	0x200004e0

0800c598 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <TL_SYS_SendCmd+0x34>)
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2210      	movs	r2, #16
 800c5ac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c5ae:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <TL_SYS_SendCmd+0x34>)
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	2004      	movs	r0, #4
 800c5b8:	f000 f95e 	bl	800c878 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c5bc:	f002 f8c2 	bl	800e744 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20030000 	.word	0x20030000

0800c5d0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	2005      	movs	r0, #5
 800c5de:	f000 f94b 	bl	800c878 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a03      	ldr	r2, [pc, #12]	; (800c5f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c5e8:	68d2      	ldr	r2, [r2, #12]
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4798      	blx	r3

  return;
 800c5f0:	bf00      	nop
}
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20030000 	.word	0x20030000
 800c5f8:	200004dc 	.word	0x200004dc

0800c5fc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c602:	e00e      	b.n	800c622 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c604:	1d3b      	adds	r3, r7, #4
 800c606:	4619      	mov	r1, r3
 800c608:	480b      	ldr	r0, [pc, #44]	; (800c638 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c60a:	f001 f9fe 	bl	800da0a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4619      	mov	r1, r3
 800c612:	2006      	movs	r0, #6
 800c614:	f000 f930 	bl	800c878 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c618:	4b08      	ldr	r3, [pc, #32]	; (800c63c <HW_IPCC_SYS_EvtNot+0x40>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	4610      	mov	r0, r2
 800c620:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c622:	4805      	ldr	r0, [pc, #20]	; (800c638 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c624:	f001 f962 	bl	800d8ec <LST_is_empty>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0ea      	beq.n	800c604 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c62e:	bf00      	nop
}
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	200300d0 	.word	0x200300d0
 800c63c:	200004e0 	.word	0x200004e0

0800c640 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c648:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <TL_THREAD_Init+0x3c>)
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	689a      	ldr	r2, [r3, #8]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800c66e:	f002 f88f 	bl	800e790 <HW_IPCC_THREAD_Init>

  return;
 800c672:	bf00      	nop
}
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20030000 	.word	0x20030000

0800c680 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c684:	4b04      	ldr	r3, [pc, #16]	; (800c698 <TL_OT_SendCmd+0x18>)
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	2208      	movs	r2, #8
 800c68c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c68e:	f002 f88d 	bl	800e7ac <HW_IPCC_OT_SendCmd>

  return;
 800c692:	bf00      	nop
}
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20030000 	.word	0x20030000

0800c69c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c6a0:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <TL_CLI_SendCmd+0x18>)
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	220a      	movs	r2, #10
 800c6a8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c6aa:	f002 f88d 	bl	800e7c8 <HW_IPCC_CLI_SendCmd>

  return;
 800c6ae:	bf00      	nop
}
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20030000 	.word	0x20030000

0800c6b8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c6bc:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <TL_THREAD_SendAck+0x18>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	220d      	movs	r2, #13
 800c6c4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c6c6:	f002 f889 	bl	800e7dc <HW_IPCC_THREAD_SendAck>

  return;
 800c6ca:	bf00      	nop
}
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20030000 	.word	0x20030000

0800c6d4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c6d8:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <TL_THREAD_CliSendAck+0x18>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	220d      	movs	r2, #13
 800c6e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c6e2:	f002 f889 	bl	800e7f8 <HW_IPCC_THREAD_CliSendAck>

  return;
 800c6e6:	bf00      	nop
}
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20030000 	.word	0x20030000

0800c6f0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c6f4:	4b03      	ldr	r3, [pc, #12]	; (800c704 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f001 fcee 	bl	800e0dc <TL_OT_CmdEvtReceived>

  return;
 800c700:	bf00      	nop
}
 800c702:	bd80      	pop	{r7, pc}
 800c704:	20030000 	.word	0x20030000

0800c708 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c70c:	4b03      	ldr	r3, [pc, #12]	; (800c71c <HW_IPCC_THREAD_EvtNot+0x14>)
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4618      	mov	r0, r3
 800c714:	f001 fcf2 	bl	800e0fc <TL_THREAD_NotReceived>

  return;
 800c718:	bf00      	nop
}
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20030000 	.word	0x20030000

0800c720 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800c724:	4b03      	ldr	r3, [pc, #12]	; (800c734 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f001 fdc4 	bl	800e2b8 <TL_THREAD_CliNotReceived>

  return;
 800c730:	bf00      	nop
}
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20030000 	.word	0x20030000

0800c738 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c740:	4817      	ldr	r0, [pc, #92]	; (800c7a0 <TL_MM_Init+0x68>)
 800c742:	f001 f8c3 	bl	800d8cc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c746:	4817      	ldr	r0, [pc, #92]	; (800c7a4 <TL_MM_Init+0x6c>)
 800c748:	f001 f8c0 	bl	800d8cc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c74c:	4b16      	ldr	r3, [pc, #88]	; (800c7a8 <TL_MM_Init+0x70>)
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	4a16      	ldr	r2, [pc, #88]	; (800c7ac <TL_MM_Init+0x74>)
 800c752:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c754:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <TL_MM_Init+0x74>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6892      	ldr	r2, [r2, #8]
 800c75c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c75e:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <TL_MM_Init+0x74>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	68d2      	ldr	r2, [r2, #12]
 800c766:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c768:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <TL_MM_Init+0x74>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a0c      	ldr	r2, [pc, #48]	; (800c7a0 <TL_MM_Init+0x68>)
 800c76e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c770:	4b0e      	ldr	r3, [pc, #56]	; (800c7ac <TL_MM_Init+0x74>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c77a:	4b0c      	ldr	r3, [pc, #48]	; (800c7ac <TL_MM_Init+0x74>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6852      	ldr	r2, [r2, #4]
 800c782:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c784:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <TL_MM_Init+0x74>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	6912      	ldr	r2, [r2, #16]
 800c78c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c78e:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <TL_MM_Init+0x74>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6952      	ldr	r2, [r2, #20]
 800c796:	619a      	str	r2, [r3, #24]

  return;
 800c798:	bf00      	nop
}
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	200300b8 	.word	0x200300b8
 800c7a4:	200004cc 	.word	0x200004cc
 800c7a8:	20030000 	.word	0x20030000
 800c7ac:	200004e4 	.word	0x200004e4

0800c7b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4807      	ldr	r0, [pc, #28]	; (800c7d8 <TL_MM_EvtDone+0x28>)
 800c7bc:	f001 f8de 	bl	800d97c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f000 f858 	bl	800c878 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c7c8:	4804      	ldr	r0, [pc, #16]	; (800c7dc <TL_MM_EvtDone+0x2c>)
 800c7ca:	f002 f847 	bl	800e85c <HW_IPCC_MM_SendFreeBuf>

  return;
 800c7ce:	bf00      	nop
}
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	200004cc 	.word	0x200004cc
 800c7dc:	0800c7e1 	.word	0x0800c7e1

0800c7e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c7e6:	e00c      	b.n	800c802 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c7e8:	1d3b      	adds	r3, r7, #4
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	480a      	ldr	r0, [pc, #40]	; (800c818 <SendFreeBuf+0x38>)
 800c7ee:	f001 f90c 	bl	800da0a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c7f2:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <SendFreeBuf+0x3c>)
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 f8bd 	bl	800d97c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c802:	4805      	ldr	r0, [pc, #20]	; (800c818 <SendFreeBuf+0x38>)
 800c804:	f001 f872 	bl	800d8ec <LST_is_empty>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ec      	beq.n	800c7e8 <SendFreeBuf+0x8>
  }

  return;
 800c80e:	bf00      	nop
}
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	200004cc 	.word	0x200004cc
 800c81c:	20030000 	.word	0x20030000

0800c820 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c824:	4805      	ldr	r0, [pc, #20]	; (800c83c <TL_TRACES_Init+0x1c>)
 800c826:	f001 f851 	bl	800d8cc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c82a:	4b05      	ldr	r3, [pc, #20]	; (800c840 <TL_TRACES_Init+0x20>)
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	4a03      	ldr	r2, [pc, #12]	; (800c83c <TL_TRACES_Init+0x1c>)
 800c830:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c832:	f002 f849 	bl	800e8c8 <HW_IPCC_TRACES_Init>

  return;
 800c836:	bf00      	nop
}
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	200300c0 	.word	0x200300c0
 800c840:	20030000 	.word	0x20030000

0800c844 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c84a:	e008      	b.n	800c85e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c84c:	1d3b      	adds	r3, r7, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4808      	ldr	r0, [pc, #32]	; (800c874 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c852:	f001 f8da 	bl	800da0a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7f4 f95d 	bl	8000b18 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c85e:	4805      	ldr	r0, [pc, #20]	; (800c874 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c860:	f001 f844 	bl	800d8ec <LST_is_empty>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0f0      	beq.n	800c84c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c86a:	bf00      	nop
}
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	200300c0 	.word	0x200300c0

0800c878 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	4603      	mov	r3, r0
 800c880:	6039      	str	r1, [r7, #0]
 800c882:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b06      	cmp	r3, #6
 800c888:	d845      	bhi.n	800c916 <OutputDbgTrace+0x9e>
 800c88a:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <OutputDbgTrace+0x18>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c8ad 	.word	0x0800c8ad
 800c894:	0800c8d1 	.word	0x0800c8d1
 800c898:	0800c8d7 	.word	0x0800c8d7
 800c89c:	0800c8eb 	.word	0x0800c8eb
 800c8a0:	0800c8f7 	.word	0x0800c8f7
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c90b 	.word	0x0800c90b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	7a5b      	ldrb	r3, [r3, #9]
 800c8b4:	2bff      	cmp	r3, #255	; 0xff
 800c8b6:	d005      	beq.n	800c8c4 <OutputDbgTrace+0x4c>
 800c8b8:	2bff      	cmp	r3, #255	; 0xff
 800c8ba:	dc05      	bgt.n	800c8c8 <OutputDbgTrace+0x50>
 800c8bc:	2b0e      	cmp	r3, #14
 800c8be:	d005      	beq.n	800c8cc <OutputDbgTrace+0x54>
 800c8c0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c8c2:	e001      	b.n	800c8c8 <OutputDbgTrace+0x50>
          break;
 800c8c4:	bf00      	nop
 800c8c6:	e027      	b.n	800c918 <OutputDbgTrace+0xa0>
          break;
 800c8c8:	bf00      	nop
 800c8ca:	e025      	b.n	800c918 <OutputDbgTrace+0xa0>
          break;
 800c8cc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c8ce:	e023      	b.n	800c918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c8d4:	e020      	b.n	800c918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	7a5b      	ldrb	r3, [r3, #9]
 800c8de:	2b0e      	cmp	r3, #14
 800c8e0:	d001      	beq.n	800c8e6 <OutputDbgTrace+0x6e>
 800c8e2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c8e4:	e000      	b.n	800c8e8 <OutputDbgTrace+0x70>
          break;
 800c8e6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c8e8:	e016      	b.n	800c918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	7a5b      	ldrb	r3, [r3, #9]
 800c8f2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c8f4:	e010      	b.n	800c918 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c8fa:	e00d      	b.n	800c918 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7a5b      	ldrb	r3, [r3, #9]
 800c904:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c906:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c908:	e006      	b.n	800c918 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	7a5b      	ldrb	r3, [r3, #9]
 800c912:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c914:	e000      	b.n	800c918 <OutputDbgTrace+0xa0>

    default:
      break;
 800c916:	bf00      	nop
  }

  return;
 800c918:	bf00      	nop
}
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800c92a:	f001 fbf7 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c92e:	f001 fb87 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800c932:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f062 0236 	orn	r2, r2, #54	; 0x36
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	2200      	movs	r2, #0
 800c940:	705a      	strb	r2, [r3, #1]
 800c942:	2200      	movs	r2, #0
 800c944:	709a      	strb	r2, [r3, #2]
 800c946:	2200      	movs	r2, #0
 800c948:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	711a      	strb	r2, [r3, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	715a      	strb	r2, [r3, #5]
 800c954:	2200      	movs	r2, #0
 800c956:	719a      	strb	r2, [r3, #6]
 800c958:	2200      	movs	r2, #0
 800c95a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c95c:	f001 fbb8 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c960:	f001 fb7a 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c964:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c97a:	f001 fbcf 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c97e:	f001 fb5f 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800c982:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	f062 0234 	orn	r2, r2, #52	; 0x34
 800c98c:	701a      	strb	r2, [r3, #0]
 800c98e:	2200      	movs	r2, #0
 800c990:	705a      	strb	r2, [r3, #1]
 800c992:	2200      	movs	r2, #0
 800c994:	709a      	strb	r2, [r3, #2]
 800c996:	2200      	movs	r2, #0
 800c998:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	711a      	strb	r2, [r3, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	715a      	strb	r2, [r3, #5]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	719a      	strb	r2, [r3, #6]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c9ac:	f001 fb90 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9b0:	f001 fb52 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9b4:	60f8      	str	r0, [r7, #12]
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800c9cc:	f001 fba6 	bl	800e11c <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800c9d0:	4a15      	ldr	r2, [pc, #84]	; (800ca28 <otSetStateChangedCallback+0x68>)
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9d6:	f001 fb33 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800c9da:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f062 0233 	orn	r2, r2, #51	; 0x33
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	705a      	strb	r2, [r3, #1]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	709a      	strb	r2, [r3, #2]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f042 0201 	orr.w	r2, r2, #1
 800c9fa:	711a      	strb	r2, [r3, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	715a      	strb	r2, [r3, #5]
 800ca00:	2200      	movs	r2, #0
 800ca02:	719a      	strb	r2, [r3, #6]
 800ca04:	2200      	movs	r2, #0
 800ca06:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ca0e:	f001 fb5f 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca12:	f001 fb21 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca16:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	b2db      	uxtb	r3, r3
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3718      	adds	r7, #24
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200004e8 	.word	0x200004e8

0800ca2c <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ca34:	f001 fb72 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca38:	f001 fb02 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800ca3c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f062 022d 	orn	r2, r2, #45	; 0x2d
 800ca46:	701a      	strb	r2, [r3, #0]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	705a      	strb	r2, [r3, #1]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	709a      	strb	r2, [r3, #2]
 800ca50:	2200      	movs	r2, #0
 800ca52:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	711a      	strb	r2, [r3, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	715a      	strb	r2, [r3, #5]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	719a      	strb	r2, [r3, #6]
 800ca62:	2200      	movs	r2, #0
 800ca64:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ca66:	f001 fb33 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca6a:	f001 faf5 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca6e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	b2db      	uxtb	r3, r3
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800ca8a:	f001 fb47 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca8e:	f001 fad7 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800ca92:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800ca9c:	701a      	strb	r2, [r3, #0]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	705a      	strb	r2, [r3, #1]
 800caa2:	2200      	movs	r2, #0
 800caa4:	709a      	strb	r2, [r3, #2]
 800caa6:	2200      	movs	r2, #0
 800caa8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f042 0201 	orr.w	r2, r2, #1
 800cab2:	711a      	strb	r2, [r3, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	715a      	strb	r2, [r3, #5]
 800cab8:	2200      	movs	r2, #0
 800caba:	719a      	strb	r2, [r3, #6]
 800cabc:	2200      	movs	r2, #0
 800cabe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800cac0:	78fa      	ldrb	r2, [r7, #3]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cac6:	f001 fb03 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800caca:	f001 fac5 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cace:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	b2db      	uxtb	r3, r3
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <otIp6AddUnicastAddress>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

otError otIp6AddUnicastAddress(otInstance *aInstance, const otNetifAddress *aAddress)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cae8:	f001 fb18 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800caec:	f001 faa8 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800caf0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADD_UNICAST_ADDRESS;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	2200      	movs	r2, #0
 800cafe:	705a      	strb	r2, [r3, #1]
 800cb00:	2200      	movs	r2, #0
 800cb02:	709a      	strb	r2, [r3, #2]
 800cb04:	2200      	movs	r2, #0
 800cb06:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f042 0201 	orr.w	r2, r2, #1
 800cb10:	711a      	strb	r2, [r3, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	715a      	strb	r2, [r3, #5]
 800cb16:	2200      	movs	r2, #0
 800cb18:	719a      	strb	r2, [r3, #6]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aAddress;
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cb24:	f001 fad4 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb28:	f001 fa96 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb2c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	b2db      	uxtb	r3, r3
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

otError otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cb46:	f001 fae9 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb4a:	f001 fa79 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800cb4e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	705a      	strb	r2, [r3, #1]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	709a      	strb	r2, [r3, #2]
 800cb62:	2200      	movs	r2, #0
 800cb64:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f042 0202 	orr.w	r2, r2, #2
 800cb6e:	711a      	strb	r2, [r3, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	715a      	strb	r2, [r3, #5]
 800cb74:	2200      	movs	r2, #0
 800cb76:	719a      	strb	r2, [r3, #6]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800cb88:	f001 faa2 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb8c:	f001 fa64 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb90:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	b2db      	uxtb	r3, r3
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cbac:	f001 fab6 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cbb0:	f001 fa46 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800cbb4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f042 0207 	orr.w	r2, r2, #7
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	705a      	strb	r2, [r3, #1]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	709a      	strb	r2, [r3, #2]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f042 0201 	orr.w	r2, r2, #1
 800cbd4:	711a      	strb	r2, [r3, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	715a      	strb	r2, [r3, #5]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	719a      	strb	r2, [r3, #6]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800cbe2:	78fa      	ldrb	r2, [r7, #3]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cbe8:	f001 fa72 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cbec:	f001 fa34 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbf0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	b2db      	uxtb	r3, r3
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800cc0c:	f001 fa86 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc10:	f001 fa16 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800cc14:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f042 020e 	orr.w	r2, r2, #14
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	2200      	movs	r2, #0
 800cc22:	705a      	strb	r2, [r3, #1]
 800cc24:	2200      	movs	r2, #0
 800cc26:	709a      	strb	r2, [r3, #2]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f042 0201 	orr.w	r2, r2, #1
 800cc34:	711a      	strb	r2, [r3, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	715a      	strb	r2, [r3, #5]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	719a      	strb	r2, [r3, #6]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800cc42:	887a      	ldrh	r2, [r7, #2]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cc48:	f001 fa42 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc4c:	f001 fa04 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc50:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	b2db      	uxtb	r3, r3
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cc68:	f001 fa58 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc6c:	f001 f9e8 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800cc70:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f042 0218 	orr.w	r2, r2, #24
 800cc7a:	701a      	strb	r2, [r3, #0]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f042 0201 	orr.w	r2, r2, #1
 800cc82:	705a      	strb	r2, [r3, #1]
 800cc84:	2200      	movs	r2, #0
 800cc86:	709a      	strb	r2, [r3, #2]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f042 0201 	orr.w	r2, r2, #1
 800cc94:	711a      	strb	r2, [r3, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	715a      	strb	r2, [r3, #5]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	719a      	strb	r2, [r3, #6]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cca8:	f001 fa12 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ccac:	f001 f9d4 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ccb0:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	b29b      	uxth	r3, r3
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <otMessageRead>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	461a      	mov	r2, r3
 800cccc:	460b      	mov	r3, r1
 800ccce:	817b      	strh	r3, [r7, #10]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800ccd4:	f001 fa22 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccd8:	f001 f9b2 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800ccdc:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f042 021e 	orr.w	r2, r2, #30
 800cce6:	701a      	strb	r2, [r3, #0]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f042 0201 	orr.w	r2, r2, #1
 800ccee:	705a      	strb	r2, [r3, #1]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	709a      	strb	r2, [r3, #2]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f042 0204 	orr.w	r2, r2, #4
 800cd00:	711a      	strb	r2, [r3, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	715a      	strb	r2, [r3, #5]
 800cd06:	2200      	movs	r2, #0
 800cd08:	719a      	strb	r2, [r3, #6]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800cd14:	897a      	ldrh	r2, [r7, #10]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800cd20:	893a      	ldrh	r2, [r7, #8]
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800cd26:	f001 f9d3 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd2a:	f001 f995 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd2e:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	b29b      	uxth	r3, r3
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800cd40:	b5b0      	push	{r4, r5, r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800cd4a:	f001 f991 	bl	800e070 <THREAD_Get_NotificationPayloadBuffer>
 800cd4e:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2b3d      	cmp	r3, #61	; 0x3d
 800cd58:	f200 83e6 	bhi.w	800d528 <OpenThread_CallBack_Processing+0x7e8>
 800cd5c:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <OpenThread_CallBack_Processing+0x24>)
 800cd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd62:	bf00      	nop
 800cd64:	0800d03f 	.word	0x0800d03f
 800cd68:	0800d0dd 	.word	0x0800d0dd
 800cd6c:	0800d135 	.word	0x0800d135
 800cd70:	0800d1e1 	.word	0x0800d1e1
 800cd74:	0800d1ed 	.word	0x0800d1ed
 800cd78:	0800d20b 	.word	0x0800d20b
 800cd7c:	0800d529 	.word	0x0800d529
 800cd80:	0800d235 	.word	0x0800d235
 800cd84:	0800d24f 	.word	0x0800d24f
 800cd88:	0800d283 	.word	0x0800d283
 800cd8c:	0800d2a1 	.word	0x0800d2a1
 800cd90:	0800d2bf 	.word	0x0800d2bf
 800cd94:	0800d529 	.word	0x0800d529
 800cd98:	0800d2e9 	.word	0x0800d2e9
 800cd9c:	0800d307 	.word	0x0800d307
 800cda0:	0800d36d 	.word	0x0800d36d
 800cda4:	0800d38d 	.word	0x0800d38d
 800cda8:	0800d3ab 	.word	0x0800d3ab
 800cdac:	0800d529 	.word	0x0800d529
 800cdb0:	0800d3d3 	.word	0x0800d3d3
 800cdb4:	0800d3fb 	.word	0x0800d3fb
 800cdb8:	0800d419 	.word	0x0800d419
 800cdbc:	0800d43d 	.word	0x0800d43d
 800cdc0:	0800d467 	.word	0x0800d467
 800cdc4:	0800cec3 	.word	0x0800cec3
 800cdc8:	0800cee5 	.word	0x0800cee5
 800cdcc:	0800cf07 	.word	0x0800cf07
 800cdd0:	0800cf2f 	.word	0x0800cf2f
 800cdd4:	0800d529 	.word	0x0800d529
 800cdd8:	0800d487 	.word	0x0800d487
 800cddc:	0800d529 	.word	0x0800d529
 800cde0:	0800d529 	.word	0x0800d529
 800cde4:	0800d529 	.word	0x0800d529
 800cde8:	0800d529 	.word	0x0800d529
 800cdec:	0800d529 	.word	0x0800d529
 800cdf0:	0800d113 	.word	0x0800d113
 800cdf4:	0800d173 	.word	0x0800d173
 800cdf8:	0800d199 	.word	0x0800d199
 800cdfc:	0800d1bf 	.word	0x0800d1bf
 800ce00:	0800d4a9 	.word	0x0800d4a9
 800ce04:	0800d4e7 	.word	0x0800d4e7
 800ce08:	0800d4fd 	.word	0x0800d4fd
 800ce0c:	0800d05b 	.word	0x0800d05b
 800ce10:	0800d529 	.word	0x0800d529
 800ce14:	0800cf57 	.word	0x0800cf57
 800ce18:	0800cf75 	.word	0x0800cf75
 800ce1c:	0800cf93 	.word	0x0800cf93
 800ce20:	0800cfb1 	.word	0x0800cfb1
 800ce24:	0800cfd3 	.word	0x0800cfd3
 800ce28:	0800cff5 	.word	0x0800cff5
 800ce2c:	0800d529 	.word	0x0800d529
 800ce30:	0800d529 	.word	0x0800d529
 800ce34:	0800ce5d 	.word	0x0800ce5d
 800ce38:	0800ce7f 	.word	0x0800ce7f
 800ce3c:	0800cea1 	.word	0x0800cea1
 800ce40:	0800d529 	.word	0x0800d529
 800ce44:	0800d529 	.word	0x0800d529
 800ce48:	0800d529 	.word	0x0800d529
 800ce4c:	0800d529 	.word	0x0800d529
 800ce50:	0800d017 	.word	0x0800d017
 800ce54:	0800d529 	.word	0x0800d529
 800ce58:	0800d079 	.word	0x0800d079
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800ce5c:	4b8e      	ldr	r3, [pc, #568]	; (800d098 <OpenThread_CallBack_Processing+0x358>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 8364 	beq.w	800d52e <OpenThread_CallBack_Processing+0x7ee>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800ce66:	4b8c      	ldr	r3, [pc, #560]	; (800d098 <OpenThread_CallBack_Processing+0x358>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	6892      	ldr	r2, [r2, #8]
 800ce6e:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800ce74:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800ce7a:	4798      	blx	r3
    }
    break;
 800ce7c:	e357      	b.n	800d52e <OpenThread_CallBack_Processing+0x7ee>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800ce7e:	4b87      	ldr	r3, [pc, #540]	; (800d09c <OpenThread_CallBack_Processing+0x35c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 8355 	beq.w	800d532 <OpenThread_CallBack_Processing+0x7f2>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800ce88:	4b84      	ldr	r3, [pc, #528]	; (800d09c <OpenThread_CallBack_Processing+0x35c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	6892      	ldr	r2, [r2, #8]
 800ce90:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800ce96:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800ce9c:	4798      	blx	r3
    }
    break;
 800ce9e:	e348      	b.n	800d532 <OpenThread_CallBack_Processing+0x7f2>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800cea0:	4b7f      	ldr	r3, [pc, #508]	; (800d0a0 <OpenThread_CallBack_Processing+0x360>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 8346 	beq.w	800d536 <OpenThread_CallBack_Processing+0x7f6>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800ceaa:	4b7d      	ldr	r3, [pc, #500]	; (800d0a0 <OpenThread_CallBack_Processing+0x360>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	6892      	ldr	r2, [r2, #8]
 800ceb2:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800ceb8:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800cebe:	4798      	blx	r3
    }
    break;
 800cec0:	e339      	b.n	800d536 <OpenThread_CallBack_Processing+0x7f6>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800cec2:	4b78      	ldr	r3, [pc, #480]	; (800d0a4 <OpenThread_CallBack_Processing+0x364>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 8337 	beq.w	800d53a <OpenThread_CallBack_Processing+0x7fa>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800cecc:	4b75      	ldr	r3, [pc, #468]	; (800d0a4 <OpenThread_CallBack_Processing+0x364>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	6892      	ldr	r2, [r2, #8]
 800ced4:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800ceda:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800cee0:	4798      	blx	r3
    }
    break;
 800cee2:	e32a      	b.n	800d53a <OpenThread_CallBack_Processing+0x7fa>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800cee4:	4b70      	ldr	r3, [pc, #448]	; (800d0a8 <OpenThread_CallBack_Processing+0x368>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 8328 	beq.w	800d53e <OpenThread_CallBack_Processing+0x7fe>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800ceee:	4b6e      	ldr	r3, [pc, #440]	; (800d0a8 <OpenThread_CallBack_Processing+0x368>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	6892      	ldr	r2, [r2, #8]
 800cef6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800cefc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800cf02:	4798      	blx	r3
    }
    break;
 800cf04:	e31b      	b.n	800d53e <OpenThread_CallBack_Processing+0x7fe>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800cf06:	4b69      	ldr	r3, [pc, #420]	; (800d0ac <OpenThread_CallBack_Processing+0x36c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8319 	beq.w	800d542 <OpenThread_CallBack_Processing+0x802>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800cf10:	4b66      	ldr	r3, [pc, #408]	; (800d0ac <OpenThread_CallBack_Processing+0x36c>)
 800cf12:	681c      	ldr	r4, [r3, #0]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800cf1e:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800cf24:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800cf2a:	47a0      	blx	r4
    }
    break;
 800cf2c:	e309      	b.n	800d542 <OpenThread_CallBack_Processing+0x802>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800cf2e:	4b60      	ldr	r3, [pc, #384]	; (800d0b0 <OpenThread_CallBack_Processing+0x370>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 8307 	beq.w	800d546 <OpenThread_CallBack_Processing+0x806>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800cf38:	4b5d      	ldr	r3, [pc, #372]	; (800d0b0 <OpenThread_CallBack_Processing+0x370>)
 800cf3a:	681c      	ldr	r4, [r3, #0]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800cf46:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800cf4c:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800cf52:	47a0      	blx	r4
    }
    break;
 800cf54:	e2f7      	b.n	800d546 <OpenThread_CallBack_Processing+0x806>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800cf56:	4b57      	ldr	r3, [pc, #348]	; (800d0b4 <OpenThread_CallBack_Processing+0x374>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 82f5 	beq.w	800d54a <OpenThread_CallBack_Processing+0x80a>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800cf60:	4b54      	ldr	r3, [pc, #336]	; (800d0b4 <OpenThread_CallBack_Processing+0x374>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	6892      	ldr	r2, [r2, #8]
 800cf68:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4798      	blx	r3
    }
    break;
 800cf72:	e2ea      	b.n	800d54a <OpenThread_CallBack_Processing+0x80a>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800cf74:	4b50      	ldr	r3, [pc, #320]	; (800d0b8 <OpenThread_CallBack_Processing+0x378>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 82e8 	beq.w	800d54e <OpenThread_CallBack_Processing+0x80e>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800cf7e:	4b4e      	ldr	r3, [pc, #312]	; (800d0b8 <OpenThread_CallBack_Processing+0x378>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	6892      	ldr	r2, [r2, #8]
 800cf86:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4798      	blx	r3
    }
    break;
 800cf90:	e2dd      	b.n	800d54e <OpenThread_CallBack_Processing+0x80e>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800cf92:	4b4a      	ldr	r3, [pc, #296]	; (800d0bc <OpenThread_CallBack_Processing+0x37c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 82db 	beq.w	800d552 <OpenThread_CallBack_Processing+0x812>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800cf9c:	4b47      	ldr	r3, [pc, #284]	; (800d0bc <OpenThread_CallBack_Processing+0x37c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	6892      	ldr	r2, [r2, #8]
 800cfa4:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4798      	blx	r3
    }
    break;
 800cfae:	e2d0      	b.n	800d552 <OpenThread_CallBack_Processing+0x812>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800cfb0:	4b43      	ldr	r3, [pc, #268]	; (800d0c0 <OpenThread_CallBack_Processing+0x380>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 82ce 	beq.w	800d556 <OpenThread_CallBack_Processing+0x816>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800cfba:	4b41      	ldr	r3, [pc, #260]	; (800d0c0 <OpenThread_CallBack_Processing+0x380>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	6892      	ldr	r2, [r2, #8]
 800cfc2:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800cfc4:	683a      	ldr	r2, [r7, #0]
 800cfc6:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800cfc8:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800cfce:	4798      	blx	r3
    }
    break;
 800cfd0:	e2c1      	b.n	800d556 <OpenThread_CallBack_Processing+0x816>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800cfd2:	4b3c      	ldr	r3, [pc, #240]	; (800d0c4 <OpenThread_CallBack_Processing+0x384>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 82bf 	beq.w	800d55a <OpenThread_CallBack_Processing+0x81a>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800cfdc:	4b39      	ldr	r3, [pc, #228]	; (800d0c4 <OpenThread_CallBack_Processing+0x384>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	6892      	ldr	r2, [r2, #8]
 800cfe4:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800cfea:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800cff0:	4798      	blx	r3
    }
    break;
 800cff2:	e2b2      	b.n	800d55a <OpenThread_CallBack_Processing+0x81a>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800cff4:	4b33      	ldr	r3, [pc, #204]	; (800d0c4 <OpenThread_CallBack_Processing+0x384>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 82b0 	beq.w	800d55e <OpenThread_CallBack_Processing+0x81e>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800cffe:	4b32      	ldr	r3, [pc, #200]	; (800d0c8 <OpenThread_CallBack_Processing+0x388>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	6892      	ldr	r2, [r2, #8]
 800d006:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800d00c:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800d012:	4798      	blx	r3
    }
    break;
 800d014:	e2a3      	b.n	800d55e <OpenThread_CallBack_Processing+0x81e>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_SRP_SERVER_SERVICE_UPDATE_HANDLER_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800d016:	4b2d      	ldr	r3, [pc, #180]	; (800d0cc <OpenThread_CallBack_Processing+0x38c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 82a1 	beq.w	800d562 <OpenThread_CallBack_Processing+0x822>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800d020:	4b2a      	ldr	r3, [pc, #168]	; (800d0cc <OpenThread_CallBack_Processing+0x38c>)
 800d022:	681c      	ldr	r4, [r3, #0]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800d02e:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800d034:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800d03a:	47a0      	blx	r4
    }
    break;
 800d03c:	e291      	b.n	800d562 <OpenThread_CallBack_Processing+0x822>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800d03e:	4b24      	ldr	r3, [pc, #144]	; (800d0d0 <OpenThread_CallBack_Processing+0x390>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 828f 	beq.w	800d566 <OpenThread_CallBack_Processing+0x826>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800d048:	4b21      	ldr	r3, [pc, #132]	; (800d0d0 <OpenThread_CallBack_Processing+0x390>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800d054:	4611      	mov	r1, r2
 800d056:	4798      	blx	r3
    }
    break;
 800d058:	e285      	b.n	800d566 <OpenThread_CallBack_Processing+0x826>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800d05a:	4b1e      	ldr	r3, [pc, #120]	; (800d0d4 <OpenThread_CallBack_Processing+0x394>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 8283 	beq.w	800d56a <OpenThread_CallBack_Processing+0x82a>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800d064:	4b1b      	ldr	r3, [pc, #108]	; (800d0d4 <OpenThread_CallBack_Processing+0x394>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	6892      	ldr	r2, [r2, #8]
 800d06c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800d072:	4611      	mov	r1, r2
 800d074:	4798      	blx	r3
    }
    break;
 800d076:	e278      	b.n	800d56a <OpenThread_CallBack_Processing+0x82a>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800d078:	4b17      	ldr	r3, [pc, #92]	; (800d0d8 <OpenThread_CallBack_Processing+0x398>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 8276 	beq.w	800d56e <OpenThread_CallBack_Processing+0x82e>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800d082:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <OpenThread_CallBack_Processing+0x398>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	6892      	ldr	r2, [r2, #8]
 800d08a:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800d090:	4611      	mov	r1, r2
 800d092:	4798      	blx	r3
    }
    break;
 800d094:	e26b      	b.n	800d56e <OpenThread_CallBack_Processing+0x82e>
 800d096:	bf00      	nop
 800d098:	20000578 	.word	0x20000578
 800d09c:	20000580 	.word	0x20000580
 800d0a0:	2000057c 	.word	0x2000057c
 800d0a4:	20000510 	.word	0x20000510
 800d0a8:	2000050c 	.word	0x2000050c
 800d0ac:	20000514 	.word	0x20000514
 800d0b0:	20000508 	.word	0x20000508
 800d0b4:	20000584 	.word	0x20000584
 800d0b8:	20000588 	.word	0x20000588
 800d0bc:	2000058c 	.word	0x2000058c
 800d0c0:	20000594 	.word	0x20000594
 800d0c4:	20000590 	.word	0x20000590
 800d0c8:	20000598 	.word	0x20000598
 800d0cc:	2000059c 	.word	0x2000059c
 800d0d0:	200004e8 	.word	0x200004e8
 800d0d4:	20000518 	.word	0x20000518
 800d0d8:	2000051c 	.word	0x2000051c
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	4b92      	ldr	r3, [pc, #584]	; (800d32c <OpenThread_CallBack_Processing+0x5ec>)
 800d0e4:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800d0e6:	4b91      	ldr	r3, [pc, #580]	; (800d32c <OpenThread_CallBack_Processing+0x5ec>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	4a90      	ldr	r2, [pc, #576]	; (800d330 <OpenThread_CallBack_Processing+0x5f0>)
 800d0ee:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800d0f0:	4b8f      	ldr	r3, [pc, #572]	; (800d330 <OpenThread_CallBack_Processing+0x5f0>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 823c 	beq.w	800d572 <OpenThread_CallBack_Processing+0x832>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800d0fa:	4b8d      	ldr	r3, [pc, #564]	; (800d330 <OpenThread_CallBack_Processing+0x5f0>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a8b      	ldr	r2, [pc, #556]	; (800d32c <OpenThread_CallBack_Processing+0x5ec>)
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800d108:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800d10e:	4798      	blx	r3
    }
    break;
 800d110:	e22f      	b.n	800d572 <OpenThread_CallBack_Processing+0x832>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800d112:	4b88      	ldr	r3, [pc, #544]	; (800d334 <OpenThread_CallBack_Processing+0x5f4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 822d 	beq.w	800d576 <OpenThread_CallBack_Processing+0x836>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d11c:	4b85      	ldr	r3, [pc, #532]	; (800d334 <OpenThread_CallBack_Processing+0x5f4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	6892      	ldr	r2, [r2, #8]
 800d124:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d12a:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d130:	4798      	blx	r3
    }
    break;
 800d132:	e220      	b.n	800d576 <OpenThread_CallBack_Processing+0x836>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	461a      	mov	r2, r3
 800d13a:	4b7f      	ldr	r3, [pc, #508]	; (800d338 <OpenThread_CallBack_Processing+0x5f8>)
 800d13c:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d13e:	4b7e      	ldr	r3, [pc, #504]	; (800d338 <OpenThread_CallBack_Processing+0x5f8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	4a7d      	ldr	r2, [pc, #500]	; (800d33c <OpenThread_CallBack_Processing+0x5fc>)
 800d146:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800d148:	4b7c      	ldr	r3, [pc, #496]	; (800d33c <OpenThread_CallBack_Processing+0x5fc>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8214 	beq.w	800d57a <OpenThread_CallBack_Processing+0x83a>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d152:	4b7a      	ldr	r3, [pc, #488]	; (800d33c <OpenThread_CallBack_Processing+0x5fc>)
 800d154:	681c      	ldr	r4, [r3, #0]
 800d156:	4b78      	ldr	r3, [pc, #480]	; (800d338 <OpenThread_CallBack_Processing+0x5f8>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d160:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d166:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	47a0      	blx	r4
    }
    break;
 800d170:	e203      	b.n	800d57a <OpenThread_CallBack_Processing+0x83a>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800d172:	4b73      	ldr	r3, [pc, #460]	; (800d340 <OpenThread_CallBack_Processing+0x600>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f000 8201 	beq.w	800d57e <OpenThread_CallBack_Processing+0x83e>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800d17c:	4b70      	ldr	r3, [pc, #448]	; (800d340 <OpenThread_CallBack_Processing+0x600>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	6892      	ldr	r2, [r2, #8]
 800d184:	2a00      	cmp	r2, #0
 800d186:	bf14      	ite	ne
 800d188:	2201      	movne	r2, #1
 800d18a:	2200      	moveq	r2, #0
 800d18c:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800d192:	4611      	mov	r1, r2
 800d194:	4798      	blx	r3
    }
    break;
 800d196:	e1f2      	b.n	800d57e <OpenThread_CallBack_Processing+0x83e>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800d198:	4b69      	ldr	r3, [pc, #420]	; (800d340 <OpenThread_CallBack_Processing+0x600>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 81f0 	beq.w	800d582 <OpenThread_CallBack_Processing+0x842>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800d1a2:	4b67      	ldr	r3, [pc, #412]	; (800d340 <OpenThread_CallBack_Processing+0x600>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	6892      	ldr	r2, [r2, #8]
 800d1aa:	2a00      	cmp	r2, #0
 800d1ac:	bf14      	ite	ne
 800d1ae:	2201      	movne	r2, #1
 800d1b0:	2200      	moveq	r2, #0
 800d1b2:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4798      	blx	r3
    }
    break;
 800d1bc:	e1e1      	b.n	800d582 <OpenThread_CallBack_Processing+0x842>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800d1be:	4b61      	ldr	r3, [pc, #388]	; (800d344 <OpenThread_CallBack_Processing+0x604>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 81df 	beq.w	800d586 <OpenThread_CallBack_Processing+0x846>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800d1c8:	4b5e      	ldr	r3, [pc, #376]	; (800d344 <OpenThread_CallBack_Processing+0x604>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	6892      	ldr	r2, [r2, #8]
 800d1d0:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800d1d6:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800d1dc:	4798      	blx	r3
    }
    break;
 800d1de:	e1d2      	b.n	800d586 <OpenThread_CallBack_Processing+0x846>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	f7fe ff39 	bl	800c058 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800d1e6:	f7f4 fd88 	bl	8001cfa <HAL_NVIC_SystemReset>
    break;
 800d1ea:	e1f7      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800d1ec:	4b56      	ldr	r3, [pc, #344]	; (800d348 <OpenThread_CallBack_Processing+0x608>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 81ca 	beq.w	800d58a <OpenThread_CallBack_Processing+0x84a>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d1f6:	4b54      	ldr	r3, [pc, #336]	; (800d348 <OpenThread_CallBack_Processing+0x608>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	6892      	ldr	r2, [r2, #8]
 800d1fe:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d204:	4611      	mov	r1, r2
 800d206:	4798      	blx	r3
    }
    break;
 800d208:	e1bf      	b.n	800d58a <OpenThread_CallBack_Processing+0x84a>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800d20a:	4b50      	ldr	r3, [pc, #320]	; (800d34c <OpenThread_CallBack_Processing+0x60c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 81bd 	beq.w	800d58e <OpenThread_CallBack_Processing+0x84e>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800d214:	4b4d      	ldr	r3, [pc, #308]	; (800d34c <OpenThread_CallBack_Processing+0x60c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	6892      	ldr	r2, [r2, #8]
 800d21c:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800d222:	2a00      	cmp	r2, #0
 800d224:	bf14      	ite	ne
 800d226:	2201      	movne	r2, #1
 800d228:	2200      	moveq	r2, #0
 800d22a:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800d230:	4798      	blx	r3
    }
    break;
 800d232:	e1ac      	b.n	800d58e <OpenThread_CallBack_Processing+0x84e>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800d234:	4b46      	ldr	r3, [pc, #280]	; (800d350 <OpenThread_CallBack_Processing+0x610>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 81aa 	beq.w	800d592 <OpenThread_CallBack_Processing+0x852>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800d23e:	4b44      	ldr	r3, [pc, #272]	; (800d350 <OpenThread_CallBack_Processing+0x610>)
 800d240:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800d246:	4611      	mov	r1, r2
 800d248:	2000      	movs	r0, #0
 800d24a:	4798      	blx	r3
    }
    break;
 800d24c:	e1a1      	b.n	800d592 <OpenThread_CallBack_Processing+0x852>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800d24e:	4b41      	ldr	r3, [pc, #260]	; (800d354 <OpenThread_CallBack_Processing+0x614>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 819f 	beq.w	800d596 <OpenThread_CallBack_Processing+0x856>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800d258:	4b3e      	ldr	r3, [pc, #248]	; (800d354 <OpenThread_CallBack_Processing+0x614>)
 800d25a:	681c      	ldr	r4, [r3, #0]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800d266:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800d26c:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800d272:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	462b      	mov	r3, r5
 800d27e:	47a0      	blx	r4
    }
    break;
 800d280:	e189      	b.n	800d596 <OpenThread_CallBack_Processing+0x856>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800d282:	4b35      	ldr	r3, [pc, #212]	; (800d358 <OpenThread_CallBack_Processing+0x618>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 8187 	beq.w	800d59a <OpenThread_CallBack_Processing+0x85a>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d28c:	4b32      	ldr	r3, [pc, #200]	; (800d358 <OpenThread_CallBack_Processing+0x618>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	6892      	ldr	r2, [r2, #8]
 800d294:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d29a:	4611      	mov	r1, r2
 800d29c:	4798      	blx	r3
    }
    break;
 800d29e:	e17c      	b.n	800d59a <OpenThread_CallBack_Processing+0x85a>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800d2a0:	4b2e      	ldr	r3, [pc, #184]	; (800d35c <OpenThread_CallBack_Processing+0x61c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 817a 	beq.w	800d59e <OpenThread_CallBack_Processing+0x85e>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d2aa:	4b2c      	ldr	r3, [pc, #176]	; (800d35c <OpenThread_CallBack_Processing+0x61c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	6892      	ldr	r2, [r2, #8]
 800d2b2:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	4798      	blx	r3
    }
    break;
 800d2bc:	e16f      	b.n	800d59e <OpenThread_CallBack_Processing+0x85e>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800d2be:	4b28      	ldr	r3, [pc, #160]	; (800d360 <OpenThread_CallBack_Processing+0x620>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 816d 	beq.w	800d5a2 <OpenThread_CallBack_Processing+0x862>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d2c8:	4b25      	ldr	r3, [pc, #148]	; (800d360 <OpenThread_CallBack_Processing+0x620>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	6892      	ldr	r2, [r2, #8]
 800d2d0:	4610      	mov	r0, r2
          p_notification->Data[1],
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	bf14      	ite	ne
 800d2da:	2201      	movne	r2, #1
 800d2dc:	2200      	moveq	r2, #0
 800d2de:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d2e4:	4798      	blx	r3
    }
    break;
 800d2e6:	e15c      	b.n	800d5a2 <OpenThread_CallBack_Processing+0x862>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800d2e8:	4b1e      	ldr	r3, [pc, #120]	; (800d364 <OpenThread_CallBack_Processing+0x624>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 815a 	beq.w	800d5a6 <OpenThread_CallBack_Processing+0x866>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800d2f2:	4b1c      	ldr	r3, [pc, #112]	; (800d364 <OpenThread_CallBack_Processing+0x624>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	6892      	ldr	r2, [r2, #8]
 800d2fa:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800d300:	4611      	mov	r1, r2
 800d302:	4798      	blx	r3
    }
    break;
 800d304:	e14f      	b.n	800d5a6 <OpenThread_CallBack_Processing+0x866>
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800d306:	4b18      	ldr	r3, [pc, #96]	; (800d368 <OpenThread_CallBack_Processing+0x628>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 814d 	beq.w	800d5aa <OpenThread_CallBack_Processing+0x86a>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d310:	4b15      	ldr	r3, [pc, #84]	; (800d368 <OpenThread_CallBack_Processing+0x628>)
 800d312:	681c      	ldr	r4, [r3, #0]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d31c:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d322:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d328:	47a0      	blx	r4
    }
    break;
 800d32a:	e13e      	b.n	800d5aa <OpenThread_CallBack_Processing+0x86a>
 800d32c:	20000560 	.word	0x20000560
 800d330:	20000554 	.word	0x20000554
 800d334:	20000558 	.word	0x20000558
 800d338:	20000564 	.word	0x20000564
 800d33c:	2000055c 	.word	0x2000055c
 800d340:	2000056c 	.word	0x2000056c
 800d344:	20000568 	.word	0x20000568
 800d348:	200004f0 	.word	0x200004f0
 800d34c:	200004f4 	.word	0x200004f4
 800d350:	200004ec 	.word	0x200004ec
 800d354:	200004f8 	.word	0x200004f8
 800d358:	200004fc 	.word	0x200004fc
 800d35c:	20000500 	.word	0x20000500
 800d360:	20000504 	.word	0x20000504
 800d364:	20000520 	.word	0x20000520
 800d368:	2000052c 	.word	0x2000052c
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800d36c:	4b9f      	ldr	r3, [pc, #636]	; (800d5ec <OpenThread_CallBack_Processing+0x8ac>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 811c 	beq.w	800d5ae <OpenThread_CallBack_Processing+0x86e>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800d376:	4b9d      	ldr	r3, [pc, #628]	; (800d5ec <OpenThread_CallBack_Processing+0x8ac>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	6892      	ldr	r2, [r2, #8]
 800d37e:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800d388:	4798      	blx	r3
    }
    break;
 800d38a:	e110      	b.n	800d5ae <OpenThread_CallBack_Processing+0x86e>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800d38c:	4b98      	ldr	r3, [pc, #608]	; (800d5f0 <OpenThread_CallBack_Processing+0x8b0>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 810e 	beq.w	800d5b2 <OpenThread_CallBack_Processing+0x872>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800d396:	4b96      	ldr	r3, [pc, #600]	; (800d5f0 <OpenThread_CallBack_Processing+0x8b0>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	6892      	ldr	r2, [r2, #8]
 800d39e:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	4798      	blx	r3
    }
    break;
 800d3a8:	e103      	b.n	800d5b2 <OpenThread_CallBack_Processing+0x872>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800d3aa:	4b92      	ldr	r3, [pc, #584]	; (800d5f4 <OpenThread_CallBack_Processing+0x8b4>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8101 	beq.w	800d5b6 <OpenThread_CallBack_Processing+0x876>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800d3b4:	4b8f      	ldr	r3, [pc, #572]	; (800d5f4 <OpenThread_CallBack_Processing+0x8b4>)
 800d3b6:	681c      	ldr	r4, [r3, #0]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800d3c2:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800d3c8:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800d3ce:	47a0      	blx	r4
    }
    break;
 800d3d0:	e0f1      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x876>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800d3d2:	4b89      	ldr	r3, [pc, #548]	; (800d5f8 <OpenThread_CallBack_Processing+0x8b8>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 80ef 	beq.w	800d5ba <OpenThread_CallBack_Processing+0x87a>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d3dc:	4b86      	ldr	r3, [pc, #536]	; (800d5f8 <OpenThread_CallBack_Processing+0x8b8>)
 800d3de:	681c      	ldr	r4, [r3, #0]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d3ea:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d3f0:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d3f6:	47a0      	blx	r4
    }
    break;
 800d3f8:	e0df      	b.n	800d5ba <OpenThread_CallBack_Processing+0x87a>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800d3fa:	4b80      	ldr	r3, [pc, #512]	; (800d5fc <OpenThread_CallBack_Processing+0x8bc>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80dd 	beq.w	800d5be <OpenThread_CallBack_Processing+0x87e>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800d404:	4b7d      	ldr	r3, [pc, #500]	; (800d5fc <OpenThread_CallBack_Processing+0x8bc>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	6892      	ldr	r2, [r2, #8]
 800d40c:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800d412:	4611      	mov	r1, r2
 800d414:	4798      	blx	r3
    }
    break;
 800d416:	e0d2      	b.n	800d5be <OpenThread_CallBack_Processing+0x87e>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800d418:	4b79      	ldr	r3, [pc, #484]	; (800d600 <OpenThread_CallBack_Processing+0x8c0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 80d0 	beq.w	800d5c2 <OpenThread_CallBack_Processing+0x882>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d422:	4b77      	ldr	r3, [pc, #476]	; (800d600 <OpenThread_CallBack_Processing+0x8c0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	6892      	ldr	r2, [r2, #8]
 800d42a:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d430:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d436:	b2d2      	uxtb	r2, r2
 800d438:	4798      	blx	r3
    }
    break;
 800d43a:	e0c2      	b.n	800d5c2 <OpenThread_CallBack_Processing+0x882>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800d43c:	4b71      	ldr	r3, [pc, #452]	; (800d604 <OpenThread_CallBack_Processing+0x8c4>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 80c0 	beq.w	800d5c6 <OpenThread_CallBack_Processing+0x886>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d446:	4b6f      	ldr	r3, [pc, #444]	; (800d604 <OpenThread_CallBack_Processing+0x8c4>)
 800d448:	681c      	ldr	r4, [r3, #0]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d454:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d45a:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d460:	b2db      	uxtb	r3, r3
 800d462:	47a0      	blx	r4
    }
    break;
 800d464:	e0af      	b.n	800d5c6 <OpenThread_CallBack_Processing+0x886>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800d466:	4b68      	ldr	r3, [pc, #416]	; (800d608 <OpenThread_CallBack_Processing+0x8c8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80ad 	beq.w	800d5ca <OpenThread_CallBack_Processing+0x88a>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d470:	4b65      	ldr	r3, [pc, #404]	; (800d608 <OpenThread_CallBack_Processing+0x8c8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	6892      	ldr	r2, [r2, #8]
 800d478:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d47e:	b252      	sxtb	r2, r2
 800d480:	4611      	mov	r1, r2
 800d482:	4798      	blx	r3
    }
    break;
 800d484:	e0a1      	b.n	800d5ca <OpenThread_CallBack_Processing+0x88a>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800d486:	4b61      	ldr	r3, [pc, #388]	; (800d60c <OpenThread_CallBack_Processing+0x8cc>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 809f 	beq.w	800d5ce <OpenThread_CallBack_Processing+0x88e>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800d490:	4b5e      	ldr	r3, [pc, #376]	; (800d60c <OpenThread_CallBack_Processing+0x8cc>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	6892      	ldr	r2, [r2, #8]
 800d498:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800d49e:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800d4a4:	4798      	blx	r3
    }
    break;
 800d4a6:	e092      	b.n	800d5ce <OpenThread_CallBack_Processing+0x88e>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	4b58      	ldr	r3, [pc, #352]	; (800d610 <OpenThread_CallBack_Processing+0x8d0>)
 800d4b0:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800d4b2:	4b57      	ldr	r3, [pc, #348]	; (800d610 <OpenThread_CallBack_Processing+0x8d0>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	4a56      	ldr	r2, [pc, #344]	; (800d614 <OpenThread_CallBack_Processing+0x8d4>)
 800d4ba:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800d4bc:	4b55      	ldr	r3, [pc, #340]	; (800d614 <OpenThread_CallBack_Processing+0x8d4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 8086 	beq.w	800d5d2 <OpenThread_CallBack_Processing+0x892>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800d4c6:	4b53      	ldr	r3, [pc, #332]	; (800d614 <OpenThread_CallBack_Processing+0x8d4>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a51      	ldr	r2, [pc, #324]	; (800d610 <OpenThread_CallBack_Processing+0x8d0>)
 800d4cc:	6812      	ldr	r2, [r2, #0]
 800d4ce:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800d4d4:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800d4da:	4798      	blx	r3
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	609a      	str	r2, [r3, #8]
      }
      break;
 800d4e4:	e075      	b.n	800d5d2 <OpenThread_CallBack_Processing+0x892>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800d4e6:	4b4c      	ldr	r3, [pc, #304]	; (800d618 <OpenThread_CallBack_Processing+0x8d8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d073      	beq.n	800d5d6 <OpenThread_CallBack_Processing+0x896>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800d4ee:	4b4a      	ldr	r3, [pc, #296]	; (800d618 <OpenThread_CallBack_Processing+0x8d8>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	6892      	ldr	r2, [r2, #8]
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	4798      	blx	r3
    }
    break;
 800d4fa:	e06c      	b.n	800d5d6 <OpenThread_CallBack_Processing+0x896>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800d4fc:	4b47      	ldr	r3, [pc, #284]	; (800d61c <OpenThread_CallBack_Processing+0x8dc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d06a      	beq.n	800d5da <OpenThread_CallBack_Processing+0x89a>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800d504:	4b45      	ldr	r3, [pc, #276]	; (800d61c <OpenThread_CallBack_Processing+0x8dc>)
 800d506:	6819      	ldr	r1, [r3, #0]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800d512:	2200      	movs	r2, #0
 800d514:	461c      	mov	r4, r3
 800d516:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4622      	mov	r2, r4
 800d522:	462b      	mov	r3, r5
 800d524:	4788      	blx	r1
    }
    break;
 800d526:	e058      	b.n	800d5da <OpenThread_CallBack_Processing+0x89a>
          (void *) p_notification->Data[1]);
    }
    break;
#endif
  default:
    status = HAL_ERROR;
 800d528:	2301      	movs	r3, #1
 800d52a:	71fb      	strb	r3, [r7, #7]
    break;
 800d52c:	e056      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d52e:	bf00      	nop
 800d530:	e054      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d532:	bf00      	nop
 800d534:	e052      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d536:	bf00      	nop
 800d538:	e050      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d53a:	bf00      	nop
 800d53c:	e04e      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d53e:	bf00      	nop
 800d540:	e04c      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d542:	bf00      	nop
 800d544:	e04a      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d546:	bf00      	nop
 800d548:	e048      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d54a:	bf00      	nop
 800d54c:	e046      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d54e:	bf00      	nop
 800d550:	e044      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d552:	bf00      	nop
 800d554:	e042      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d556:	bf00      	nop
 800d558:	e040      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d55a:	bf00      	nop
 800d55c:	e03e      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d55e:	bf00      	nop
 800d560:	e03c      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d562:	bf00      	nop
 800d564:	e03a      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d566:	bf00      	nop
 800d568:	e038      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d56a:	bf00      	nop
 800d56c:	e036      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d56e:	bf00      	nop
 800d570:	e034      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d572:	bf00      	nop
 800d574:	e032      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d576:	bf00      	nop
 800d578:	e030      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d57a:	bf00      	nop
 800d57c:	e02e      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d57e:	bf00      	nop
 800d580:	e02c      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d582:	bf00      	nop
 800d584:	e02a      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d586:	bf00      	nop
 800d588:	e028      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d58a:	bf00      	nop
 800d58c:	e026      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d58e:	bf00      	nop
 800d590:	e024      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d592:	bf00      	nop
 800d594:	e022      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d596:	bf00      	nop
 800d598:	e020      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d59a:	bf00      	nop
 800d59c:	e01e      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d59e:	bf00      	nop
 800d5a0:	e01c      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5a2:	bf00      	nop
 800d5a4:	e01a      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5a6:	bf00      	nop
 800d5a8:	e018      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5aa:	bf00      	nop
 800d5ac:	e016      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5ae:	bf00      	nop
 800d5b0:	e014      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5b2:	bf00      	nop
 800d5b4:	e012      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5b6:	bf00      	nop
 800d5b8:	e010      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5ba:	bf00      	nop
 800d5bc:	e00e      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5be:	bf00      	nop
 800d5c0:	e00c      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5c2:	bf00      	nop
 800d5c4:	e00a      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5c6:	bf00      	nop
 800d5c8:	e008      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5ca:	bf00      	nop
 800d5cc:	e006      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5ce:	bf00      	nop
 800d5d0:	e004      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
      break;
 800d5d2:	bf00      	nop
 800d5d4:	e002      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5d6:	bf00      	nop
 800d5d8:	e000      	b.n	800d5dc <OpenThread_CallBack_Processing+0x89c>
    break;
 800d5da:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800d5dc:	f7ff f86c 	bl	800c6b8 <TL_THREAD_SendAck>
  return status;
 800d5e0:	79fb      	ldrb	r3, [r7, #7]

}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	20000530 	.word	0x20000530
 800d5f0:	20000524 	.word	0x20000524
 800d5f4:	20000528 	.word	0x20000528
 800d5f8:	20000534 	.word	0x20000534
 800d5fc:	20000538 	.word	0x20000538
 800d600:	2000053c 	.word	0x2000053c
 800d604:	20000540 	.word	0x20000540
 800d608:	20000544 	.word	0x20000544
 800d60c:	20000548 	.word	0x20000548
 800d610:	20000550 	.word	0x20000550
 800d614:	2000054c 	.word	0x2000054c
 800d618:	20000570 	.word	0x20000570
 800d61c:	20000574 	.word	0x20000574

0800d620 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d62c:	f000 fd76 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d630:	f000 fd06 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d634:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	2200      	movs	r2, #0
 800d642:	705a      	strb	r2, [r3, #1]
 800d644:	2200      	movs	r2, #0
 800d646:	709a      	strb	r2, [r3, #2]
 800d648:	2200      	movs	r2, #0
 800d64a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f042 0201 	orr.w	r2, r2, #1
 800d654:	711a      	strb	r2, [r3, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	715a      	strb	r2, [r3, #5]
 800d65a:	2200      	movs	r2, #0
 800d65c:	719a      	strb	r2, [r3, #6]
 800d65e:	2200      	movs	r2, #0
 800d660:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d662:	78fa      	ldrb	r2, [r7, #3]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d668:	f000 fd32 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d66c:	f000 fcf4 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d670:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	b2db      	uxtb	r3, r3
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d68a:	f000 fd47 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d68e:	f000 fcd7 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d692:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800d69c:	701a      	strb	r2, [r3, #0]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	705a      	strb	r2, [r3, #1]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	709a      	strb	r2, [r3, #2]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f042 0201 	orr.w	r2, r2, #1
 800d6b2:	711a      	strb	r2, [r3, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	715a      	strb	r2, [r3, #5]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	719a      	strb	r2, [r3, #6]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800d6c0:	683a      	ldr	r2, [r7, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d6c6:	f000 fd03 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d6ca:	f000 fcc5 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d6ce:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	b2db      	uxtb	r3, r3
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <otThreadSetMeshLocalPrefix>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMeshLocalPrefix *)p_ot_req->Data[0];
}

otError otThreadSetMeshLocalPrefix(otInstance *aInstance, const otMeshLocalPrefix *aMeshLocalPrefix)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d6e8:	f000 fd18 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6ec:	f000 fca8 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d6f0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MESH_LOCAL_PREFIX;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f042 0274 	orr.w	r2, r2, #116	; 0x74
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	705a      	strb	r2, [r3, #1]
 800d700:	2200      	movs	r2, #0
 800d702:	709a      	strb	r2, [r3, #2]
 800d704:	2200      	movs	r2, #0
 800d706:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f042 0201 	orr.w	r2, r2, #1
 800d710:	711a      	strb	r2, [r3, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	715a      	strb	r2, [r3, #5]
 800d716:	2200      	movs	r2, #0
 800d718:	719a      	strb	r2, [r3, #6]
 800d71a:	2200      	movs	r2, #0
 800d71c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMeshLocalPrefix;
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d724:	f000 fcd4 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d728:	f000 fc96 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d72c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	b2db      	uxtb	r3, r3
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d744:	f000 fcea 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d748:	f000 fc7a 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d74c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	f062 0279 	orn	r2, r2, #121	; 0x79
 800d756:	701a      	strb	r2, [r3, #0]
 800d758:	2200      	movs	r2, #0
 800d75a:	705a      	strb	r2, [r3, #1]
 800d75c:	2200      	movs	r2, #0
 800d75e:	709a      	strb	r2, [r3, #2]
 800d760:	2200      	movs	r2, #0
 800d762:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	711a      	strb	r2, [r3, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	715a      	strb	r2, [r3, #5]
 800d76e:	2200      	movs	r2, #0
 800d770:	719a      	strb	r2, [r3, #6]
 800d772:	2200      	movs	r2, #0
 800d774:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d776:	f000 fcab 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d77a:	f000 fc6d 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d77e:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	b2db      	uxtb	r3, r3
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <otUdpOpen>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMessage*)p_ot_req->Data[0];
}

otError otUdpOpen(otInstance *aInstance, otUdpSocket *aSocket, otUdpReceive aCallback, void *aContext)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800d79e:	f000 fcbd 	bl	800e11c <Pre_OtCmdProcessing>
  otUdpReceiveCb = aCallback;
 800d7a2:	4a18      	ldr	r2, [pc, #96]	; (800d804 <otUdpOpen+0x74>)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7a8:	f000 fc4a 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d7ac:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_UDP_OPEN;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f062 0247 	orn	r2, r2, #71	; 0x47
 800d7b6:	701a      	strb	r2, [r3, #0]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f042 0201 	orr.w	r2, r2, #1
 800d7be:	705a      	strb	r2, [r3, #1]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	709a      	strb	r2, [r3, #2]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f042 0202 	orr.w	r2, r2, #2
 800d7d0:	711a      	strb	r2, [r3, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	715a      	strb	r2, [r3, #5]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	719a      	strb	r2, [r3, #6]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aSocket;
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)aContext;
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800d7ea:	f000 fc71 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7ee:	f000 fc33 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7f2:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	b2db      	uxtb	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20000548 	.word	0x20000548

0800d808 <otUdpBind>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otUdpBind(otInstance *aInstance, otUdpSocket *aSocket, const otSockAddr *aSockName, otNetifIdentifier aNetif)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
 800d814:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d816:	f000 fc81 	bl	800e11c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d81a:	f000 fc11 	bl	800e040 <THREAD_Get_OTCmdPayloadBuffer>
 800d81e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_UDP_BIND;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2200      	movs	r2, #0
 800d824:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f042 0201 	orr.w	r2, r2, #1
 800d830:	705a      	strb	r2, [r3, #1]
 800d832:	2200      	movs	r2, #0
 800d834:	709a      	strb	r2, [r3, #2]
 800d836:	2200      	movs	r2, #0
 800d838:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f042 0203 	orr.w	r2, r2, #3
 800d842:	711a      	strb	r2, [r3, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	715a      	strb	r2, [r3, #5]
 800d848:	2200      	movs	r2, #0
 800d84a:	719a      	strb	r2, [r3, #6]
 800d84c:	2200      	movs	r2, #0
 800d84e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aSocket;
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)aSockName;
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t)aNetif;
 800d85c:	78fa      	ldrb	r2, [r7, #3]
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800d862:	f000 fc35 	bl	800e0d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d866:	f000 fbf7 	bl	800e058 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d86a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	b2db      	uxtb	r3, r3
}
 800d872:	4618      	mov	r0, r3
 800d874:	3718      	adds	r7, #24
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d886:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <OTP_Read+0x48>)
 800d888:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d88a:	e002      	b.n	800d892 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3b08      	subs	r3, #8
 800d890:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3307      	adds	r3, #7
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	79fa      	ldrb	r2, [r7, #7]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d003      	beq.n	800d8a6 <OTP_Read+0x2a>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	4a09      	ldr	r2, [pc, #36]	; (800d8c8 <OTP_Read+0x4c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d1f2      	bne.n	800d88c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3307      	adds	r3, #7
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	79fa      	ldrb	r2, [r7, #7]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d001      	beq.n	800d8b6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	1fff73f8 	.word	0x1fff73f8
 800d8c8:	1fff7000 	.word	0x1fff7000

0800d8cc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	605a      	str	r2, [r3, #4]
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b087      	sub	sp, #28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d8fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8fe:	b672      	cpsid	i
}
 800d900:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d102      	bne.n	800d912 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	75fb      	strb	r3, [r7, #23]
 800d910:	e001      	b.n	800d916 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	75fb      	strb	r3, [r7, #23]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f383 8810 	msr	PRIMASK, r3
}
 800d920:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93a:	f3ef 8310 	mrs	r3, PRIMASK
 800d93e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d940:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d944:	b672      	cpsid	i
}
 800d946:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	605a      	str	r2, [r3, #4]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	f383 8810 	msr	PRIMASK, r3
}
 800d96e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d986:	f3ef 8310 	mrs	r3, PRIMASK
 800d98a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d98c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d98e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d990:	b672      	cpsid	i
}
 800d992:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	f383 8810 	msr	PRIMASK, r3
}
 800d9ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9bc:	bf00      	nop
 800d9be:	371c      	adds	r7, #28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d9d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9da:	b672      	cpsid	i
}
 800d9dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	6852      	ldr	r2, [r2, #4]
 800d9f0:	605a      	str	r2, [r3, #4]
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	f383 8810 	msr	PRIMASK, r3
}
 800d9fc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9fe:	bf00      	nop
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b086      	sub	sp, #24
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da14:	f3ef 8310 	mrs	r3, PRIMASK
 800da18:	60fb      	str	r3, [r7, #12]
  return(result);
 800da1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800da1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da1e:	b672      	cpsid	i
}
 800da20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff ffca 	bl	800d9c8 <LST_remove_node>
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	f383 8810 	msr	PRIMASK, r3
}
 800da3e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800da40:	bf00      	nop
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800da4e:	f000 f993 	bl	800dd78 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800da52:	480d      	ldr	r0, [pc, #52]	; (800da88 <APP_THREAD_Init+0x40>)
 800da54:	f000 fae4 	bl	800e020 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800da58:	2101      	movs	r1, #1
 800da5a:	2002      	movs	r0, #2
 800da5c:	f001 fd04 	bl	800f468 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 800da60:	f000 fc0c 	bl	800e27c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 800da64:	f000 fbf2 	bl	800e24c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800da68:	f7fe fae3 	bl	800c032 <SHCI_C2_THREAD_Init>
 800da6c:	4603      	mov	r3, r0
 800da6e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 800da70:	4a06      	ldr	r2, [pc, #24]	; (800da8c <APP_THREAD_Init+0x44>)
 800da72:	2100      	movs	r1, #0
 800da74:	2001      	movs	r0, #1
 800da76:	f001 fe23 	bl	800f6c0 <UTIL_SEQ_RegTask>
  /* USER CODE BEGIN INIT TASKS */

  /* USER CODE END INIT TASKS */

  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 800da7a:	f000 f84d 	bl	800db18 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 800da7e:	bf00      	nop
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	2003083c 	.word	0x2003083c
 800da8c:	0800e311 	.word	0x0800e311

0800da90 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	d826      	bhi.n	800daee <APP_THREAD_Error+0x5e>
 800daa0:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <APP_THREAD_Error+0x18>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800dabd 	.word	0x0800dabd
 800daac:	0800dac7 	.word	0x0800dac7
 800dab0:	0800dad1 	.word	0x0800dad1
 800dab4:	0800dadb 	.word	0x0800dadb
 800dab8:	0800dae5 	.word	0x0800dae5
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	4810      	ldr	r0, [pc, #64]	; (800db00 <APP_THREAD_Error+0x70>)
 800dac0:	f000 f94e 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800dac4:	e018      	b.n	800daf8 <APP_THREAD_Error+0x68>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	480e      	ldr	r0, [pc, #56]	; (800db04 <APP_THREAD_Error+0x74>)
 800daca:	f000 f949 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800dace:	e013      	b.n	800daf8 <APP_THREAD_Error+0x68>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	480d      	ldr	r0, [pc, #52]	; (800db08 <APP_THREAD_Error+0x78>)
 800dad4:	f000 f944 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800dad8:	e00e      	b.n	800daf8 <APP_THREAD_Error+0x68>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	480b      	ldr	r0, [pc, #44]	; (800db0c <APP_THREAD_Error+0x7c>)
 800dade:	f000 f93f 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800dae2:	e009      	b.n	800daf8 <APP_THREAD_Error+0x68>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	480a      	ldr	r0, [pc, #40]	; (800db10 <APP_THREAD_Error+0x80>)
 800dae8:	f000 f93a 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800daec:	e004      	b.n	800daf8 <APP_THREAD_Error+0x68>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800daee:	2100      	movs	r1, #0
 800daf0:	4808      	ldr	r0, [pc, #32]	; (800db14 <APP_THREAD_Error+0x84>)
 800daf2:	f000 f935 	bl	800dd60 <APP_THREAD_TraceError>
    break;
 800daf6:	bf00      	nop
  }
}
 800daf8:	bf00      	nop
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	080109a4 	.word	0x080109a4
 800db04:	080109c8 	.word	0x080109c8
 800db08:	080109ec 	.word	0x080109ec
 800db0c:	08010a18 	.word	0x08010a18
 800db10:	08010a3c 	.word	0x08010a3c
 800db14:	08010a60 	.word	0x08010a60

0800db18 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
  otError error;
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800db1e:	2200      	movs	r2, #0
 800db20:	4948      	ldr	r1, [pc, #288]	; (800dc44 <APP_THREAD_DeviceConfig+0x12c>)
 800db22:	2000      	movs	r0, #0
 800db24:	f7fe ff4c 	bl	800c9c0 <otSetStateChangedCallback>
 800db28:	4603      	mov	r3, r0
 800db2a:	77fb      	strb	r3, [r7, #31]
  if (error != OT_ERROR_NONE)
 800db2c:	7ffb      	ldrb	r3, [r7, #31]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <APP_THREAD_DeviceConfig+0x22>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_SET_STATE_CB, (uint32_t)ERR_INTERFACE_FATAL);
 800db32:	2101      	movs	r1, #1
 800db34:	2001      	movs	r0, #1
 800db36:	f7ff ffab 	bl	800da90 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */

     error = otInstanceErasePersistentInfo(NULL);
 800db3a:	2000      	movs	r0, #0
 800db3c:	f7fe ff76 	bl	800ca2c <otInstanceErasePersistentInfo>
 800db40:	4603      	mov	r3, r0
 800db42:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
 800db44:	7ffb      	ldrb	r3, [r7, #31]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d004      	beq.n	800db54 <APP_THREAD_DeviceConfig+0x3c>
     {
       APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	4619      	mov	r1, r3
 800db4e:	2002      	movs	r0, #2
 800db50:	f7ff ff9e 	bl	800da90 <APP_THREAD_Error>
     }
     otInstanceFinalize(NULL);
 800db54:	2000      	movs	r0, #0
 800db56:	f7fe ff0c 	bl	800c972 <otInstanceFinalize>
     otInstanceInitSingle();
 800db5a:	f7fe fee3 	bl	800c924 <otInstanceInitSingle>
     error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800db5e:	2200      	movs	r2, #0
 800db60:	4938      	ldr	r1, [pc, #224]	; (800dc44 <APP_THREAD_DeviceConfig+0x12c>)
 800db62:	2000      	movs	r0, #0
 800db64:	f7fe ff2c 	bl	800c9c0 <otSetStateChangedCallback>
 800db68:	4603      	mov	r3, r0
 800db6a:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
 800db6c:	7ffb      	ldrb	r3, [r7, #31]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d004      	beq.n	800db7c <APP_THREAD_DeviceConfig+0x64>
     {
       APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800db72:	7ffb      	ldrb	r3, [r7, #31]
 800db74:	4619      	mov	r1, r3
 800db76:	2001      	movs	r0, #1
 800db78:	f7ff ff8a 	bl	800da90 <APP_THREAD_Error>
     }
     error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800db7c:	2114      	movs	r1, #20
 800db7e:	2000      	movs	r0, #0
 800db80:	f7ff f80e 	bl	800cba0 <otLinkSetChannel>
 800db84:	4603      	mov	r3, r0
 800db86:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
     {
      // APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
     }
     error = otLinkSetPanId(NULL, C_PANID);
 800db88:	f242 2155 	movw	r1, #8789	; 0x2255
 800db8c:	2000      	movs	r0, #0
 800db8e:	f7ff f837 	bl	800cc00 <otLinkSetPanId>
 800db92:	4603      	mov	r3, r0
 800db94:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
     {
       //APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
     }
     error = otThreadSetNetworkKey(NULL, &networkKey);
 800db96:	492c      	ldr	r1, [pc, #176]	; (800dc48 <APP_THREAD_DeviceConfig+0x130>)
 800db98:	2000      	movs	r0, #0
 800db9a:	f7ff fd71 	bl	800d680 <otThreadSetNetworkKey>
 800db9e:	4603      	mov	r3, r0
 800dba0:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
 800dba2:	7ffb      	ldrb	r3, [r7, #31]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d004      	beq.n	800dbb2 <APP_THREAD_DeviceConfig+0x9a>
     {
       APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 800dba8:	7ffb      	ldrb	r3, [r7, #31]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	2003      	movs	r0, #3
 800dbae:	f7ff ff6f 	bl	800da90 <APP_THREAD_Error>
     }

     otNetifAddress aAddress;
     error = otIp6AddressFromString("DEAD:BEAF:0000:0000:0000:0000:0000:0000", &aAddress);
 800dbb2:	1d3b      	adds	r3, r7, #4
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4825      	ldr	r0, [pc, #148]	; (800dc4c <APP_THREAD_DeviceConfig+0x134>)
 800dbb8:	f7fe ffc0 	bl	800cb3c <otIp6AddressFromString>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
 800dbc0:	7ffb      	ldrb	r3, [r7, #31]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <APP_THREAD_DeviceConfig+0xb6>
     {
     		printf("otIp6AddressFromString error\r\n");
 800dbc6:	4822      	ldr	r0, [pc, #136]	; (800dc50 <APP_THREAD_DeviceConfig+0x138>)
 800dbc8:	f001 ffb4 	bl	800fb34 <puts>
     		while(1);
 800dbcc:	e7fe      	b.n	800dbcc <APP_THREAD_DeviceConfig+0xb4>
     }

     error = otIp6AddUnicastAddress (NULL,  &aAddress);
 800dbce:	1d3b      	adds	r3, r7, #4
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	f7fe ff83 	bl	800cade <otIp6AddUnicastAddress>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	77fb      	strb	r3, [r7, #31]
	 if (error != OT_ERROR_NONE)
 800dbdc:	7ffb      	ldrb	r3, [r7, #31]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <APP_THREAD_DeviceConfig+0xd2>
     {
		      printf("otIp6AddUnicastAddress error\r\n");
 800dbe2:	481c      	ldr	r0, [pc, #112]	; (800dc54 <APP_THREAD_DeviceConfig+0x13c>)
 800dbe4:	f001 ffa6 	bl	800fb34 <puts>
		      while(1);
 800dbe8:	e7fe      	b.n	800dbe8 <APP_THREAD_DeviceConfig+0xd0>
	 }


	 error = otThreadSetMeshLocalPrefix(NULL, &mesh_local_prefix);
 800dbea:	491b      	ldr	r1, [pc, #108]	; (800dc58 <APP_THREAD_DeviceConfig+0x140>)
 800dbec:	2000      	movs	r0, #0
 800dbee:	f7ff fd76 	bl	800d6de <otThreadSetMeshLocalPrefix>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	77fb      	strb	r3, [r7, #31]
	 if (error != OT_ERROR_NONE)
 800dbf6:	7ffb      	ldrb	r3, [r7, #31]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <APP_THREAD_DeviceConfig+0xec>
	 {
			      printf("otThreadSetMeshLocalPrefix error\r\n");
 800dbfc:	4817      	ldr	r0, [pc, #92]	; (800dc5c <APP_THREAD_DeviceConfig+0x144>)
 800dbfe:	f001 ff99 	bl	800fb34 <puts>
			      while(1);
 800dc02:	e7fe      	b.n	800dc02 <APP_THREAD_DeviceConfig+0xea>
	 }



     error = otIp6SetEnabled(NULL, true);
 800dc04:	2101      	movs	r1, #1
 800dc06:	2000      	movs	r0, #0
 800dc08:	f7fe ff39 	bl	800ca7e <otIp6SetEnabled>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	77fb      	strb	r3, [r7, #31]
     if (error != OT_ERROR_NONE)
     {
       //APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
     }
     error = otThreadSetEnabled(NULL, true);
 800dc10:	2101      	movs	r1, #1
 800dc12:	2000      	movs	r0, #0
 800dc14:	f7ff fd04 	bl	800d620 <otThreadSetEnabled>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	77fb      	strb	r3, [r7, #31]
     {
      // APP_THREAD_Error(ERR_THREAD_START,error);
     }


     memset(&mSocket, 0, sizeof(mSocket));
 800dc1c:	2234      	movs	r2, #52	; 0x34
 800dc1e:	2100      	movs	r1, #0
 800dc20:	480f      	ldr	r0, [pc, #60]	; (800dc60 <APP_THREAD_DeviceConfig+0x148>)
 800dc22:	f001 ff8f 	bl	800fb44 <memset>

     /* Open socket */
     otUdpOpen(NULL, &mSocket, HandleUdpReceive, NULL);
 800dc26:	2300      	movs	r3, #0
 800dc28:	4a0e      	ldr	r2, [pc, #56]	; (800dc64 <APP_THREAD_DeviceConfig+0x14c>)
 800dc2a:	490d      	ldr	r1, [pc, #52]	; (800dc60 <APP_THREAD_DeviceConfig+0x148>)
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	f7ff fdaf 	bl	800d790 <otUdpOpen>
     UdpBind(udpPort);
 800dc32:	4b0d      	ldr	r3, [pc, #52]	; (800dc68 <APP_THREAD_DeviceConfig+0x150>)
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f900 	bl	800de3c <UdpBind>

  /* USER CODE END DEVICECONFIG */
}
 800dc3c:	bf00      	nop
 800dc3e:	3720      	adds	r7, #32
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	0800dc6d 	.word	0x0800dc6d
 800dc48:	20000120 	.word	0x20000120
 800dc4c:	08010a70 	.word	0x08010a70
 800dc50:	08010a98 	.word	0x08010a98
 800dc54:	08010ab8 	.word	0x08010ab8
 800dc58:	08010d28 	.word	0x08010d28
 800dc5c:	08010ad8 	.word	0x08010ad8
 800dc60:	200007b0 	.word	0x200007b0
 800dc64:	0800de99 	.word	0x0800de99
 800dc68:	20000130 	.word	0x20000130

0800dc6c <APP_THREAD_StateNotif>:
 * @retval None
 */


static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d069      	beq.n	800dd54 <APP_THREAD_StateNotif+0xe8>
  {
    switch (otThreadGetDeviceRole(NULL))
 800dc80:	2000      	movs	r0, #0
 800dc82:	f7ff fd5b 	bl	800d73c <otThreadGetDeviceRole>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b04      	cmp	r3, #4
 800dc8a:	d862      	bhi.n	800dd52 <APP_THREAD_StateNotif+0xe6>
 800dc8c:	a201      	add	r2, pc, #4	; (adr r2, 800dc94 <APP_THREAD_StateNotif+0x28>)
 800dc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc92:	bf00      	nop
 800dc94:	0800dca9 	.word	0x0800dca9
 800dc98:	0800dccb 	.word	0x0800dccb
 800dc9c:	0800dced 	.word	0x0800dced
 800dca0:	0800dd0f 	.word	0x0800dd0f
 800dca4:	0800dd31 	.word	0x0800dd31
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800dca8:	2200      	movs	r2, #0
 800dcaa:	2110      	movs	r1, #16
 800dcac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dcb0:	f7f4 fc3a 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	4828      	ldr	r0, [pc, #160]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dcba:	f7f4 fc35 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2102      	movs	r1, #2
 800dcc2:	4826      	ldr	r0, [pc, #152]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dcc4:	f7f4 fc30 	bl	8002528 <HAL_GPIO_WritePin>
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 800dcc8:	e044      	b.n	800dd54 <APP_THREAD_StateNotif+0xe8>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800dcca:	2200      	movs	r2, #0
 800dccc:	2110      	movs	r1, #16
 800dcce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dcd2:	f7f4 fc29 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2101      	movs	r1, #1
 800dcda:	4820      	ldr	r0, [pc, #128]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dcdc:	f7f4 fc24 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800dce0:	2201      	movs	r2, #1
 800dce2:	2102      	movs	r1, #2
 800dce4:	481d      	ldr	r0, [pc, #116]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dce6:	f7f4 fc1f 	bl	8002528 <HAL_GPIO_WritePin>
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 800dcea:	e033      	b.n	800dd54 <APP_THREAD_StateNotif+0xe8>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800dcec:	2200      	movs	r2, #0
 800dcee:	2110      	movs	r1, #16
 800dcf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dcf4:	f7f4 fc18 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	4817      	ldr	r0, [pc, #92]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dcfe:	f7f4 fc13 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800dd02:	2200      	movs	r2, #0
 800dd04:	2102      	movs	r1, #2
 800dd06:	4815      	ldr	r0, [pc, #84]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dd08:	f7f4 fc0e 	bl	8002528 <HAL_GPIO_WritePin>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 800dd0c:	e022      	b.n	800dd54 <APP_THREAD_StateNotif+0xe8>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800dd0e:	2201      	movs	r2, #1
 800dd10:	2110      	movs	r1, #16
 800dd12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dd16:	f7f4 fc07 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	480f      	ldr	r0, [pc, #60]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dd20:	f7f4 fc02 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800dd24:	2200      	movs	r2, #0
 800dd26:	2102      	movs	r1, #2
 800dd28:	480c      	ldr	r0, [pc, #48]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dd2a:	f7f4 fbfd 	bl	8002528 <HAL_GPIO_WritePin>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 800dd2e:	e011      	b.n	800dd54 <APP_THREAD_StateNotif+0xe8>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800dd30:	2201      	movs	r2, #1
 800dd32:	2110      	movs	r1, #16
 800dd34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dd38:	f7f4 fbf6 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	2101      	movs	r1, #1
 800dd40:	4806      	ldr	r0, [pc, #24]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dd42:	f7f4 fbf1 	bl	8002528 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800dd46:	2200      	movs	r2, #0
 800dd48:	2102      	movs	r1, #2
 800dd4a:	4804      	ldr	r0, [pc, #16]	; (800dd5c <APP_THREAD_StateNotif+0xf0>)
 800dd4c:	f7f4 fbec 	bl	8002528 <HAL_GPIO_WritePin>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 800dd50:	e000      	b.n	800dd54 <APP_THREAD_StateNotif+0xe8>
    default:
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
 800dd52:	bf00      	nop
    }
  }
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	48000400 	.word	0x48000400

0800dd60 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800dd7e:	1d3b      	adds	r3, r7, #4
 800dd80:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800dd82:	6978      	ldr	r0, [r7, #20]
 800dd84:	f7fe f982 	bl	800c08c <SHCI_GetWirelessFwInfo>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800dd8e:	2101      	movs	r1, #1
 800dd90:	2004      	movs	r0, #4
 800dd92:	f7ff fe7d 	bl	800da90 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 800dd96:	e040      	b.n	800de1a <APP_THREAD_CheckWirelessFirmwareInfo+0xa2>
    APP_DBG("**********************************************************");
 800dd98:	4a22      	ldr	r2, [pc, #136]	; (800de24 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	f7f3 fb6b 	bl	8001478 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800dda2:	4a21      	ldr	r2, [pc, #132]	; (800de28 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800dda4:	2101      	movs	r1, #1
 800dda6:	2000      	movs	r0, #0
 800dda8:	f7f3 fb66 	bl	8001478 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	785b      	ldrb	r3, [r3, #1]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	789b      	ldrb	r3, [r3, #2]
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	9200      	str	r2, [sp, #0]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4a1a      	ldr	r2, [pc, #104]	; (800de2c <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 800ddc4:	2101      	movs	r1, #1
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	f7f3 fb56 	bl	8001478 <logApplication>
    switch(p_wireless_info->StackType)
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	7a5b      	ldrb	r3, [r3, #9]
 800ddd0:	2b50      	cmp	r3, #80	; 0x50
 800ddd2:	d012      	beq.n	800ddfa <APP_THREAD_CheckWirelessFirmwareInfo+0x82>
 800ddd4:	2b50      	cmp	r3, #80	; 0x50
 800ddd6:	dc16      	bgt.n	800de06 <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
 800ddd8:	2b10      	cmp	r3, #16
 800ddda:	d002      	beq.n	800dde2 <APP_THREAD_CheckWirelessFirmwareInfo+0x6a>
 800dddc:	2b11      	cmp	r3, #17
 800ddde:	d006      	beq.n	800ddee <APP_THREAD_CheckWirelessFirmwareInfo+0x76>
 800dde0:	e011      	b.n	800de06 <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
      APP_DBG("FW Type : Thread FTD");
 800dde2:	4a13      	ldr	r2, [pc, #76]	; (800de30 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 800dde4:	2101      	movs	r1, #1
 800dde6:	2000      	movs	r0, #0
 800dde8:	f7f3 fb46 	bl	8001478 <logApplication>
      break;
 800ddec:	e010      	b.n	800de10 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Thread MTD");
 800ddee:	4a11      	ldr	r2, [pc, #68]	; (800de34 <APP_THREAD_CheckWirelessFirmwareInfo+0xbc>)
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	f7f3 fb40 	bl	8001478 <logApplication>
      break;
 800ddf8:	e00a      	b.n	800de10 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800ddfa:	4a0f      	ldr	r2, [pc, #60]	; (800de38 <APP_THREAD_CheckWirelessFirmwareInfo+0xc0>)
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	2000      	movs	r0, #0
 800de00:	f7f3 fb3a 	bl	8001478 <logApplication>
      break;
 800de04:	e004      	b.n	800de10 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800de06:	2101      	movs	r1, #1
 800de08:	2004      	movs	r0, #4
 800de0a:	f7ff fe41 	bl	800da90 <APP_THREAD_Error>
      break;
 800de0e:	bf00      	nop
    APP_DBG("**********************************************************");
 800de10:	4a04      	ldr	r2, [pc, #16]	; (800de24 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800de12:	2101      	movs	r1, #1
 800de14:	2000      	movs	r0, #0
 800de16:	f7f3 fb2f 	bl	8001478 <logApplication>
}
 800de1a:	bf00      	nop
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	08010afc 	.word	0x08010afc
 800de28:	08010b38 	.word	0x08010b38
 800de2c:	08010b54 	.word	0x08010b54
 800de30:	08010b6c 	.word	0x08010b6c
 800de34:	08010b84 	.word	0x08010b84
 800de38:	08010b9c 	.word	0x08010b9c

0800de3c <UdpBind>:
{
    return Swap16(v);
}

static otError UdpBind(uint16_t aPort)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	4603      	mov	r3, r0
 800de44:	80fb      	strh	r3, [r7, #6]
    otError    error;
    otSockAddr sockaddr;
    otNetifIdentifier netif = OT_NETIF_THREAD;
 800de46:	2301      	movs	r3, #1
 800de48:	77bb      	strb	r3, [r7, #30]

    memset(&sockaddr, 0, sizeof(sockaddr));
 800de4a:	f107 030c 	add.w	r3, r7, #12
 800de4e:	2212      	movs	r2, #18
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f001 fe76 	bl	800fb44 <memset>

    /* "::" specifies the IPv6 Unspecified Address */
    error = otIp6AddressFromString("::", &sockaddr.mAddress);
 800de58:	f107 030c 	add.w	r3, r7, #12
 800de5c:	4619      	mov	r1, r3
 800de5e:	480c      	ldr	r0, [pc, #48]	; (800de90 <UdpBind+0x54>)
 800de60:	f7fe fe6c 	bl	800cb3c <otIp6AddressFromString>
 800de64:	4603      	mov	r3, r0
 800de66:	77fb      	strb	r3, [r7, #31]
    SuccessOrExit(error);
 800de68:	7ffb      	ldrb	r3, [r7, #31]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10a      	bne.n	800de84 <UdpBind+0x48>

    sockaddr.mPort    = aPort;
 800de6e:	88fb      	ldrh	r3, [r7, #6]
 800de70:	83bb      	strh	r3, [r7, #28]

    error = otUdpBind(NULL, &mSocket, &sockaddr, netif);
 800de72:	7fbb      	ldrb	r3, [r7, #30]
 800de74:	f107 020c 	add.w	r2, r7, #12
 800de78:	4906      	ldr	r1, [pc, #24]	; (800de94 <UdpBind+0x58>)
 800de7a:	2000      	movs	r0, #0
 800de7c:	f7ff fcc4 	bl	800d808 <otUdpBind>
 800de80:	4603      	mov	r3, r0
 800de82:	77fb      	strb	r3, [r7, #31]

exit:
    return error;
 800de84:	7ffb      	ldrb	r3, [r7, #31]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	08010bc8 	.word	0x08010bc8
 800de94:	200007b0 	.word	0x200007b0

0800de98 <HandleUdpReceive>:

static void HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800de98:	b590      	push	{r4, r7, lr}
 800de9a:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 800de9e:	af02      	add	r7, sp, #8
 800dea0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800dea4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800dea8:	6018      	str	r0, [r3, #0]
 800deaa:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800deae:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800deb2:	6019      	str	r1, [r3, #0]
 800deb4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800deb8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800debc:	601a      	str	r2, [r3, #0]
  static  uint32_t l_receive_count = 0;
  uint8_t udpBuffferReceived[256];
  uint8_t ascii_buff[512];
  uint8_t ascii_buff_len = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[3]), HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[4]),
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[5]), HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[6]),
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[7]), aMessageInfo->mPeerPort);
 */

  int rx_length = otMessageRead(aMessage, otMessageGetOffset(aMessage), udpBuffferReceived, sizeof(udpBuffferReceived) - 1);
 800dec4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800dec8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	f7fe fec7 	bl	800cc60 <otMessageGetOffset>
 800ded2:	4603      	mov	r3, r0
 800ded4:	4619      	mov	r1, r3
 800ded6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800deda:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800dede:	f5a3 7046 	sub.w	r0, r3, #792	; 0x318
 800dee2:	23ff      	movs	r3, #255	; 0xff
 800dee4:	6800      	ldr	r0, [r0, #0]
 800dee6:	f7fe feeb 	bl	800ccc0 <otMessageRead>
 800deea:	4603      	mov	r3, r0
 800deec:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  if(rx_length < 5)
 800def0:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800def4:	2b04      	cmp	r3, #4
 800def6:	f340 8084 	ble.w	800e002 <HandleUdpReceive+0x16a>
	  return -1;

  uint8_t meas_data_length = udpBuffferReceived[3];
 800defa:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800defe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800df02:	78db      	ldrb	r3, [r3, #3]
 800df04:	f887 3313 	strb.w	r3, [r7, #787]	; 0x313
  if(meas_data_length > 128)
 800df08:	f897 3313 	ldrb.w	r3, [r7, #787]	; 0x313
 800df0c:	2b80      	cmp	r3, #128	; 0x80
 800df0e:	d87a      	bhi.n	800e006 <HandleUdpReceive+0x16e>
	  return -2;
  if(rx_length < meas_data_length+4)
 800df10:	f897 3313 	ldrb.w	r3, [r7, #787]	; 0x313
 800df14:	3303      	adds	r3, #3
 800df16:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 800df1a:	429a      	cmp	r2, r3
 800df1c:	dd75      	ble.n	800e00a <HandleUdpReceive+0x172>
	  return -3;

  ascii_buff_len += snprintf(&ascii_buff[ascii_buff_len], 512-ascii_buff_len, "{\"%04x\",\"%02x\",\"%02x\",\"", *((uint16_t*)&udpBuffferReceived[0]), udpBuffferReceived[2], udpBuffferReceived[3]);
 800df1e:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800df22:	f107 0210 	add.w	r2, r7, #16
 800df26:	18d0      	adds	r0, r2, r3
 800df28:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800df2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800df30:	4619      	mov	r1, r3
 800df32:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	461c      	mov	r4, r3
 800df3a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800df3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800df42:	789b      	ldrb	r3, [r3, #2]
 800df44:	461a      	mov	r2, r3
 800df46:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800df4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800df4e:	78db      	ldrb	r3, [r3, #3]
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	9200      	str	r2, [sp, #0]
 800df54:	4623      	mov	r3, r4
 800df56:	4a2f      	ldr	r2, [pc, #188]	; (800e014 <HandleUdpReceive+0x17c>)
 800df58:	f001 fcb4 	bl	800f8c4 <sniprintf>
 800df5c:	4603      	mov	r3, r0
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800df64:	4413      	add	r3, r2
 800df66:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
  for(int i=0;i<meas_data_length;i++)
 800df6a:	2300      	movs	r3, #0
 800df6c:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800df70:	e020      	b.n	800dfb4 <HandleUdpReceive+0x11c>
  {
	  ascii_buff_len += snprintf(&ascii_buff[ascii_buff_len], 512-ascii_buff_len, "%02x", udpBuffferReceived[4+i]);
 800df72:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800df76:	f107 0210 	add.w	r2, r7, #16
 800df7a:	18d0      	adds	r0, r2, r3
 800df7c:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800df80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800df84:	4619      	mov	r1, r3
 800df86:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800df8a:	3304      	adds	r3, #4
 800df8c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800df90:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800df94:	5cd3      	ldrb	r3, [r2, r3]
 800df96:	4a20      	ldr	r2, [pc, #128]	; (800e018 <HandleUdpReceive+0x180>)
 800df98:	f001 fc94 	bl	800f8c4 <sniprintf>
 800df9c:	4603      	mov	r3, r0
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
  for(int i=0;i<meas_data_length;i++)
 800dfaa:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800dfae:	3301      	adds	r3, #1
 800dfb0:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800dfb4:	f897 3313 	ldrb.w	r3, [r7, #787]	; 0x313
 800dfb8:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	dbd8      	blt.n	800df72 <HandleUdpReceive+0xda>
  }
  ascii_buff_len += snprintf(&ascii_buff[ascii_buff_len], 512-ascii_buff_len, "\"}\r\n");
 800dfc0:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800dfc4:	f107 0210 	add.w	r2, r7, #16
 800dfc8:	18d0      	adds	r0, r2, r3
 800dfca:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800dfce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dfd2:	4a12      	ldr	r2, [pc, #72]	; (800e01c <HandleUdpReceive+0x184>)
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	f001 fc75 	bl	800f8c4 <sniprintf>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f

  while(CDC_Transmit_FS(ascii_buff, ascii_buff_len) == 1);
 800dfe8:	bf00      	nop
 800dfea:	f897 231f 	ldrb.w	r2, [r7, #799]	; 0x31f
 800dfee:	f107 0310 	add.w	r3, r7, #16
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 fd4f 	bl	800ea98 <CDC_Transmit_FS>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d0f4      	beq.n	800dfea <HandleUdpReceive+0x152>
 800e000:	e004      	b.n	800e00c <HandleUdpReceive+0x174>
	  return -1;
 800e002:	bf00      	nop
 800e004:	e002      	b.n	800e00c <HandleUdpReceive+0x174>
	  return -2;
 800e006:	bf00      	nop
 800e008:	e000      	b.n	800e00c <HandleUdpReceive+0x174>
	  return -3;
 800e00a:	bf00      	nop
}
 800e00c:	f507 7749 	add.w	r7, r7, #804	; 0x324
 800e010:	46bd      	mov	sp, r7
 800e012:	bd90      	pop	{r4, r7, pc}
 800e014:	08010bcc 	.word	0x08010bcc
 800e018:	08010be4 	.word	0x08010be4
 800e01c:	08010bec 	.word	0x08010bec

0800e020 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800e028:	4a04      	ldr	r2, [pc, #16]	; (800e03c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6013      	str	r3, [r2, #0]
}
 800e02e:	bf00      	nop
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	200007a4 	.word	0x200007a4

0800e040 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800e040:	b480      	push	{r7}
 800e042:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800e044:	4b03      	ldr	r3, [pc, #12]	; (800e054 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	330c      	adds	r3, #12
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	200007a4 	.word	0x200007a4

0800e058 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800e058:	b480      	push	{r7}
 800e05a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800e05c:	4b03      	ldr	r3, [pc, #12]	; (800e06c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	330b      	adds	r3, #11
}
 800e062:	4618      	mov	r0, r3
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	200007a4 	.word	0x200007a4

0800e070 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 800e070:	b480      	push	{r7}
 800e072:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800e074:	4b03      	ldr	r3, [pc, #12]	; (800e084 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	330b      	adds	r3, #11
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr
 800e084:	200007a8 	.word	0x200007a8

0800e088 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800e08e:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <Ot_Cmd_Transfer_Common+0x44>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2200      	movs	r2, #0
 800e094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e098:	725a      	strb	r2, [r3, #9]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f042 0202 	orr.w	r2, r2, #2
 800e0a0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800e0a2:	4b0a      	ldr	r3, [pc, #40]	; (800e0cc <Ot_Cmd_Transfer_Common+0x44>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	330c      	adds	r3, #12
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	3302      	adds	r3, #2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <Ot_Cmd_Transfer_Common+0x44>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800e0ba:	f7fe fae1 	bl	800c680 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800e0be:	f000 f834 	bl	800e12a <Wait_Getting_Ack_From_M0>

}
 800e0c2:	bf00      	nop
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	200007a4 	.word	0x200007a4

0800e0d0 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 800e0d4:	f7ff ffd8 	bl	800e088 <Ot_Cmd_Transfer_Common>
}
 800e0d8:	bf00      	nop
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800e0e4:	f000 f828 	bl	800e138 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 800e0e8:	4b03      	ldr	r3, [pc, #12]	; (800e0f8 <TL_OT_CmdEvtReceived+0x1c>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	200002d4 	.word	0x200002d4

0800e0fc <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800e104:	4a04      	ldr	r2, [pc, #16]	; (800e118 <TL_THREAD_NotReceived+0x1c>)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800e10a:	f000 f81d 	bl	800e148 <Receive_Notification_From_M0>
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	200007a8 	.word	0x200007a8

0800e11c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800e120:	2004      	movs	r0, #4
 800e122:	f001 fb3b 	bl	800f79c <UTIL_SEQ_WaitEvt>
}
 800e126:	bf00      	nop
 800e128:	bd80      	pop	{r7, pc}

0800e12a <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800e12e:	2002      	movs	r0, #2
 800e130:	f001 fb34 	bl	800f79c <UTIL_SEQ_WaitEvt>
}
 800e134:	bf00      	nop
 800e136:	bd80      	pop	{r7, pc}

0800e138 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800e13c:	2002      	movs	r0, #2
 800e13e:	f001 fb0d 	bl	800f75c <UTIL_SEQ_SetEvt>
}
 800e142:	bf00      	nop
 800e144:	bd80      	pop	{r7, pc}
	...

0800e148 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800e14c:	4b05      	ldr	r3, [pc, #20]	; (800e164 <Receive_Notification_From_M0+0x1c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3301      	adds	r3, #1
 800e152:	4a04      	ldr	r2, [pc, #16]	; (800e164 <Receive_Notification_From_M0+0x1c>)
 800e154:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 800e156:	2100      	movs	r1, #0
 800e158:	2001      	movs	r0, #1
 800e15a:	f001 fad3 	bl	800f704 <UTIL_SEQ_SetTask>
}
 800e15e:	bf00      	nop
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	200007ac 	.word	0x200007ac

0800e168 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800e16c:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <RxCpltCallback+0x4c>)
 800e16e:	881b      	ldrh	r3, [r3, #0]
 800e170:	b29b      	uxth	r3, r3
 800e172:	2bff      	cmp	r3, #255	; 0xff
 800e174:	d816      	bhi.n	800e1a4 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800e176:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <RxCpltCallback+0x4c>)
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	b291      	uxth	r1, r2
 800e180:	4a0c      	ldr	r2, [pc, #48]	; (800e1b4 <RxCpltCallback+0x4c>)
 800e182:	8011      	strh	r1, [r2, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <RxCpltCallback+0x50>)
 800e188:	7819      	ldrb	r1, [r3, #0]
 800e18a:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <RxCpltCallback+0x54>)
 800e18c:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 800e18e:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <RxCpltCallback+0x50>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	2b0d      	cmp	r3, #13
 800e194:	d106      	bne.n	800e1a4 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 800e196:	4b0a      	ldr	r3, [pc, #40]	; (800e1c0 <RxCpltCallback+0x58>)
 800e198:	2201      	movs	r2, #1
 800e19a:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 800e19c:	2100      	movs	r1, #0
 800e19e:	2002      	movs	r0, #2
 800e1a0:	f001 fab0 	bl	800f704 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800e1a4:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <RxCpltCallback+0x5c>)
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	4903      	ldr	r1, [pc, #12]	; (800e1b8 <RxCpltCallback+0x50>)
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	f7f2 fe64 	bl	8000e78 <HW_UART_Receive_IT>
}
 800e1b0:	bf00      	nop
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	200007a0 	.word	0x200007a0
 800e1b8:	200005a0 	.word	0x200005a0
 800e1bc:	200006a0 	.word	0x200006a0
 800e1c0:	200007a2 	.word	0x200007a2
 800e1c4:	0800e169 	.word	0x0800e169

0800e1c8 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800e1cc:	22ff      	movs	r2, #255	; 0xff
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	4815      	ldr	r0, [pc, #84]	; (800e228 <Send_CLI_To_M0+0x60>)
 800e1d2:	f001 fcb7 	bl	800fb44 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800e1d6:	4b15      	ldr	r3, [pc, #84]	; (800e22c <Send_CLI_To_M0+0x64>)
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4914      	ldr	r1, [pc, #80]	; (800e230 <Send_CLI_To_M0+0x68>)
 800e1e0:	4811      	ldr	r0, [pc, #68]	; (800e228 <Send_CLI_To_M0+0x60>)
 800e1e2:	f001 fce3 	bl	800fbac <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800e1e6:	4b11      	ldr	r3, [pc, #68]	; (800e22c <Send_CLI_To_M0+0x64>)
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	4b11      	ldr	r3, [pc, #68]	; (800e234 <Send_CLI_To_M0+0x6c>)
 800e1f0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800e1f2:	4b10      	ldr	r3, [pc, #64]	; (800e234 <Send_CLI_To_M0+0x6c>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	725a      	strb	r2, [r3, #9]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800e1fc:	4b0e      	ldr	r3, [pc, #56]	; (800e238 <Send_CLI_To_M0+0x70>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 800e202:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <Send_CLI_To_M0+0x64>)
 800e204:	2200      	movs	r2, #0
 800e206:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800e208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e20c:	2100      	movs	r1, #0
 800e20e:	4808      	ldr	r0, [pc, #32]	; (800e230 <Send_CLI_To_M0+0x68>)
 800e210:	f001 fc98 	bl	800fb44 <memset>

  APP_DBG("[Send_CLI_To_M0] payload : %s", ThreadCliCmdBuffer.cmdserial.cmd.payload);
 800e214:	4b04      	ldr	r3, [pc, #16]	; (800e228 <Send_CLI_To_M0+0x60>)
 800e216:	4a09      	ldr	r2, [pc, #36]	; (800e23c <Send_CLI_To_M0+0x74>)
 800e218:	2101      	movs	r1, #1
 800e21a:	2000      	movs	r0, #0
 800e21c:	f7f3 f92c 	bl	8001478 <logApplication>

  TL_CLI_SendCmd();
 800e220:	f7fe fa3c 	bl	800c69c <TL_CLI_SendCmd>
}
 800e224:	bf00      	nop
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20030a60 	.word	0x20030a60
 800e22c:	200007a0 	.word	0x200007a0
 800e230:	200006a0 	.word	0x200006a0
 800e234:	20030a54 	.word	0x20030a54
 800e238:	200007a2 	.word	0x200007a2
 800e23c:	08010bf4 	.word	0x08010bf4

0800e240 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800e244:	f7fe fa46 	bl	800c6d4 <TL_THREAD_CliSendAck>
}
 800e248:	bf00      	nop
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 800e250:	4a07      	ldr	r2, [pc, #28]	; (800e270 <APP_THREAD_Init_UART_CLI+0x24>)
 800e252:	2100      	movs	r1, #0
 800e254:	2002      	movs	r0, #2
 800e256:	f001 fa33 	bl	800f6c0 <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 800e25a:	f7f3 fa45 	bl	80016e8 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <APP_THREAD_Init_UART_CLI+0x28>)
 800e260:	2201      	movs	r2, #1
 800e262:	4905      	ldr	r1, [pc, #20]	; (800e278 <APP_THREAD_Init_UART_CLI+0x2c>)
 800e264:	2000      	movs	r0, #0
 800e266:	f7f2 fe07 	bl	8000e78 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800e26a:	bf00      	nop
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	0800e1c9 	.word	0x0800e1c9
 800e274:	0800e169 	.word	0x0800e169
 800e278:	200005a0 	.word	0x200005a0

0800e27c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800e280:	4b08      	ldr	r3, [pc, #32]	; (800e2a4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800e282:	4a09      	ldr	r2, [pc, #36]	; (800e2a8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800e284:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800e286:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800e288:	4a08      	ldr	r2, [pc, #32]	; (800e2ac <APP_THREAD_TL_THREAD_INIT+0x30>)
 800e28a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800e28c:	4b05      	ldr	r3, [pc, #20]	; (800e2a4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800e28e:	4a08      	ldr	r2, [pc, #32]	; (800e2b0 <APP_THREAD_TL_THREAD_INIT+0x34>)
 800e290:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 800e292:	4b04      	ldr	r3, [pc, #16]	; (800e2a4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800e294:	4a07      	ldr	r2, [pc, #28]	; (800e2b4 <APP_THREAD_TL_THREAD_INIT+0x38>)
 800e296:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800e298:	4802      	ldr	r0, [pc, #8]	; (800e2a4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800e29a:	f7fe f9d1 	bl	800c640 <TL_THREAD_Init>
}
 800e29e:	bf00      	nop
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	200300d8 	.word	0x200300d8
 800e2a8:	2003083c 	.word	0x2003083c
 800e2ac:	20030948 	.word	0x20030948
 800e2b0:	20030a54 	.word	0x20030a54
 800e2b4:	20030b60 	.word	0x20030b60

0800e2b8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	7adb      	ldrb	r3, [r3, #11]
 800e2c8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	330c      	adds	r3, #12
 800e2ce:	490b      	ldr	r1, [pc, #44]	; (800e2fc <TL_THREAD_CliNotReceived+0x44>)
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f1 ff55 	bl	8000180 <strcmp>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d009      	beq.n	800e2f0 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f103 010c 	add.w	r1, r3, #12
 800e2e2:	7afb      	ldrb	r3, [r7, #11]
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	4b06      	ldr	r3, [pc, #24]	; (800e300 <TL_THREAD_CliNotReceived+0x48>)
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	f7f2 fde9 	bl	8000ec0 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 800e2ee:	e001      	b.n	800e2f4 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 800e2f0:	f7ff ffa6 	bl	800e240 <Send_CLI_Ack_For_OT>
}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	08010c14 	.word	0x08010c14
 800e300:	0800e305 	.word	0x0800e305

0800e304 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 800e308:	f7ff ff9a 	bl	800e240 <Send_CLI_Ack_For_OT>
}
 800e30c:	bf00      	nop
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 800e314:	4b09      	ldr	r3, [pc, #36]	; (800e33c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00d      	beq.n	800e338 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800e31c:	4b07      	ldr	r3, [pc, #28]	; (800e33c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d904      	bls.n	800e32e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800e324:	2100      	movs	r1, #0
 800e326:	2000      	movs	r0, #0
 800e328:	f7ff fbb2 	bl	800da90 <APP_THREAD_Error>
 800e32c:	e001      	b.n	800e332 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 800e32e:	f7fe fd07 	bl	800cd40 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800e332:	4b02      	ldr	r3, [pc, #8]	; (800e33c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800e334:	2200      	movs	r2, #0
 800e336:	601a      	str	r2, [r3, #0]
  }
}
 800e338:	bf00      	nop
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	200007ac 	.word	0x200007ac

0800e340 <LL_PWR_EnableBootC2>:
{
 800e340:	b480      	push	{r7}
 800e342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <LL_PWR_EnableBootC2+0x1c>)
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	4a04      	ldr	r2, [pc, #16]	; (800e35c <LL_PWR_EnableBootC2+0x1c>)
 800e34a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e34e:	60d3      	str	r3, [r2, #12]
}
 800e350:	bf00      	nop
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	58000400 	.word	0x58000400

0800e360 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e368:	4b06      	ldr	r3, [pc, #24]	; (800e384 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e36a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e36e:	4905      	ldr	r1, [pc, #20]	; (800e384 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4313      	orrs	r3, r2
 800e374:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	58000800 	.word	0x58000800

0800e388 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e392:	6a1a      	ldr	r2, [r3, #32]
 800e394:	4904      	ldr	r1, [pc, #16]	; (800e3a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4313      	orrs	r3, r2
 800e39a:	620b      	str	r3, [r1, #32]
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	58000800 	.word	0x58000800

0800e3ac <LL_AHB3_GRP1_EnableClock>:
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e3c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e3e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e3ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e3fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4013      	ands	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e408:	68fb      	ldr	r3, [r7, #12]
}
 800e40a:	bf00      	nop
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <LL_C1_IPCC_EnableIT_TXF>:
{
 800e416:	b480      	push	{r7}
 800e418:	b083      	sub	sp, #12
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
}
 800e42a:	bf00      	nop
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <LL_C1_IPCC_EnableIT_RXO>:
{
 800e436:	b480      	push	{r7}
 800e438:	b083      	sub	sp, #12
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f043 0201 	orr.w	r2, r3, #1
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	601a      	str	r2, [r3, #0]
}
 800e44a:	bf00      	nop
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800e456:	b480      	push	{r7}
 800e458:	b083      	sub	sp, #12
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685a      	ldr	r2, [r3, #4]
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	041b      	lsls	r3, r3, #16
 800e468:	43db      	mvns	r3, r3
 800e46a:	401a      	ands	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	605a      	str	r2, [r3, #4]
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	041b      	lsls	r3, r3, #16
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	605a      	str	r2, [r3, #4]
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	43db      	mvns	r3, r3
 800e4b2:	401a      	ands	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	605a      	str	r2, [r3, #4]
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	431a      	orrs	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	605a      	str	r2, [r3, #4]
}
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	609a      	str	r2, [r3, #8]
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <LL_C1_IPCC_SetFlag_CHx>:
{
 800e502:	b480      	push	{r7}
 800e504:	b083      	sub	sp, #12
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	041a      	lsls	r2, r3, #16
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	609a      	str	r2, [r3, #8]
}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	4013      	ands	r3, r2
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	429a      	cmp	r2, r3
 800e536:	d101      	bne.n	800e53c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e538:	2301      	movs	r3, #1
 800e53a:	e000      	b.n	800e53e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	370c      	adds	r7, #12
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b083      	sub	sp, #12
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	69da      	ldr	r2, [r3, #28]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	4013      	ands	r3, r2
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d101      	bne.n	800e566 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e562:	2301      	movs	r3, #1
 800e564:	e000      	b.n	800e568 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e578:	2102      	movs	r1, #2
 800e57a:	4828      	ldr	r0, [pc, #160]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e57c:	f7ff ffe5 	bl	800e54a <LL_C2_IPCC_IsActiveFlag_CHx>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d008      	beq.n	800e598 <HW_IPCC_Rx_Handler+0x24>
 800e586:	4b25      	ldr	r3, [pc, #148]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d102      	bne.n	800e598 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e592:	f000 f8f1 	bl	800e778 <HW_IPCC_SYS_EvtHandler>
 800e596:	e03e      	b.n	800e616 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800e598:	2104      	movs	r1, #4
 800e59a:	4820      	ldr	r0, [pc, #128]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e59c:	f7ff ffd5 	bl	800e54a <LL_C2_IPCC_IsActiveFlag_CHx>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d008      	beq.n	800e5b8 <HW_IPCC_Rx_Handler+0x44>
 800e5a6:	4b1d      	ldr	r3, [pc, #116]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	f003 0304 	and.w	r3, r3, #4
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d102      	bne.n	800e5b8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800e5b2:	f000 f93b 	bl	800e82c <HW_IPCC_THREAD_NotEvtHandler>
 800e5b6:	e02e      	b.n	800e616 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800e5b8:	2110      	movs	r1, #16
 800e5ba:	4818      	ldr	r0, [pc, #96]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5bc:	f7ff ffc5 	bl	800e54a <LL_C2_IPCC_IsActiveFlag_CHx>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d008      	beq.n	800e5d8 <HW_IPCC_Rx_Handler+0x64>
 800e5c6:	4b15      	ldr	r3, [pc, #84]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	f003 0310 	and.w	r3, r3, #16
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800e5d2:	f000 f937 	bl	800e844 <HW_IPCC_THREAD_CliNotEvtHandler>
 800e5d6:	e01e      	b.n	800e616 <HW_IPCC_Rx_Handler+0xa2>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4810      	ldr	r0, [pc, #64]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5dc:	f7ff ffb5 	bl	800e54a <LL_C2_IPCC_IsActiveFlag_CHx>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d008      	beq.n	800e5f8 <HW_IPCC_Rx_Handler+0x84>
 800e5e6:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d102      	bne.n	800e5f8 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800e5f2:	f000 f885 	bl	800e700 <HW_IPCC_BLE_EvtHandler>
 800e5f6:	e00e      	b.n	800e616 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e5f8:	2108      	movs	r1, #8
 800e5fa:	4808      	ldr	r0, [pc, #32]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e5fc:	f7ff ffa5 	bl	800e54a <LL_C2_IPCC_IsActiveFlag_CHx>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <HW_IPCC_Rx_Handler+0xa4>
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <HW_IPCC_Rx_Handler+0xa8>)
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f003 0308 	and.w	r3, r3, #8
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e612:	f000 f963 	bl	800e8dc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e616:	bf00      	nop
 800e618:	bf00      	nop
}
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	58000c00 	.word	0x58000c00

0800e620 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e624:	2102      	movs	r1, #2
 800e626:	4820      	ldr	r0, [pc, #128]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e628:	f7ff ff7a 	bl	800e520 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d108      	bne.n	800e644 <HW_IPCC_Tx_Handler+0x24>
 800e632:	4b1d      	ldr	r3, [pc, #116]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d102      	bne.n	800e644 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e63e:	f000 f88f 	bl	800e760 <HW_IPCC_SYS_CmdEvtHandler>
 800e642:	e02e      	b.n	800e6a2 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800e644:	2104      	movs	r1, #4
 800e646:	4818      	ldr	r0, [pc, #96]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e648:	f7ff ff6a 	bl	800e520 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d108      	bne.n	800e664 <HW_IPCC_Tx_Handler+0x44>
 800e652:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800e65e:	f000 f8d9 	bl	800e814 <HW_IPCC_OT_CmdEvtHandler>
 800e662:	e01e      	b.n	800e6a2 <HW_IPCC_Tx_Handler+0x82>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e664:	2108      	movs	r1, #8
 800e666:	4810      	ldr	r0, [pc, #64]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e668:	f7ff ff5a 	bl	800e520 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d108      	bne.n	800e684 <HW_IPCC_Tx_Handler+0x64>
 800e672:	4b0d      	ldr	r3, [pc, #52]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e67e:	f000 f90f 	bl	800e8a0 <HW_IPCC_MM_FreeBufHandler>
 800e682:	e00e      	b.n	800e6a2 <HW_IPCC_Tx_Handler+0x82>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e684:	2120      	movs	r1, #32
 800e686:	4808      	ldr	r0, [pc, #32]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e688:	f7ff ff4a 	bl	800e520 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d108      	bne.n	800e6a4 <HW_IPCC_Tx_Handler+0x84>
 800e692:	4b05      	ldr	r3, [pc, #20]	; (800e6a8 <HW_IPCC_Tx_Handler+0x88>)
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d102      	bne.n	800e6a4 <HW_IPCC_Tx_Handler+0x84>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e69e:	f000 f83b 	bl	800e718 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e6a2:	bf00      	nop
 800e6a4:	bf00      	nop
}
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	58000c00 	.word	0x58000c00

0800e6ac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e6b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e6b4:	f7ff fe93 	bl	800e3de <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e6b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e6bc:	f7ff fe64 	bl	800e388 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e6c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e6c4:	f7ff fe4c 	bl	800e360 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e6c8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e6ca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e6cc:	f7ff fe38 	bl	800e340 <LL_PWR_EnableBootC2>

  return;
 800e6d0:	bf00      	nop
}
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e6d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e6dc:	f7ff fe66 	bl	800e3ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e6e0:	4806      	ldr	r0, [pc, #24]	; (800e6fc <HW_IPCC_Init+0x28>)
 800e6e2:	f7ff fea8 	bl	800e436 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e6e6:	4805      	ldr	r0, [pc, #20]	; (800e6fc <HW_IPCC_Init+0x28>)
 800e6e8:	f7ff fe95 	bl	800e416 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e6ec:	202c      	movs	r0, #44	; 0x2c
 800e6ee:	f7f3 faf6 	bl	8001cde <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e6f2:	202d      	movs	r0, #45	; 0x2d
 800e6f4:	f7f3 faf3 	bl	8001cde <HAL_NVIC_EnableIRQ>

  return;
 800e6f8:	bf00      	nop
}
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	58000c00 	.word	0x58000c00

0800e700 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e704:	f7fd fee4 	bl	800c4d0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e708:	2101      	movs	r1, #1
 800e70a:	4802      	ldr	r0, [pc, #8]	; (800e714 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e70c:	f7ff feeb 	bl	800e4e6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e710:	bf00      	nop
}
 800e712:	bd80      	pop	{r7, pc}
 800e714:	58000c00 	.word	0x58000c00

0800e718 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e71c:	2120      	movs	r1, #32
 800e71e:	4803      	ldr	r0, [pc, #12]	; (800e72c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e720:	f7ff feac 	bl	800e47c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e724:	f7fd ff04 	bl	800c530 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e728:	bf00      	nop
}
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	58000c00 	.word	0x58000c00

0800e730 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e734:	2102      	movs	r1, #2
 800e736:	4802      	ldr	r0, [pc, #8]	; (800e740 <HW_IPCC_SYS_Init+0x10>)
 800e738:	f7ff feb2 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e73c:	bf00      	nop
}
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	58000c00 	.word	0x58000c00

0800e744 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e748:	2102      	movs	r1, #2
 800e74a:	4804      	ldr	r0, [pc, #16]	; (800e75c <HW_IPCC_SYS_SendCmd+0x18>)
 800e74c:	f7ff fed9 	bl	800e502 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e750:	2102      	movs	r1, #2
 800e752:	4802      	ldr	r0, [pc, #8]	; (800e75c <HW_IPCC_SYS_SendCmd+0x18>)
 800e754:	f7ff fe7f 	bl	800e456 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e758:	bf00      	nop
}
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	58000c00 	.word	0x58000c00

0800e760 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e764:	2102      	movs	r1, #2
 800e766:	4803      	ldr	r0, [pc, #12]	; (800e774 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e768:	f7ff fe88 	bl	800e47c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e76c:	f7fd ff30 	bl	800c5d0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e770:	bf00      	nop
}
 800e772:	bd80      	pop	{r7, pc}
 800e774:	58000c00 	.word	0x58000c00

0800e778 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e77c:	f7fd ff3e 	bl	800c5fc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e780:	2102      	movs	r1, #2
 800e782:	4802      	ldr	r0, [pc, #8]	; (800e78c <HW_IPCC_SYS_EvtHandler+0x14>)
 800e784:	f7ff feaf 	bl	800e4e6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e788:	bf00      	nop
}
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	58000c00 	.word	0x58000c00

0800e790 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800e794:	2104      	movs	r1, #4
 800e796:	4804      	ldr	r0, [pc, #16]	; (800e7a8 <HW_IPCC_THREAD_Init+0x18>)
 800e798:	f7ff fe82 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800e79c:	2110      	movs	r1, #16
 800e79e:	4802      	ldr	r0, [pc, #8]	; (800e7a8 <HW_IPCC_THREAD_Init+0x18>)
 800e7a0:	f7ff fe7e 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e7a4:	bf00      	nop
}
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	58000c00 	.word	0x58000c00

0800e7ac <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800e7b0:	2104      	movs	r1, #4
 800e7b2:	4804      	ldr	r0, [pc, #16]	; (800e7c4 <HW_IPCC_OT_SendCmd+0x18>)
 800e7b4:	f7ff fea5 	bl	800e502 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800e7b8:	2104      	movs	r1, #4
 800e7ba:	4802      	ldr	r0, [pc, #8]	; (800e7c4 <HW_IPCC_OT_SendCmd+0x18>)
 800e7bc:	f7ff fe4b 	bl	800e456 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e7c0:	bf00      	nop
}
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	58000c00 	.word	0x58000c00

0800e7c8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 800e7cc:	2110      	movs	r1, #16
 800e7ce:	4802      	ldr	r0, [pc, #8]	; (800e7d8 <HW_IPCC_CLI_SendCmd+0x10>)
 800e7d0:	f7ff fe97 	bl	800e502 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e7d4:	bf00      	nop
}
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	58000c00 	.word	0x58000c00

0800e7dc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800e7e0:	2104      	movs	r1, #4
 800e7e2:	4804      	ldr	r0, [pc, #16]	; (800e7f4 <HW_IPCC_THREAD_SendAck+0x18>)
 800e7e4:	f7ff fe7f 	bl	800e4e6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800e7e8:	2104      	movs	r1, #4
 800e7ea:	4802      	ldr	r0, [pc, #8]	; (800e7f4 <HW_IPCC_THREAD_SendAck+0x18>)
 800e7ec:	f7ff fe58 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e7f0:	bf00      	nop
}
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	58000c00 	.word	0x58000c00

0800e7f8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800e7fc:	2110      	movs	r1, #16
 800e7fe:	4804      	ldr	r0, [pc, #16]	; (800e810 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800e800:	f7ff fe71 	bl	800e4e6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800e804:	2110      	movs	r1, #16
 800e806:	4802      	ldr	r0, [pc, #8]	; (800e810 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800e808:	f7ff fe4a 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e80c:	bf00      	nop
}
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	58000c00 	.word	0x58000c00

0800e814 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800e818:	2104      	movs	r1, #4
 800e81a:	4803      	ldr	r0, [pc, #12]	; (800e828 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800e81c:	f7ff fe2e 	bl	800e47c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 800e820:	f7fd ff66 	bl	800c6f0 <HW_IPCC_OT_CmdEvtNot>

  return;
 800e824:	bf00      	nop
}
 800e826:	bd80      	pop	{r7, pc}
 800e828:	58000c00 	.word	0x58000c00

0800e82c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800e830:	2104      	movs	r1, #4
 800e832:	4803      	ldr	r0, [pc, #12]	; (800e840 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800e834:	f7ff fe46 	bl	800e4c4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800e838:	f7fd ff66 	bl	800c708 <HW_IPCC_THREAD_EvtNot>

  return;
 800e83c:	bf00      	nop
}
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	58000c00 	.word	0x58000c00

0800e844 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800e848:	2110      	movs	r1, #16
 800e84a:	4803      	ldr	r0, [pc, #12]	; (800e858 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800e84c:	f7ff fe3a 	bl	800e4c4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 800e850:	f7fd ff66 	bl	800c720 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800e854:	bf00      	nop
}
 800e856:	bd80      	pop	{r7, pc}
 800e858:	58000c00 	.word	0x58000c00

0800e85c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e864:	2108      	movs	r1, #8
 800e866:	480c      	ldr	r0, [pc, #48]	; (800e898 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e868:	f7ff fe5a 	bl	800e520 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d007      	beq.n	800e882 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e872:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e878:	2108      	movs	r1, #8
 800e87a:	4807      	ldr	r0, [pc, #28]	; (800e898 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e87c:	f7ff fdeb 	bl	800e456 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e880:	e006      	b.n	800e890 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e886:	2108      	movs	r1, #8
 800e888:	4803      	ldr	r0, [pc, #12]	; (800e898 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e88a:	f7ff fe3a 	bl	800e502 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e88e:	bf00      	nop
}
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	58000c00 	.word	0x58000c00
 800e89c:	200007e4 	.word	0x200007e4

0800e8a0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	4806      	ldr	r0, [pc, #24]	; (800e8c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e8a8:	f7ff fde8 	bl	800e47c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e8ac:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e8b2:	2108      	movs	r1, #8
 800e8b4:	4802      	ldr	r0, [pc, #8]	; (800e8c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e8b6:	f7ff fe24 	bl	800e502 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e8ba:	bf00      	nop
}
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	58000c00 	.word	0x58000c00
 800e8c4:	200007e4 	.word	0x200007e4

0800e8c8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e8cc:	2108      	movs	r1, #8
 800e8ce:	4802      	ldr	r0, [pc, #8]	; (800e8d8 <HW_IPCC_TRACES_Init+0x10>)
 800e8d0:	f7ff fde6 	bl	800e4a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e8d4:	bf00      	nop
}
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	58000c00 	.word	0x58000c00

0800e8dc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e8e0:	f7fd ffb0 	bl	800c844 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e8e4:	2108      	movs	r1, #8
 800e8e6:	4802      	ldr	r0, [pc, #8]	; (800e8f0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e8e8:	f7ff fdfd 	bl	800e4e6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e8ec:	bf00      	nop
}
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	58000c00 	.word	0x58000c00

0800e8f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	4912      	ldr	r1, [pc, #72]	; (800e944 <MX_USB_Device_Init+0x50>)
 800e8fc:	4812      	ldr	r0, [pc, #72]	; (800e948 <MX_USB_Device_Init+0x54>)
 800e8fe:	f7fc fa79 	bl	800adf4 <USBD_Init>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e908:	f7f2 fc92 	bl	8001230 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e90c:	490f      	ldr	r1, [pc, #60]	; (800e94c <MX_USB_Device_Init+0x58>)
 800e90e:	480e      	ldr	r0, [pc, #56]	; (800e948 <MX_USB_Device_Init+0x54>)
 800e910:	f7fc faa0 	bl	800ae54 <USBD_RegisterClass>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e91a:	f7f2 fc89 	bl	8001230 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e91e:	490c      	ldr	r1, [pc, #48]	; (800e950 <MX_USB_Device_Init+0x5c>)
 800e920:	4809      	ldr	r0, [pc, #36]	; (800e948 <MX_USB_Device_Init+0x54>)
 800e922:	f7fc f9c1 	bl	800aca8 <USBD_CDC_RegisterInterface>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e92c:	f7f2 fc80 	bl	8001230 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e930:	4805      	ldr	r0, [pc, #20]	; (800e948 <MX_USB_Device_Init+0x54>)
 800e932:	f7fc fab6 	bl	800aea2 <USBD_Start>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e93c:	f7f2 fc78 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e940:	bf00      	nop
 800e942:	bd80      	pop	{r7, pc}
 800e944:	20000150 	.word	0x20000150
 800e948:	200007e8 	.word	0x200007e8
 800e94c:	2000001c 	.word	0x2000001c
 800e950:	2000013c 	.word	0x2000013c

0800e954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e958:	2200      	movs	r2, #0
 800e95a:	4905      	ldr	r1, [pc, #20]	; (800e970 <CDC_Init_FS+0x1c>)
 800e95c:	4805      	ldr	r0, [pc, #20]	; (800e974 <CDC_Init_FS+0x20>)
 800e95e:	f7fc f9b8 	bl	800acd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e962:	4905      	ldr	r1, [pc, #20]	; (800e978 <CDC_Init_FS+0x24>)
 800e964:	4803      	ldr	r0, [pc, #12]	; (800e974 <CDC_Init_FS+0x20>)
 800e966:	f7fc f9d2 	bl	800ad0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e96a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	200012b8 	.word	0x200012b8
 800e974:	200007e8 	.word	0x200007e8
 800e978:	20000ab8 	.word	0x20000ab8

0800e97c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e97c:	b480      	push	{r7}
 800e97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e982:	4618      	mov	r0, r3
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	6039      	str	r1, [r7, #0]
 800e996:	71fb      	strb	r3, [r7, #7]
 800e998:	4613      	mov	r3, r2
 800e99a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */

  switch(cmd)
 800e99c:	79fb      	ldrb	r3, [r7, #7]
 800e99e:	2b23      	cmp	r3, #35	; 0x23
 800e9a0:	d85c      	bhi.n	800ea5c <CDC_Control_FS+0xd0>
 800e9a2:	a201      	add	r2, pc, #4	; (adr r2, 800e9a8 <CDC_Control_FS+0x1c>)
 800e9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a8:	0800ea5d 	.word	0x0800ea5d
 800e9ac:	0800ea5d 	.word	0x0800ea5d
 800e9b0:	0800ea5d 	.word	0x0800ea5d
 800e9b4:	0800ea5d 	.word	0x0800ea5d
 800e9b8:	0800ea5d 	.word	0x0800ea5d
 800e9bc:	0800ea5d 	.word	0x0800ea5d
 800e9c0:	0800ea5d 	.word	0x0800ea5d
 800e9c4:	0800ea5d 	.word	0x0800ea5d
 800e9c8:	0800ea5d 	.word	0x0800ea5d
 800e9cc:	0800ea5d 	.word	0x0800ea5d
 800e9d0:	0800ea5d 	.word	0x0800ea5d
 800e9d4:	0800ea5d 	.word	0x0800ea5d
 800e9d8:	0800ea5d 	.word	0x0800ea5d
 800e9dc:	0800ea5d 	.word	0x0800ea5d
 800e9e0:	0800ea5d 	.word	0x0800ea5d
 800e9e4:	0800ea5d 	.word	0x0800ea5d
 800e9e8:	0800ea5d 	.word	0x0800ea5d
 800e9ec:	0800ea5d 	.word	0x0800ea5d
 800e9f0:	0800ea5d 	.word	0x0800ea5d
 800e9f4:	0800ea5d 	.word	0x0800ea5d
 800e9f8:	0800ea5d 	.word	0x0800ea5d
 800e9fc:	0800ea5d 	.word	0x0800ea5d
 800ea00:	0800ea5d 	.word	0x0800ea5d
 800ea04:	0800ea5d 	.word	0x0800ea5d
 800ea08:	0800ea5d 	.word	0x0800ea5d
 800ea0c:	0800ea5d 	.word	0x0800ea5d
 800ea10:	0800ea5d 	.word	0x0800ea5d
 800ea14:	0800ea5d 	.word	0x0800ea5d
 800ea18:	0800ea5d 	.word	0x0800ea5d
 800ea1c:	0800ea5d 	.word	0x0800ea5d
 800ea20:	0800ea5d 	.word	0x0800ea5d
 800ea24:	0800ea5d 	.word	0x0800ea5d
 800ea28:	0800ea39 	.word	0x0800ea39
 800ea2c:	0800ea4b 	.word	0x0800ea4b
 800ea30:	0800ea5d 	.word	0x0800ea5d
 800ea34:	0800ea5d 	.word	0x0800ea5d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 800ea38:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <CDC_Control_FS+0xe0>)
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	6810      	ldr	r0, [r2, #0]
 800ea3e:	6018      	str	r0, [r3, #0]
 800ea40:	8891      	ldrh	r1, [r2, #4]
 800ea42:	7992      	ldrb	r2, [r2, #6]
 800ea44:	8099      	strh	r1, [r3, #4]
 800ea46:	719a      	strb	r2, [r3, #6]
    break;
 800ea48:	e009      	b.n	800ea5e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	4a07      	ldr	r2, [pc, #28]	; (800ea6c <CDC_Control_FS+0xe0>)
 800ea4e:	6810      	ldr	r0, [r2, #0]
 800ea50:	6018      	str	r0, [r3, #0]
 800ea52:	8891      	ldrh	r1, [r2, #4]
 800ea54:	7992      	ldrb	r2, [r2, #6]
 800ea56:	8099      	strh	r1, [r3, #4]
 800ea58:	719a      	strb	r2, [r3, #6]
    break;
 800ea5a:	e000      	b.n	800ea5e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea5c:	bf00      	nop
  }

  return (USBD_OK);
 800ea5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20000134 	.word	0x20000134

0800ea70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	4805      	ldr	r0, [pc, #20]	; (800ea94 <CDC_Receive_FS+0x24>)
 800ea7e:	f7fc f946 	bl	800ad0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea82:	4804      	ldr	r0, [pc, #16]	; (800ea94 <CDC_Receive_FS+0x24>)
 800ea84:	f7fc f98c 	bl	800ada0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	200007e8 	.word	0x200007e8

0800ea98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eaa8:	4b10      	ldr	r3, [pc, #64]	; (800eaec <CDC_Transmit_FS+0x54>)
 800eaaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d001      	beq.n	800eabe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e011      	b.n	800eae2 <CDC_Transmit_FS+0x4a>
  }

  memcpy(UserTxBufferFS, Buf, Len);
 800eabe:	887b      	ldrh	r3, [r7, #2]
 800eac0:	461a      	mov	r2, r3
 800eac2:	6879      	ldr	r1, [r7, #4]
 800eac4:	480a      	ldr	r0, [pc, #40]	; (800eaf0 <CDC_Transmit_FS+0x58>)
 800eac6:	f001 f871 	bl	800fbac <memcpy>

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len);
 800eaca:	887b      	ldrh	r3, [r7, #2]
 800eacc:	461a      	mov	r2, r3
 800eace:	4908      	ldr	r1, [pc, #32]	; (800eaf0 <CDC_Transmit_FS+0x58>)
 800ead0:	4806      	ldr	r0, [pc, #24]	; (800eaec <CDC_Transmit_FS+0x54>)
 800ead2:	f7fc f8fe 	bl	800acd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ead6:	4805      	ldr	r0, [pc, #20]	; (800eaec <CDC_Transmit_FS+0x54>)
 800ead8:	f7fc f932 	bl	800ad40 <USBD_CDC_TransmitPacket>
 800eadc:	4603      	mov	r3, r0
 800eade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	200007e8 	.word	0x200007e8
 800eaf0:	200012b8 	.word	0x200012b8

0800eaf4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	4613      	mov	r3, r2
 800eb00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb02:	2300      	movs	r3, #0
 800eb04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eb06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	371c      	adds	r7, #28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
	...

0800eb18 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	6039      	str	r1, [r7, #0]
 800eb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2212      	movs	r2, #18
 800eb28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800eb2a:	4b03      	ldr	r3, [pc, #12]	; (800eb38 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20000170 	.word	0x20000170

0800eb3c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	6039      	str	r1, [r7, #0]
 800eb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2204      	movs	r2, #4
 800eb4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb4e:	4b03      	ldr	r3, [pc, #12]	; (800eb5c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	20000184 	.word	0x20000184

0800eb60 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	6039      	str	r1, [r7, #0]
 800eb6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb6c:	79fb      	ldrb	r3, [r7, #7]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d105      	bne.n	800eb7e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	4907      	ldr	r1, [pc, #28]	; (800eb94 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb76:	4808      	ldr	r0, [pc, #32]	; (800eb98 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb78:	f7fd f97b 	bl	800be72 <USBD_GetString>
 800eb7c:	e004      	b.n	800eb88 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	4904      	ldr	r1, [pc, #16]	; (800eb94 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb82:	4805      	ldr	r0, [pc, #20]	; (800eb98 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb84:	f7fd f975 	bl	800be72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb88:	4b02      	ldr	r3, [pc, #8]	; (800eb94 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20001ab8 	.word	0x20001ab8
 800eb98:	08010c18 	.word	0x08010c18

0800eb9c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	6039      	str	r1, [r7, #0]
 800eba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	4904      	ldr	r1, [pc, #16]	; (800ebbc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ebac:	4804      	ldr	r0, [pc, #16]	; (800ebc0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ebae:	f7fd f960 	bl	800be72 <USBD_GetString>
  return USBD_StrDesc;
 800ebb2:	4b02      	ldr	r3, [pc, #8]	; (800ebbc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20001ab8 	.word	0x20001ab8
 800ebc0:	08010c30 	.word	0x08010c30

0800ebc4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	6039      	str	r1, [r7, #0]
 800ebce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	221a      	movs	r2, #26
 800ebd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebd6:	f000 f843 	bl	800ec60 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ebda:	4b02      	ldr	r3, [pc, #8]	; (800ebe4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	20000188 	.word	0x20000188

0800ebe8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	6039      	str	r1, [r7, #0]
 800ebf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d105      	bne.n	800ec06 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4907      	ldr	r1, [pc, #28]	; (800ec1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ebfe:	4808      	ldr	r0, [pc, #32]	; (800ec20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ec00:	f7fd f937 	bl	800be72 <USBD_GetString>
 800ec04:	e004      	b.n	800ec10 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	4904      	ldr	r1, [pc, #16]	; (800ec1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ec0a:	4805      	ldr	r0, [pc, #20]	; (800ec20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ec0c:	f7fd f931 	bl	800be72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec10:	4b02      	ldr	r3, [pc, #8]	; (800ec1c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20001ab8 	.word	0x20001ab8
 800ec20:	08010c44 	.word	0x08010c44

0800ec24 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	6039      	str	r1, [r7, #0]
 800ec2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d105      	bne.n	800ec42 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4907      	ldr	r1, [pc, #28]	; (800ec58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ec3a:	4808      	ldr	r0, [pc, #32]	; (800ec5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ec3c:	f7fd f919 	bl	800be72 <USBD_GetString>
 800ec40:	e004      	b.n	800ec4c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	4904      	ldr	r1, [pc, #16]	; (800ec58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ec46:	4805      	ldr	r0, [pc, #20]	; (800ec5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ec48:	f7fd f913 	bl	800be72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec4c:	4b02      	ldr	r3, [pc, #8]	; (800ec58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3708      	adds	r7, #8
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20001ab8 	.word	0x20001ab8
 800ec5c:	08010c50 	.word	0x08010c50

0800ec60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec66:	4b0f      	ldr	r3, [pc, #60]	; (800eca4 <Get_SerialNum+0x44>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec6c:	4b0e      	ldr	r3, [pc, #56]	; (800eca8 <Get_SerialNum+0x48>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec72:	4b0e      	ldr	r3, [pc, #56]	; (800ecac <Get_SerialNum+0x4c>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d009      	beq.n	800ec9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec86:	2208      	movs	r2, #8
 800ec88:	4909      	ldr	r1, [pc, #36]	; (800ecb0 <Get_SerialNum+0x50>)
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f000 f814 	bl	800ecb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec90:	2204      	movs	r2, #4
 800ec92:	4908      	ldr	r1, [pc, #32]	; (800ecb4 <Get_SerialNum+0x54>)
 800ec94:	68b8      	ldr	r0, [r7, #8]
 800ec96:	f000 f80f 	bl	800ecb8 <IntToUnicode>
  }
}
 800ec9a:	bf00      	nop
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	1fff7590 	.word	0x1fff7590
 800eca8:	1fff7594 	.word	0x1fff7594
 800ecac:	1fff7598 	.word	0x1fff7598
 800ecb0:	2000018a 	.word	0x2000018a
 800ecb4:	2000019a 	.word	0x2000019a

0800ecb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b087      	sub	sp, #28
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecca:	2300      	movs	r3, #0
 800eccc:	75fb      	strb	r3, [r7, #23]
 800ecce:	e027      	b.n	800ed20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	0f1b      	lsrs	r3, r3, #28
 800ecd4:	2b09      	cmp	r3, #9
 800ecd6:	d80b      	bhi.n	800ecf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	0f1b      	lsrs	r3, r3, #28
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	7dfb      	ldrb	r3, [r7, #23]
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	4619      	mov	r1, r3
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	440b      	add	r3, r1
 800ece8:	3230      	adds	r2, #48	; 0x30
 800ecea:	b2d2      	uxtb	r2, r2
 800ecec:	701a      	strb	r2, [r3, #0]
 800ecee:	e00a      	b.n	800ed06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	0f1b      	lsrs	r3, r3, #28
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	7dfb      	ldrb	r3, [r7, #23]
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	440b      	add	r3, r1
 800ed00:	3237      	adds	r2, #55	; 0x37
 800ed02:	b2d2      	uxtb	r2, r2
 800ed04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	011b      	lsls	r3, r3, #4
 800ed0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	3301      	adds	r3, #1
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	4413      	add	r3, r2
 800ed16:	2200      	movs	r2, #0
 800ed18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	75fb      	strb	r3, [r7, #23]
 800ed20:	7dfa      	ldrb	r2, [r7, #23]
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d3d3      	bcc.n	800ecd0 <IntToUnicode+0x18>
  }
}
 800ed28:	bf00      	nop
 800ed2a:	bf00      	nop
 800ed2c:	371c      	adds	r7, #28
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <LL_AHB2_GRP1_EnableClock>:
{
 800ed36:	b480      	push	{r7}
 800ed38:	b085      	sub	sp, #20
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ed3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ed4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4013      	ands	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
}
 800ed5c:	bf00      	nop
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <LL_APB1_GRP1_EnableClock>:
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ed70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ed80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4013      	ands	r3, r2
 800ed8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
}
 800ed8e:	bf00      	nop
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
	...

0800ed9c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b09c      	sub	sp, #112	; 0x70
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eda4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	605a      	str	r2, [r3, #4]
 800edae:	609a      	str	r2, [r3, #8]
 800edb0:	60da      	str	r2, [r3, #12]
 800edb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800edb4:	f107 030c 	add.w	r3, r7, #12
 800edb8:	2250      	movs	r2, #80	; 0x50
 800edba:	2100      	movs	r1, #0
 800edbc:	4618      	mov	r0, r3
 800edbe:	f000 fec1 	bl	800fb44 <memset>
  if(pcdHandle->Instance==USB)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a20      	ldr	r2, [pc, #128]	; (800ee48 <HAL_PCD_MspInit+0xac>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d138      	bne.n	800ee3e <HAL_PCD_MspInit+0xa2>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800edcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800edd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800edd6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800edd8:	f107 030c 	add.w	r3, r7, #12
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f6 fd0c 	bl	80057fa <HAL_RCCEx_PeriphCLKConfig>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ede8:	f7f2 fa22 	bl	8001230 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edec:	2001      	movs	r0, #1
 800edee:	f7ff ffa2 	bl	800ed36 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800edf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800edf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edf8:	2302      	movs	r3, #2
 800edfa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee00:	2300      	movs	r3, #0
 800ee02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ee04:	230a      	movs	r3, #10
 800ee06:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee12:	f7f3 fa19 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ee16:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ee1a:	f7ff ffa5 	bl	800ed68 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2100      	movs	r1, #0
 800ee22:	2013      	movs	r0, #19
 800ee24:	f7f2 ff41 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ee28:	2013      	movs	r0, #19
 800ee2a:	f7f2 ff58 	bl	8001cde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2100      	movs	r1, #0
 800ee32:	2014      	movs	r0, #20
 800ee34:	f7f2 ff39 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ee38:	2014      	movs	r0, #20
 800ee3a:	f7f2 ff50 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ee3e:	bf00      	nop
 800ee40:	3770      	adds	r7, #112	; 0x70
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	40006800 	.word	0x40006800

0800ee4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800ee60:	4619      	mov	r1, r3
 800ee62:	4610      	mov	r0, r2
 800ee64:	f7fc f868 	bl	800af38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800ee82:	78fa      	ldrb	r2, [r7, #3]
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	4613      	mov	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	440b      	add	r3, r1
 800ee90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	78fb      	ldrb	r3, [r7, #3]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	f7fc f8a2 	bl	800afe2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ee9e:	bf00      	nop
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b082      	sub	sp, #8
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	460b      	mov	r3, r1
 800eeb0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	440b      	add	r3, r1
 800eec6:	3340      	adds	r3, #64	; 0x40
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	4619      	mov	r1, r3
 800eece:	f7fc f8eb 	bl	800b0a8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800eed2:	bf00      	nop
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b082      	sub	sp, #8
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fc f9ff 	bl	800b2ec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eefe:	2301      	movs	r3, #1
 800ef00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d001      	beq.n	800ef0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef0a:	f7f2 f991 	bl	8001230 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ef14:	7bfa      	ldrb	r2, [r7, #15]
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fc f9a9 	bl	800b270 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fc f955 	bl	800b1d4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fc f9a4 	bl	800b290 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	699b      	ldr	r3, [r3, #24]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d005      	beq.n	800ef5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef50:	4b04      	ldr	r3, [pc, #16]	; (800ef64 <HAL_PCD_SuspendCallback+0x30>)
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	4a03      	ldr	r2, [pc, #12]	; (800ef64 <HAL_PCD_SuspendCallback+0x30>)
 800ef56:	f043 0306 	orr.w	r3, r3, #6
 800ef5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ef5c:	bf00      	nop
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	e000ed00 	.word	0xe000ed00

0800ef68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d007      	beq.n	800ef88 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef78:	4b08      	ldr	r3, [pc, #32]	; (800ef9c <HAL_PCD_ResumeCallback+0x34>)
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	4a07      	ldr	r2, [pc, #28]	; (800ef9c <HAL_PCD_ResumeCallback+0x34>)
 800ef7e:	f023 0306 	bic.w	r3, r3, #6
 800ef82:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ef84:	f000 f9fc 	bl	800f380 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fc f994 	bl	800b2bc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	e000ed00 	.word	0xe000ed00

0800efa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800efa8:	4a2c      	ldr	r2, [pc, #176]	; (800f05c <USBD_LL_Init+0xbc>)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a2a      	ldr	r2, [pc, #168]	; (800f05c <USBD_LL_Init+0xbc>)
 800efb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800efb8:	f7f5 f8e8 	bl	800418c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800efbc:	4b27      	ldr	r3, [pc, #156]	; (800f05c <USBD_LL_Init+0xbc>)
 800efbe:	4a28      	ldr	r2, [pc, #160]	; (800f060 <USBD_LL_Init+0xc0>)
 800efc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800efc2:	4b26      	ldr	r3, [pc, #152]	; (800f05c <USBD_LL_Init+0xbc>)
 800efc4:	2208      	movs	r2, #8
 800efc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800efc8:	4b24      	ldr	r3, [pc, #144]	; (800f05c <USBD_LL_Init+0xbc>)
 800efca:	2202      	movs	r2, #2
 800efcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efce:	4b23      	ldr	r3, [pc, #140]	; (800f05c <USBD_LL_Init+0xbc>)
 800efd0:	2202      	movs	r2, #2
 800efd2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800efd4:	4b21      	ldr	r3, [pc, #132]	; (800f05c <USBD_LL_Init+0xbc>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800efda:	4b20      	ldr	r3, [pc, #128]	; (800f05c <USBD_LL_Init+0xbc>)
 800efdc:	2200      	movs	r2, #0
 800efde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800efe0:	4b1e      	ldr	r3, [pc, #120]	; (800f05c <USBD_LL_Init+0xbc>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800efe6:	4b1d      	ldr	r3, [pc, #116]	; (800f05c <USBD_LL_Init+0xbc>)
 800efe8:	2200      	movs	r2, #0
 800efea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800efec:	481b      	ldr	r0, [pc, #108]	; (800f05c <USBD_LL_Init+0xbc>)
 800efee:	f7f3 fb5d 	bl	80026ac <HAL_PCD_Init>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800eff8:	f7f2 f91a 	bl	8001230 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f002:	2318      	movs	r3, #24
 800f004:	2200      	movs	r2, #0
 800f006:	2100      	movs	r1, #0
 800f008:	f7f5 f833 	bl	8004072 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f012:	2358      	movs	r3, #88	; 0x58
 800f014:	2200      	movs	r2, #0
 800f016:	2180      	movs	r1, #128	; 0x80
 800f018:	f7f5 f82b 	bl	8004072 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f022:	23c0      	movs	r3, #192	; 0xc0
 800f024:	2200      	movs	r2, #0
 800f026:	2181      	movs	r1, #129	; 0x81
 800f028:	f7f5 f823 	bl	8004072 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f032:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f036:	2200      	movs	r2, #0
 800f038:	2101      	movs	r1, #1
 800f03a:	f7f5 f81a 	bl	8004072 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f044:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f048:	2200      	movs	r2, #0
 800f04a:	2182      	movs	r1, #130	; 0x82
 800f04c:	f7f5 f811 	bl	8004072 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20001cb8 	.word	0x20001cb8
 800f060:	40006800 	.word	0x40006800

0800f064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7f3 fc01 	bl	8002882 <HAL_PCD_Start>
 800f080:	4603      	mov	r3, r0
 800f082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f980 	bl	800f38c <USBD_Get_USB_Status>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f090:	7bbb      	ldrb	r3, [r7, #14]
}
 800f092:	4618      	mov	r0, r3
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b084      	sub	sp, #16
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	70fb      	strb	r3, [r7, #3]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70bb      	strb	r3, [r7, #2]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0c2:	78bb      	ldrb	r3, [r7, #2]
 800f0c4:	883a      	ldrh	r2, [r7, #0]
 800f0c6:	78f9      	ldrb	r1, [r7, #3]
 800f0c8:	f7f3 fd49 	bl	8002b5e <HAL_PCD_EP_Open>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f95a 	bl	800f38c <USBD_Get_USB_Status>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f100:	78fa      	ldrb	r2, [r7, #3]
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f7f3 fd92 	bl	8002c2e <HAL_PCD_EP_Close>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	4618      	mov	r0, r3
 800f112:	f000 f93b 	bl	800f38c <USBD_Get_USB_Status>
 800f116:	4603      	mov	r3, r0
 800f118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f13e:	78fa      	ldrb	r2, [r7, #3]
 800f140:	4611      	mov	r1, r2
 800f142:	4618      	mov	r0, r3
 800f144:	f7f3 fe57 	bl	8002df6 <HAL_PCD_EP_SetStall>
 800f148:	4603      	mov	r3, r0
 800f14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 f91c 	bl	800f38c <USBD_Get_USB_Status>
 800f154:	4603      	mov	r3, r0
 800f156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f158:	7bbb      	ldrb	r3, [r7, #14]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	460b      	mov	r3, r1
 800f16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f17c:	78fa      	ldrb	r2, [r7, #3]
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f7f3 fe8c 	bl	8002e9e <HAL_PCD_EP_ClrStall>
 800f186:	4603      	mov	r3, r0
 800f188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 f8fd 	bl	800f38c <USBD_Get_USB_Status>
 800f192:	4603      	mov	r3, r0
 800f194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f196:	7bbb      	ldrb	r3, [r7, #14]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	da0c      	bge.n	800f1d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1bc:	78fb      	ldrb	r3, [r7, #3]
 800f1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3306      	adds	r3, #6
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	e00b      	b.n	800f1ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1d6:	78fb      	ldrb	r3, [r7, #3]
 800f1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1dc:	68f9      	ldr	r1, [r7, #12]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	440b      	add	r3, r1
 800f1e8:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800f1ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b084      	sub	sp, #16
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	460b      	mov	r3, r1
 800f204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f214:	78fa      	ldrb	r2, [r7, #3]
 800f216:	4611      	mov	r1, r2
 800f218:	4618      	mov	r0, r3
 800f21a:	f7f3 fc7b 	bl	8002b14 <HAL_PCD_SetAddress>
 800f21e:	4603      	mov	r3, r0
 800f220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	4618      	mov	r0, r3
 800f226:	f000 f8b1 	bl	800f38c <USBD_Get_USB_Status>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3710      	adds	r7, #16
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	607a      	str	r2, [r7, #4]
 800f242:	603b      	str	r3, [r7, #0]
 800f244:	460b      	mov	r3, r1
 800f246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f248:	2300      	movs	r3, #0
 800f24a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f256:	7af9      	ldrb	r1, [r7, #11]
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	f7f3 fd87 	bl	8002d6e <HAL_PCD_EP_Transmit>
 800f260:	4603      	mov	r3, r0
 800f262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f264:	7dfb      	ldrb	r3, [r7, #23]
 800f266:	4618      	mov	r0, r3
 800f268:	f000 f890 	bl	800f38c <USBD_Get_USB_Status>
 800f26c:	4603      	mov	r3, r0
 800f26e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f270:	7dbb      	ldrb	r3, [r7, #22]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b086      	sub	sp, #24
 800f27e:	af00      	add	r7, sp, #0
 800f280:	60f8      	str	r0, [r7, #12]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	603b      	str	r3, [r7, #0]
 800f286:	460b      	mov	r3, r1
 800f288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f298:	7af9      	ldrb	r1, [r7, #11]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	f7f3 fd10 	bl	8002cc2 <HAL_PCD_EP_Receive>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 f86f 	bl	800f38c <USBD_Get_USB_Status>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2ce:	78fa      	ldrb	r2, [r7, #3]
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7f3 fd33 	bl	8002d3e <HAL_PCD_EP_GetRxCount>
 800f2d8:	4603      	mov	r3, r0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <HAL_PCDEx_LPM_Callback+0x18>
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d013      	beq.n	800f322 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f2fa:	e023      	b.n	800f344 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d007      	beq.n	800f314 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f304:	f000 f83c 	bl	800f380 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f308:	4b10      	ldr	r3, [pc, #64]	; (800f34c <HAL_PCDEx_LPM_Callback+0x68>)
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	4a0f      	ldr	r2, [pc, #60]	; (800f34c <HAL_PCDEx_LPM_Callback+0x68>)
 800f30e:	f023 0306 	bic.w	r3, r3, #6
 800f312:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fb ffce 	bl	800b2bc <USBD_LL_Resume>
    break;
 800f320:	e010      	b.n	800f344 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fb ffb1 	bl	800b290 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	699b      	ldr	r3, [r3, #24]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d005      	beq.n	800f342 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f336:	4b05      	ldr	r3, [pc, #20]	; (800f34c <HAL_PCDEx_LPM_Callback+0x68>)
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	4a04      	ldr	r2, [pc, #16]	; (800f34c <HAL_PCDEx_LPM_Callback+0x68>)
 800f33c:	f043 0306 	orr.w	r3, r3, #6
 800f340:	6113      	str	r3, [r2, #16]
    break;
 800f342:	bf00      	nop
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	e000ed00 	.word	0xe000ed00

0800f350 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f358:	4b03      	ldr	r3, [pc, #12]	; (800f368 <USBD_static_malloc+0x18>)
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	20001fb0 	.word	0x20001fb0

0800f36c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]

}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f384:	f7f1 fec2 	bl	800110c <SystemClock_Config>
}
 800f388:	bf00      	nop
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f396:	2300      	movs	r3, #0
 800f398:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d817      	bhi.n	800f3d0 <USBD_Get_USB_Status+0x44>
 800f3a0:	a201      	add	r2, pc, #4	; (adr r2, 800f3a8 <USBD_Get_USB_Status+0x1c>)
 800f3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a6:	bf00      	nop
 800f3a8:	0800f3b9 	.word	0x0800f3b9
 800f3ac:	0800f3bf 	.word	0x0800f3bf
 800f3b0:	0800f3c5 	.word	0x0800f3c5
 800f3b4:	0800f3cb 	.word	0x0800f3cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f3bc:	e00b      	b.n	800f3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c2:	e008      	b.n	800f3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c8:	e005      	b.n	800f3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3ca:	2303      	movs	r3, #3
 800f3cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ce:	e002      	b.n	800f3d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3d4:	bf00      	nop
  }
  return usb_status;
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3714      	adds	r7, #20
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f3e8:	4b05      	ldr	r3, [pc, #20]	; (800f400 <UTIL_LPM_Init+0x1c>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <UTIL_LPM_Init+0x20>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f3f4:	bf00      	nop
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	200021d0 	.word	0x200021d0
 800f404:	200021d4 	.word	0x200021d4

0800f408 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f408:	b480      	push	{r7}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f414:	f3ef 8310 	mrs	r3, PRIMASK
 800f418:	613b      	str	r3, [r7, #16]
  return(result);
 800f41a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f41e:	b672      	cpsid	i
}
 800f420:	bf00      	nop
  
  switch( state )
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d008      	beq.n	800f43a <UTIL_LPM_SetStopMode+0x32>
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d10e      	bne.n	800f44a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800f42c:	4b0d      	ldr	r3, [pc, #52]	; (800f464 <UTIL_LPM_SetStopMode+0x5c>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4313      	orrs	r3, r2
 800f434:	4a0b      	ldr	r2, [pc, #44]	; (800f464 <UTIL_LPM_SetStopMode+0x5c>)
 800f436:	6013      	str	r3, [r2, #0]
      break;
 800f438:	e008      	b.n	800f44c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	43da      	mvns	r2, r3
 800f43e:	4b09      	ldr	r3, [pc, #36]	; (800f464 <UTIL_LPM_SetStopMode+0x5c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4013      	ands	r3, r2
 800f444:	4a07      	ldr	r2, [pc, #28]	; (800f464 <UTIL_LPM_SetStopMode+0x5c>)
 800f446:	6013      	str	r3, [r2, #0]
      break;
 800f448:	e000      	b.n	800f44c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800f44a:	bf00      	nop
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f383 8810 	msr	PRIMASK, r3
}
 800f456:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f458:	bf00      	nop
 800f45a:	371c      	adds	r7, #28
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	200021d0 	.word	0x200021d0

0800f468 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f468:	b480      	push	{r7}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f474:	f3ef 8310 	mrs	r3, PRIMASK
 800f478:	613b      	str	r3, [r7, #16]
  return(result);
 800f47a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f47c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f47e:	b672      	cpsid	i
}
 800f480:	bf00      	nop
  
  switch(state)
 800f482:	78fb      	ldrb	r3, [r7, #3]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d008      	beq.n	800f49a <UTIL_LPM_SetOffMode+0x32>
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d10e      	bne.n	800f4aa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f48c:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <UTIL_LPM_SetOffMode+0x5c>)
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4313      	orrs	r3, r2
 800f494:	4a0b      	ldr	r2, [pc, #44]	; (800f4c4 <UTIL_LPM_SetOffMode+0x5c>)
 800f496:	6013      	str	r3, [r2, #0]
      break;
 800f498:	e008      	b.n	800f4ac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	43da      	mvns	r2, r3
 800f49e:	4b09      	ldr	r3, [pc, #36]	; (800f4c4 <UTIL_LPM_SetOffMode+0x5c>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	4a07      	ldr	r2, [pc, #28]	; (800f4c4 <UTIL_LPM_SetOffMode+0x5c>)
 800f4a6:	6013      	str	r3, [r2, #0]
      break;
 800f4a8:	e000      	b.n	800f4ac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800f4aa:	bf00      	nop
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f383 8810 	msr	PRIMASK, r3
}
 800f4b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f4b8:	bf00      	nop
 800f4ba:	371c      	adds	r7, #28
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	200021d4 	.word	0x200021d4

0800f4c8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b090      	sub	sp, #64	; 0x40
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f4d0:	4b73      	ldr	r3, [pc, #460]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800f4d6:	4b72      	ldr	r3, [pc, #456]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4013      	ands	r3, r2
 800f4de:	4a70      	ldr	r2, [pc, #448]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f4e0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f4e2:	4b70      	ldr	r3, [pc, #448]	; (800f6a4 <UTIL_SEQ_Run+0x1dc>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f4e8:	4b6f      	ldr	r3, [pc, #444]	; (800f6a8 <UTIL_SEQ_Run+0x1e0>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f4ee:	4b6f      	ldr	r3, [pc, #444]	; (800f6ac <UTIL_SEQ_Run+0x1e4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800f4f4:	4b6e      	ldr	r3, [pc, #440]	; (800f6b0 <UTIL_SEQ_Run+0x1e8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f4fa:	e08d      	b.n	800f618 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f500:	e002      	b.n	800f508 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f504:	3301      	adds	r3, #1
 800f506:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f508:	4a6a      	ldr	r2, [pc, #424]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	401a      	ands	r2, r3
 800f514:	4b62      	ldr	r3, [pc, #392]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4013      	ands	r3, r2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d0f1      	beq.n	800f502 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f51e:	4a65      	ldr	r2, [pc, #404]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f522:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	401a      	ands	r2, r3
 800f52a:	4b5d      	ldr	r3, [pc, #372]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4013      	ands	r3, r2
 800f530:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f532:	4a60      	ldr	r2, [pc, #384]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f536:	00db      	lsls	r3, r3, #3
 800f538:	4413      	add	r3, r2
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	4013      	ands	r3, r2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d106      	bne.n	800f552 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f544:	4a5b      	ldr	r2, [pc, #364]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	4413      	add	r3, r2
 800f54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f550:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f552:	4a58      	ldr	r2, [pc, #352]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	4413      	add	r3, r2
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	4013      	ands	r3, r2
 800f560:	4618      	mov	r0, r3
 800f562:	f000 f973 	bl	800f84c <SEQ_BitPosition>
 800f566:	4603      	mov	r3, r0
 800f568:	461a      	mov	r2, r3
 800f56a:	4b53      	ldr	r3, [pc, #332]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f56c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f56e:	4a51      	ldr	r2, [pc, #324]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	4413      	add	r3, r2
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	4b4f      	ldr	r3, [pc, #316]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2101      	movs	r1, #1
 800f57e:	fa01 f303 	lsl.w	r3, r1, r3
 800f582:	43db      	mvns	r3, r3
 800f584:	401a      	ands	r2, r3
 800f586:	494b      	ldr	r1, [pc, #300]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	440b      	add	r3, r1
 800f58e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f590:	f3ef 8310 	mrs	r3, PRIMASK
 800f594:	61bb      	str	r3, [r7, #24]
  return(result);
 800f596:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f59a:	b672      	cpsid	i
}
 800f59c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f59e:	4b46      	ldr	r3, [pc, #280]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5a8:	43da      	mvns	r2, r3
 800f5aa:	4b3e      	ldr	r3, [pc, #248]	; (800f6a4 <UTIL_SEQ_Run+0x1dc>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	4a3c      	ldr	r2, [pc, #240]	; (800f6a4 <UTIL_SEQ_Run+0x1dc>)
 800f5b2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5b8:	e013      	b.n	800f5e2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	4a3d      	ldr	r2, [pc, #244]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f5c0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f5c4:	4b3c      	ldr	r3, [pc, #240]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ce:	43da      	mvns	r2, r3
 800f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	400a      	ands	r2, r1
 800f5d6:	4937      	ldr	r1, [pc, #220]	; (800f6b4 <UTIL_SEQ_Run+0x1ec>)
 800f5d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1e8      	bne.n	800f5ba <UTIL_SEQ_Run+0xf2>
 800f5e8:	6a3b      	ldr	r3, [r7, #32]
 800f5ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f383 8810 	msr	PRIMASK, r3
}
 800f5f2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f5f4:	4b30      	ldr	r3, [pc, #192]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a30      	ldr	r2, [pc, #192]	; (800f6bc <UTIL_SEQ_Run+0x1f4>)
 800f5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5fe:	4798      	blx	r3

    local_taskset = TaskSet;
 800f600:	4b28      	ldr	r3, [pc, #160]	; (800f6a4 <UTIL_SEQ_Run+0x1dc>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800f606:	4b28      	ldr	r3, [pc, #160]	; (800f6a8 <UTIL_SEQ_Run+0x1e0>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800f60c:	4b27      	ldr	r3, [pc, #156]	; (800f6ac <UTIL_SEQ_Run+0x1e4>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800f612:	4b27      	ldr	r3, [pc, #156]	; (800f6b0 <UTIL_SEQ_Run+0x1e8>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61c:	401a      	ands	r2, r3
 800f61e:	4b20      	ldr	r3, [pc, #128]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4013      	ands	r3, r2
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <UTIL_SEQ_Run+0x16c>
 800f628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	4013      	ands	r3, r2
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f43f af64 	beq.w	800f4fc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f634:	4b20      	ldr	r3, [pc, #128]	; (800f6b8 <UTIL_SEQ_Run+0x1f0>)
 800f636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f63a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f63c:	f000 f8f8 	bl	800f830 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f640:	f3ef 8310 	mrs	r3, PRIMASK
 800f644:	613b      	str	r3, [r7, #16]
  return(result);
 800f646:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f64a:	b672      	cpsid	i
}
 800f64c:	bf00      	nop
  local_taskset = TaskSet;
 800f64e:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <UTIL_SEQ_Run+0x1dc>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f654:	4b14      	ldr	r3, [pc, #80]	; (800f6a8 <UTIL_SEQ_Run+0x1e0>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f65a:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <UTIL_SEQ_Run+0x1e4>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	401a      	ands	r2, r3
 800f666:	4b0e      	ldr	r3, [pc, #56]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4013      	ands	r3, r2
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d107      	bne.n	800f680 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f670:	4b0f      	ldr	r3, [pc, #60]	; (800f6b0 <UTIL_SEQ_Run+0x1e8>)
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f676:	4013      	ands	r3, r2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d101      	bne.n	800f680 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f67c:	f7f1 f9f8 	bl	8000a70 <UTIL_SEQ_Idle>
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f383 8810 	msr	PRIMASK, r3
}
 800f68a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f68c:	f000 f8d7 	bl	800f83e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f690:	4a03      	ldr	r2, [pc, #12]	; (800f6a0 <UTIL_SEQ_Run+0x1d8>)
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	6013      	str	r3, [r2, #0]

  return;
 800f696:	bf00      	nop
}
 800f698:	3740      	adds	r7, #64	; 0x40
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	200001a8 	.word	0x200001a8
 800f6a4:	200021d8 	.word	0x200021d8
 800f6a8:	200021dc 	.word	0x200021dc
 800f6ac:	200001a4 	.word	0x200001a4
 800f6b0:	200021e0 	.word	0x200021e0
 800f6b4:	20002268 	.word	0x20002268
 800f6b8:	200021e4 	.word	0x200021e4
 800f6bc:	200021e8 	.word	0x200021e8

0800f6c0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b088      	sub	sp, #32
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f6d0:	617b      	str	r3, [r7, #20]
  return(result);
 800f6d2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f6d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6d6:	b672      	cpsid	i
}
 800f6d8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f000 f8b6 	bl	800f84c <SEQ_BitPosition>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	4a06      	ldr	r2, [pc, #24]	; (800f700 <UTIL_SEQ_RegTask+0x40>)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	f383 8810 	msr	PRIMASK, r3
}
 800f6f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f6f8:	bf00      	nop
}
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	200021e8 	.word	0x200021e8

0800f704 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f70e:	f3ef 8310 	mrs	r3, PRIMASK
 800f712:	60fb      	str	r3, [r7, #12]
  return(result);
 800f714:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f718:	b672      	cpsid	i
}
 800f71a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f71c:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <UTIL_SEQ_SetTask+0x50>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4313      	orrs	r3, r2
 800f724:	4a0b      	ldr	r2, [pc, #44]	; (800f754 <UTIL_SEQ_SetTask+0x50>)
 800f726:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f728:	4a0b      	ldr	r2, [pc, #44]	; (800f758 <UTIL_SEQ_SetTask+0x54>)
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	431a      	orrs	r2, r3
 800f734:	4908      	ldr	r1, [pc, #32]	; (800f758 <UTIL_SEQ_SetTask+0x54>)
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	f383 8810 	msr	PRIMASK, r3
}
 800f746:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f748:	bf00      	nop
}
 800f74a:	371c      	adds	r7, #28
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	200021d8 	.word	0x200021d8
 800f758:	20002268 	.word	0x20002268

0800f75c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f764:	f3ef 8310 	mrs	r3, PRIMASK
 800f768:	60fb      	str	r3, [r7, #12]
  return(result);
 800f76a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f76c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f76e:	b672      	cpsid	i
}
 800f770:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f772:	4b09      	ldr	r3, [pc, #36]	; (800f798 <UTIL_SEQ_SetEvt+0x3c>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4313      	orrs	r3, r2
 800f77a:	4a07      	ldr	r2, [pc, #28]	; (800f798 <UTIL_SEQ_SetEvt+0x3c>)
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	f383 8810 	msr	PRIMASK, r3
}
 800f788:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f78a:	bf00      	nop
}
 800f78c:	371c      	adds	r7, #28
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr
 800f796:	bf00      	nop
 800f798:	200021dc 	.word	0x200021dc

0800f79c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b088      	sub	sp, #32
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f7a4:	4b1f      	ldr	r3, [pc, #124]	; (800f824 <UTIL_SEQ_WaitEvt+0x88>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f7aa:	4b1e      	ldr	r3, [pc, #120]	; (800f824 <UTIL_SEQ_WaitEvt+0x88>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7b2:	d102      	bne.n	800f7ba <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	61fb      	str	r3, [r7, #28]
 800f7b8:	e005      	b.n	800f7c6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f7ba:	4b1a      	ldr	r3, [pc, #104]	; (800f824 <UTIL_SEQ_WaitEvt+0x88>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7c4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f7c6:	4b18      	ldr	r3, [pc, #96]	; (800f828 <UTIL_SEQ_WaitEvt+0x8c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f7cc:	4a16      	ldr	r2, [pc, #88]	; (800f828 <UTIL_SEQ_WaitEvt+0x8c>)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f7d2:	e003      	b.n	800f7dc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f7d4:	6879      	ldr	r1, [r7, #4]
 800f7d6:	69f8      	ldr	r0, [r7, #28]
 800f7d8:	f7f1 f952 	bl	8000a80 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f7dc:	4b13      	ldr	r3, [pc, #76]	; (800f82c <UTIL_SEQ_WaitEvt+0x90>)
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d0f5      	beq.n	800f7d4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f7e8:	4a0e      	ldr	r2, [pc, #56]	; (800f824 <UTIL_SEQ_WaitEvt+0x88>)
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7ee:	f3ef 8310 	mrs	r3, PRIMASK
 800f7f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f7f4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f7f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7f8:	b672      	cpsid	i
}
 800f7fa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	43da      	mvns	r2, r3
 800f800:	4b0a      	ldr	r3, [pc, #40]	; (800f82c <UTIL_SEQ_WaitEvt+0x90>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4013      	ands	r3, r2
 800f806:	4a09      	ldr	r2, [pc, #36]	; (800f82c <UTIL_SEQ_WaitEvt+0x90>)
 800f808:	6013      	str	r3, [r2, #0]
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f383 8810 	msr	PRIMASK, r3
}
 800f814:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f816:	4a04      	ldr	r2, [pc, #16]	; (800f828 <UTIL_SEQ_WaitEvt+0x8c>)
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	6013      	str	r3, [r2, #0]
  return;
 800f81c:	bf00      	nop
}
 800f81e:	3720      	adds	r7, #32
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	200021e4 	.word	0x200021e4
 800f828:	200021e0 	.word	0x200021e0
 800f82c:	200021dc 	.word	0x200021dc

0800f830 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f834:	bf00      	nop
}
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f83e:	b480      	push	{r7}
 800f840:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f842:	bf00      	nop
}
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f854:	2300      	movs	r3, #0
 800f856:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	0c1b      	lsrs	r3, r3, #16
 800f860:	041b      	lsls	r3, r3, #16
 800f862:	2b00      	cmp	r3, #0
 800f864:	d104      	bne.n	800f870 <SEQ_BitPosition+0x24>
 800f866:	2310      	movs	r3, #16
 800f868:	73fb      	strb	r3, [r7, #15]
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	041b      	lsls	r3, r3, #16
 800f86e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f876:	2b00      	cmp	r3, #0
 800f878:	d105      	bne.n	800f886 <SEQ_BitPosition+0x3a>
 800f87a:	7bfb      	ldrb	r3, [r7, #15]
 800f87c:	3308      	adds	r3, #8
 800f87e:	73fb      	strb	r3, [r7, #15]
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	021b      	lsls	r3, r3, #8
 800f884:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d105      	bne.n	800f89c <SEQ_BitPosition+0x50>
 800f890:	7bfb      	ldrb	r3, [r7, #15]
 800f892:	3304      	adds	r3, #4
 800f894:	73fb      	strb	r3, [r7, #15]
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	011b      	lsls	r3, r3, #4
 800f89a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	0f1b      	lsrs	r3, r3, #28
 800f8a0:	4a07      	ldr	r2, [pc, #28]	; (800f8c0 <SEQ_BitPosition+0x74>)
 800f8a2:	5cd2      	ldrb	r2, [r2, r3]
 800f8a4:	7bfb      	ldrb	r3, [r7, #15]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f8aa:	7bfb      	ldrb	r3, [r7, #15]
 800f8ac:	f1c3 031f 	rsb	r3, r3, #31
 800f8b0:	b2db      	uxtb	r3, r3
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	08010d30 	.word	0x08010d30

0800f8c4 <sniprintf>:
 800f8c4:	b40c      	push	{r2, r3}
 800f8c6:	b530      	push	{r4, r5, lr}
 800f8c8:	4b17      	ldr	r3, [pc, #92]	; (800f928 <sniprintf+0x64>)
 800f8ca:	1e0c      	subs	r4, r1, #0
 800f8cc:	681d      	ldr	r5, [r3, #0]
 800f8ce:	b09d      	sub	sp, #116	; 0x74
 800f8d0:	da08      	bge.n	800f8e4 <sniprintf+0x20>
 800f8d2:	238b      	movs	r3, #139	; 0x8b
 800f8d4:	602b      	str	r3, [r5, #0]
 800f8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8da:	b01d      	add	sp, #116	; 0x74
 800f8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8e0:	b002      	add	sp, #8
 800f8e2:	4770      	bx	lr
 800f8e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f8e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f8ec:	bf14      	ite	ne
 800f8ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f8f2:	4623      	moveq	r3, r4
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	9307      	str	r3, [sp, #28]
 800f8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8fc:	9002      	str	r0, [sp, #8]
 800f8fe:	9006      	str	r0, [sp, #24]
 800f900:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f906:	ab21      	add	r3, sp, #132	; 0x84
 800f908:	a902      	add	r1, sp, #8
 800f90a:	4628      	mov	r0, r5
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f000 f9b5 	bl	800fc7c <_svfiprintf_r>
 800f912:	1c43      	adds	r3, r0, #1
 800f914:	bfbc      	itt	lt
 800f916:	238b      	movlt	r3, #139	; 0x8b
 800f918:	602b      	strlt	r3, [r5, #0]
 800f91a:	2c00      	cmp	r4, #0
 800f91c:	d0dd      	beq.n	800f8da <sniprintf+0x16>
 800f91e:	9b02      	ldr	r3, [sp, #8]
 800f920:	2200      	movs	r2, #0
 800f922:	701a      	strb	r2, [r3, #0]
 800f924:	e7d9      	b.n	800f8da <sniprintf+0x16>
 800f926:	bf00      	nop
 800f928:	20000204 	.word	0x20000204

0800f92c <std>:
 800f92c:	2300      	movs	r3, #0
 800f92e:	b510      	push	{r4, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	e9c0 3300 	strd	r3, r3, [r0]
 800f936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f93a:	6083      	str	r3, [r0, #8]
 800f93c:	8181      	strh	r1, [r0, #12]
 800f93e:	6643      	str	r3, [r0, #100]	; 0x64
 800f940:	81c2      	strh	r2, [r0, #14]
 800f942:	6183      	str	r3, [r0, #24]
 800f944:	4619      	mov	r1, r3
 800f946:	2208      	movs	r2, #8
 800f948:	305c      	adds	r0, #92	; 0x5c
 800f94a:	f000 f8fb 	bl	800fb44 <memset>
 800f94e:	4b05      	ldr	r3, [pc, #20]	; (800f964 <std+0x38>)
 800f950:	6263      	str	r3, [r4, #36]	; 0x24
 800f952:	4b05      	ldr	r3, [pc, #20]	; (800f968 <std+0x3c>)
 800f954:	62a3      	str	r3, [r4, #40]	; 0x28
 800f956:	4b05      	ldr	r3, [pc, #20]	; (800f96c <std+0x40>)
 800f958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <std+0x44>)
 800f95c:	6224      	str	r4, [r4, #32]
 800f95e:	6323      	str	r3, [r4, #48]	; 0x30
 800f960:	bd10      	pop	{r4, pc}
 800f962:	bf00      	nop
 800f964:	0801044d 	.word	0x0801044d
 800f968:	0801046f 	.word	0x0801046f
 800f96c:	080104a7 	.word	0x080104a7
 800f970:	080104cb 	.word	0x080104cb

0800f974 <stdio_exit_handler>:
 800f974:	4a02      	ldr	r2, [pc, #8]	; (800f980 <stdio_exit_handler+0xc>)
 800f976:	4903      	ldr	r1, [pc, #12]	; (800f984 <stdio_exit_handler+0x10>)
 800f978:	4803      	ldr	r0, [pc, #12]	; (800f988 <stdio_exit_handler+0x14>)
 800f97a:	f000 b869 	b.w	800fa50 <_fwalk_sglue>
 800f97e:	bf00      	nop
 800f980:	200001ac 	.word	0x200001ac
 800f984:	080103e5 	.word	0x080103e5
 800f988:	200001b8 	.word	0x200001b8

0800f98c <cleanup_stdio>:
 800f98c:	6841      	ldr	r1, [r0, #4]
 800f98e:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <cleanup_stdio+0x34>)
 800f990:	4299      	cmp	r1, r3
 800f992:	b510      	push	{r4, lr}
 800f994:	4604      	mov	r4, r0
 800f996:	d001      	beq.n	800f99c <cleanup_stdio+0x10>
 800f998:	f000 fd24 	bl	80103e4 <_fflush_r>
 800f99c:	68a1      	ldr	r1, [r4, #8]
 800f99e:	4b09      	ldr	r3, [pc, #36]	; (800f9c4 <cleanup_stdio+0x38>)
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d002      	beq.n	800f9aa <cleanup_stdio+0x1e>
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f000 fd1d 	bl	80103e4 <_fflush_r>
 800f9aa:	68e1      	ldr	r1, [r4, #12]
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <cleanup_stdio+0x3c>)
 800f9ae:	4299      	cmp	r1, r3
 800f9b0:	d004      	beq.n	800f9bc <cleanup_stdio+0x30>
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b8:	f000 bd14 	b.w	80103e4 <_fflush_r>
 800f9bc:	bd10      	pop	{r4, pc}
 800f9be:	bf00      	nop
 800f9c0:	20002278 	.word	0x20002278
 800f9c4:	200022e0 	.word	0x200022e0
 800f9c8:	20002348 	.word	0x20002348

0800f9cc <global_stdio_init.part.0>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	4b0b      	ldr	r3, [pc, #44]	; (800f9fc <global_stdio_init.part.0+0x30>)
 800f9d0:	4c0b      	ldr	r4, [pc, #44]	; (800fa00 <global_stdio_init.part.0+0x34>)
 800f9d2:	4a0c      	ldr	r2, [pc, #48]	; (800fa04 <global_stdio_init.part.0+0x38>)
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	2200      	movs	r2, #0
 800f9da:	2104      	movs	r1, #4
 800f9dc:	f7ff ffa6 	bl	800f92c <std>
 800f9e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	2109      	movs	r1, #9
 800f9e8:	f7ff ffa0 	bl	800f92c <std>
 800f9ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f9f0:	2202      	movs	r2, #2
 800f9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9f6:	2112      	movs	r1, #18
 800f9f8:	f7ff bf98 	b.w	800f92c <std>
 800f9fc:	200023b0 	.word	0x200023b0
 800fa00:	20002278 	.word	0x20002278
 800fa04:	0800f975 	.word	0x0800f975

0800fa08 <__sfp_lock_acquire>:
 800fa08:	4801      	ldr	r0, [pc, #4]	; (800fa10 <__sfp_lock_acquire+0x8>)
 800fa0a:	f000 b8cd 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 800fa0e:	bf00      	nop
 800fa10:	200023b5 	.word	0x200023b5

0800fa14 <__sfp_lock_release>:
 800fa14:	4801      	ldr	r0, [pc, #4]	; (800fa1c <__sfp_lock_release+0x8>)
 800fa16:	f000 b8c8 	b.w	800fbaa <__retarget_lock_release_recursive>
 800fa1a:	bf00      	nop
 800fa1c:	200023b5 	.word	0x200023b5

0800fa20 <__sinit>:
 800fa20:	b510      	push	{r4, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	f7ff fff0 	bl	800fa08 <__sfp_lock_acquire>
 800fa28:	6a23      	ldr	r3, [r4, #32]
 800fa2a:	b11b      	cbz	r3, 800fa34 <__sinit+0x14>
 800fa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa30:	f7ff bff0 	b.w	800fa14 <__sfp_lock_release>
 800fa34:	4b04      	ldr	r3, [pc, #16]	; (800fa48 <__sinit+0x28>)
 800fa36:	6223      	str	r3, [r4, #32]
 800fa38:	4b04      	ldr	r3, [pc, #16]	; (800fa4c <__sinit+0x2c>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1f5      	bne.n	800fa2c <__sinit+0xc>
 800fa40:	f7ff ffc4 	bl	800f9cc <global_stdio_init.part.0>
 800fa44:	e7f2      	b.n	800fa2c <__sinit+0xc>
 800fa46:	bf00      	nop
 800fa48:	0800f98d 	.word	0x0800f98d
 800fa4c:	200023b0 	.word	0x200023b0

0800fa50 <_fwalk_sglue>:
 800fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa54:	4607      	mov	r7, r0
 800fa56:	4688      	mov	r8, r1
 800fa58:	4614      	mov	r4, r2
 800fa5a:	2600      	movs	r6, #0
 800fa5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa60:	f1b9 0901 	subs.w	r9, r9, #1
 800fa64:	d505      	bpl.n	800fa72 <_fwalk_sglue+0x22>
 800fa66:	6824      	ldr	r4, [r4, #0]
 800fa68:	2c00      	cmp	r4, #0
 800fa6a:	d1f7      	bne.n	800fa5c <_fwalk_sglue+0xc>
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d907      	bls.n	800fa88 <_fwalk_sglue+0x38>
 800fa78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	d003      	beq.n	800fa88 <_fwalk_sglue+0x38>
 800fa80:	4629      	mov	r1, r5
 800fa82:	4638      	mov	r0, r7
 800fa84:	47c0      	blx	r8
 800fa86:	4306      	orrs	r6, r0
 800fa88:	3568      	adds	r5, #104	; 0x68
 800fa8a:	e7e9      	b.n	800fa60 <_fwalk_sglue+0x10>

0800fa8c <_puts_r>:
 800fa8c:	6a03      	ldr	r3, [r0, #32]
 800fa8e:	b570      	push	{r4, r5, r6, lr}
 800fa90:	6884      	ldr	r4, [r0, #8]
 800fa92:	4605      	mov	r5, r0
 800fa94:	460e      	mov	r6, r1
 800fa96:	b90b      	cbnz	r3, 800fa9c <_puts_r+0x10>
 800fa98:	f7ff ffc2 	bl	800fa20 <__sinit>
 800fa9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa9e:	07db      	lsls	r3, r3, #31
 800faa0:	d405      	bmi.n	800faae <_puts_r+0x22>
 800faa2:	89a3      	ldrh	r3, [r4, #12]
 800faa4:	0598      	lsls	r0, r3, #22
 800faa6:	d402      	bmi.n	800faae <_puts_r+0x22>
 800faa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faaa:	f000 f87d 	bl	800fba8 <__retarget_lock_acquire_recursive>
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	0719      	lsls	r1, r3, #28
 800fab2:	d513      	bpl.n	800fadc <_puts_r+0x50>
 800fab4:	6923      	ldr	r3, [r4, #16]
 800fab6:	b18b      	cbz	r3, 800fadc <_puts_r+0x50>
 800fab8:	3e01      	subs	r6, #1
 800faba:	68a3      	ldr	r3, [r4, #8]
 800fabc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fac0:	3b01      	subs	r3, #1
 800fac2:	60a3      	str	r3, [r4, #8]
 800fac4:	b9e9      	cbnz	r1, 800fb02 <_puts_r+0x76>
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	da2e      	bge.n	800fb28 <_puts_r+0x9c>
 800faca:	4622      	mov	r2, r4
 800facc:	210a      	movs	r1, #10
 800face:	4628      	mov	r0, r5
 800fad0:	f000 fd2e 	bl	8010530 <__swbuf_r>
 800fad4:	3001      	adds	r0, #1
 800fad6:	d007      	beq.n	800fae8 <_puts_r+0x5c>
 800fad8:	250a      	movs	r5, #10
 800fada:	e007      	b.n	800faec <_puts_r+0x60>
 800fadc:	4621      	mov	r1, r4
 800fade:	4628      	mov	r0, r5
 800fae0:	f000 fd64 	bl	80105ac <__swsetup_r>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d0e7      	beq.n	800fab8 <_puts_r+0x2c>
 800fae8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800faec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faee:	07da      	lsls	r2, r3, #31
 800faf0:	d405      	bmi.n	800fafe <_puts_r+0x72>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	059b      	lsls	r3, r3, #22
 800faf6:	d402      	bmi.n	800fafe <_puts_r+0x72>
 800faf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fafa:	f000 f856 	bl	800fbaa <__retarget_lock_release_recursive>
 800fafe:	4628      	mov	r0, r5
 800fb00:	bd70      	pop	{r4, r5, r6, pc}
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da04      	bge.n	800fb10 <_puts_r+0x84>
 800fb06:	69a2      	ldr	r2, [r4, #24]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	dc06      	bgt.n	800fb1a <_puts_r+0x8e>
 800fb0c:	290a      	cmp	r1, #10
 800fb0e:	d004      	beq.n	800fb1a <_puts_r+0x8e>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	1c5a      	adds	r2, r3, #1
 800fb14:	6022      	str	r2, [r4, #0]
 800fb16:	7019      	strb	r1, [r3, #0]
 800fb18:	e7cf      	b.n	800faba <_puts_r+0x2e>
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f000 fd07 	bl	8010530 <__swbuf_r>
 800fb22:	3001      	adds	r0, #1
 800fb24:	d1c9      	bne.n	800faba <_puts_r+0x2e>
 800fb26:	e7df      	b.n	800fae8 <_puts_r+0x5c>
 800fb28:	6823      	ldr	r3, [r4, #0]
 800fb2a:	250a      	movs	r5, #10
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	6022      	str	r2, [r4, #0]
 800fb30:	701d      	strb	r5, [r3, #0]
 800fb32:	e7db      	b.n	800faec <_puts_r+0x60>

0800fb34 <puts>:
 800fb34:	4b02      	ldr	r3, [pc, #8]	; (800fb40 <puts+0xc>)
 800fb36:	4601      	mov	r1, r0
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	f7ff bfa7 	b.w	800fa8c <_puts_r>
 800fb3e:	bf00      	nop
 800fb40:	20000204 	.word	0x20000204

0800fb44 <memset>:
 800fb44:	4402      	add	r2, r0
 800fb46:	4603      	mov	r3, r0
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d100      	bne.n	800fb4e <memset+0xa>
 800fb4c:	4770      	bx	lr
 800fb4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb52:	e7f9      	b.n	800fb48 <memset+0x4>

0800fb54 <__errno>:
 800fb54:	4b01      	ldr	r3, [pc, #4]	; (800fb5c <__errno+0x8>)
 800fb56:	6818      	ldr	r0, [r3, #0]
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	20000204 	.word	0x20000204

0800fb60 <__libc_init_array>:
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	4d0d      	ldr	r5, [pc, #52]	; (800fb98 <__libc_init_array+0x38>)
 800fb64:	4c0d      	ldr	r4, [pc, #52]	; (800fb9c <__libc_init_array+0x3c>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	2600      	movs	r6, #0
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	d109      	bne.n	800fb84 <__libc_init_array+0x24>
 800fb70:	4d0b      	ldr	r5, [pc, #44]	; (800fba0 <__libc_init_array+0x40>)
 800fb72:	4c0c      	ldr	r4, [pc, #48]	; (800fba4 <__libc_init_array+0x44>)
 800fb74:	f000 feba 	bl	80108ec <_init>
 800fb78:	1b64      	subs	r4, r4, r5
 800fb7a:	10a4      	asrs	r4, r4, #2
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	42a6      	cmp	r6, r4
 800fb80:	d105      	bne.n	800fb8e <__libc_init_array+0x2e>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb88:	4798      	blx	r3
 800fb8a:	3601      	adds	r6, #1
 800fb8c:	e7ee      	b.n	800fb6c <__libc_init_array+0xc>
 800fb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb92:	4798      	blx	r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	e7f2      	b.n	800fb7e <__libc_init_array+0x1e>
 800fb98:	08010d7c 	.word	0x08010d7c
 800fb9c:	08010d7c 	.word	0x08010d7c
 800fba0:	08010d7c 	.word	0x08010d7c
 800fba4:	08010d80 	.word	0x08010d80

0800fba8 <__retarget_lock_acquire_recursive>:
 800fba8:	4770      	bx	lr

0800fbaa <__retarget_lock_release_recursive>:
 800fbaa:	4770      	bx	lr

0800fbac <memcpy>:
 800fbac:	440a      	add	r2, r1
 800fbae:	4291      	cmp	r1, r2
 800fbb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbb4:	d100      	bne.n	800fbb8 <memcpy+0xc>
 800fbb6:	4770      	bx	lr
 800fbb8:	b510      	push	{r4, lr}
 800fbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc2:	4291      	cmp	r1, r2
 800fbc4:	d1f9      	bne.n	800fbba <memcpy+0xe>
 800fbc6:	bd10      	pop	{r4, pc}

0800fbc8 <__ssputs_r>:
 800fbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbcc:	688e      	ldr	r6, [r1, #8]
 800fbce:	461f      	mov	r7, r3
 800fbd0:	42be      	cmp	r6, r7
 800fbd2:	680b      	ldr	r3, [r1, #0]
 800fbd4:	4682      	mov	sl, r0
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	4690      	mov	r8, r2
 800fbda:	d82c      	bhi.n	800fc36 <__ssputs_r+0x6e>
 800fbdc:	898a      	ldrh	r2, [r1, #12]
 800fbde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbe2:	d026      	beq.n	800fc32 <__ssputs_r+0x6a>
 800fbe4:	6965      	ldr	r5, [r4, #20]
 800fbe6:	6909      	ldr	r1, [r1, #16]
 800fbe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbec:	eba3 0901 	sub.w	r9, r3, r1
 800fbf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbf4:	1c7b      	adds	r3, r7, #1
 800fbf6:	444b      	add	r3, r9
 800fbf8:	106d      	asrs	r5, r5, #1
 800fbfa:	429d      	cmp	r5, r3
 800fbfc:	bf38      	it	cc
 800fbfe:	461d      	movcc	r5, r3
 800fc00:	0553      	lsls	r3, r2, #21
 800fc02:	d527      	bpl.n	800fc54 <__ssputs_r+0x8c>
 800fc04:	4629      	mov	r1, r5
 800fc06:	f000 f957 	bl	800feb8 <_malloc_r>
 800fc0a:	4606      	mov	r6, r0
 800fc0c:	b360      	cbz	r0, 800fc68 <__ssputs_r+0xa0>
 800fc0e:	6921      	ldr	r1, [r4, #16]
 800fc10:	464a      	mov	r2, r9
 800fc12:	f7ff ffcb 	bl	800fbac <memcpy>
 800fc16:	89a3      	ldrh	r3, [r4, #12]
 800fc18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc20:	81a3      	strh	r3, [r4, #12]
 800fc22:	6126      	str	r6, [r4, #16]
 800fc24:	6165      	str	r5, [r4, #20]
 800fc26:	444e      	add	r6, r9
 800fc28:	eba5 0509 	sub.w	r5, r5, r9
 800fc2c:	6026      	str	r6, [r4, #0]
 800fc2e:	60a5      	str	r5, [r4, #8]
 800fc30:	463e      	mov	r6, r7
 800fc32:	42be      	cmp	r6, r7
 800fc34:	d900      	bls.n	800fc38 <__ssputs_r+0x70>
 800fc36:	463e      	mov	r6, r7
 800fc38:	6820      	ldr	r0, [r4, #0]
 800fc3a:	4632      	mov	r2, r6
 800fc3c:	4641      	mov	r1, r8
 800fc3e:	f000 fd6f 	bl	8010720 <memmove>
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	1b9b      	subs	r3, r3, r6
 800fc46:	60a3      	str	r3, [r4, #8]
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	4433      	add	r3, r6
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	2000      	movs	r0, #0
 800fc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc54:	462a      	mov	r2, r5
 800fc56:	f000 fc3c 	bl	80104d2 <_realloc_r>
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1e0      	bne.n	800fc22 <__ssputs_r+0x5a>
 800fc60:	6921      	ldr	r1, [r4, #16]
 800fc62:	4650      	mov	r0, sl
 800fc64:	f000 fdee 	bl	8010844 <_free_r>
 800fc68:	230c      	movs	r3, #12
 800fc6a:	f8ca 3000 	str.w	r3, [sl]
 800fc6e:	89a3      	ldrh	r3, [r4, #12]
 800fc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc74:	81a3      	strh	r3, [r4, #12]
 800fc76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc7a:	e7e9      	b.n	800fc50 <__ssputs_r+0x88>

0800fc7c <_svfiprintf_r>:
 800fc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc80:	4698      	mov	r8, r3
 800fc82:	898b      	ldrh	r3, [r1, #12]
 800fc84:	061b      	lsls	r3, r3, #24
 800fc86:	b09d      	sub	sp, #116	; 0x74
 800fc88:	4607      	mov	r7, r0
 800fc8a:	460d      	mov	r5, r1
 800fc8c:	4614      	mov	r4, r2
 800fc8e:	d50e      	bpl.n	800fcae <_svfiprintf_r+0x32>
 800fc90:	690b      	ldr	r3, [r1, #16]
 800fc92:	b963      	cbnz	r3, 800fcae <_svfiprintf_r+0x32>
 800fc94:	2140      	movs	r1, #64	; 0x40
 800fc96:	f000 f90f 	bl	800feb8 <_malloc_r>
 800fc9a:	6028      	str	r0, [r5, #0]
 800fc9c:	6128      	str	r0, [r5, #16]
 800fc9e:	b920      	cbnz	r0, 800fcaa <_svfiprintf_r+0x2e>
 800fca0:	230c      	movs	r3, #12
 800fca2:	603b      	str	r3, [r7, #0]
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fca8:	e0d0      	b.n	800fe4c <_svfiprintf_r+0x1d0>
 800fcaa:	2340      	movs	r3, #64	; 0x40
 800fcac:	616b      	str	r3, [r5, #20]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb2:	2320      	movs	r3, #32
 800fcb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcbc:	2330      	movs	r3, #48	; 0x30
 800fcbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fe64 <_svfiprintf_r+0x1e8>
 800fcc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcc6:	f04f 0901 	mov.w	r9, #1
 800fcca:	4623      	mov	r3, r4
 800fccc:	469a      	mov	sl, r3
 800fcce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcd2:	b10a      	cbz	r2, 800fcd8 <_svfiprintf_r+0x5c>
 800fcd4:	2a25      	cmp	r2, #37	; 0x25
 800fcd6:	d1f9      	bne.n	800fccc <_svfiprintf_r+0x50>
 800fcd8:	ebba 0b04 	subs.w	fp, sl, r4
 800fcdc:	d00b      	beq.n	800fcf6 <_svfiprintf_r+0x7a>
 800fcde:	465b      	mov	r3, fp
 800fce0:	4622      	mov	r2, r4
 800fce2:	4629      	mov	r1, r5
 800fce4:	4638      	mov	r0, r7
 800fce6:	f7ff ff6f 	bl	800fbc8 <__ssputs_r>
 800fcea:	3001      	adds	r0, #1
 800fcec:	f000 80a9 	beq.w	800fe42 <_svfiprintf_r+0x1c6>
 800fcf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcf2:	445a      	add	r2, fp
 800fcf4:	9209      	str	r2, [sp, #36]	; 0x24
 800fcf6:	f89a 3000 	ldrb.w	r3, [sl]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 80a1 	beq.w	800fe42 <_svfiprintf_r+0x1c6>
 800fd00:	2300      	movs	r3, #0
 800fd02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd0a:	f10a 0a01 	add.w	sl, sl, #1
 800fd0e:	9304      	str	r3, [sp, #16]
 800fd10:	9307      	str	r3, [sp, #28]
 800fd12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd16:	931a      	str	r3, [sp, #104]	; 0x68
 800fd18:	4654      	mov	r4, sl
 800fd1a:	2205      	movs	r2, #5
 800fd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd20:	4850      	ldr	r0, [pc, #320]	; (800fe64 <_svfiprintf_r+0x1e8>)
 800fd22:	f7f0 fa3d 	bl	80001a0 <memchr>
 800fd26:	9a04      	ldr	r2, [sp, #16]
 800fd28:	b9d8      	cbnz	r0, 800fd62 <_svfiprintf_r+0xe6>
 800fd2a:	06d0      	lsls	r0, r2, #27
 800fd2c:	bf44      	itt	mi
 800fd2e:	2320      	movmi	r3, #32
 800fd30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd34:	0711      	lsls	r1, r2, #28
 800fd36:	bf44      	itt	mi
 800fd38:	232b      	movmi	r3, #43	; 0x2b
 800fd3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd3e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd42:	2b2a      	cmp	r3, #42	; 0x2a
 800fd44:	d015      	beq.n	800fd72 <_svfiprintf_r+0xf6>
 800fd46:	9a07      	ldr	r2, [sp, #28]
 800fd48:	4654      	mov	r4, sl
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	f04f 0c0a 	mov.w	ip, #10
 800fd50:	4621      	mov	r1, r4
 800fd52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd56:	3b30      	subs	r3, #48	; 0x30
 800fd58:	2b09      	cmp	r3, #9
 800fd5a:	d94d      	bls.n	800fdf8 <_svfiprintf_r+0x17c>
 800fd5c:	b1b0      	cbz	r0, 800fd8c <_svfiprintf_r+0x110>
 800fd5e:	9207      	str	r2, [sp, #28]
 800fd60:	e014      	b.n	800fd8c <_svfiprintf_r+0x110>
 800fd62:	eba0 0308 	sub.w	r3, r0, r8
 800fd66:	fa09 f303 	lsl.w	r3, r9, r3
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	46a2      	mov	sl, r4
 800fd70:	e7d2      	b.n	800fd18 <_svfiprintf_r+0x9c>
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	1d19      	adds	r1, r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	9103      	str	r1, [sp, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	bfbb      	ittet	lt
 800fd7e:	425b      	neglt	r3, r3
 800fd80:	f042 0202 	orrlt.w	r2, r2, #2
 800fd84:	9307      	strge	r3, [sp, #28]
 800fd86:	9307      	strlt	r3, [sp, #28]
 800fd88:	bfb8      	it	lt
 800fd8a:	9204      	strlt	r2, [sp, #16]
 800fd8c:	7823      	ldrb	r3, [r4, #0]
 800fd8e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd90:	d10c      	bne.n	800fdac <_svfiprintf_r+0x130>
 800fd92:	7863      	ldrb	r3, [r4, #1]
 800fd94:	2b2a      	cmp	r3, #42	; 0x2a
 800fd96:	d134      	bne.n	800fe02 <_svfiprintf_r+0x186>
 800fd98:	9b03      	ldr	r3, [sp, #12]
 800fd9a:	1d1a      	adds	r2, r3, #4
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	9203      	str	r2, [sp, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	bfb8      	it	lt
 800fda4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fda8:	3402      	adds	r4, #2
 800fdaa:	9305      	str	r3, [sp, #20]
 800fdac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fe74 <_svfiprintf_r+0x1f8>
 800fdb0:	7821      	ldrb	r1, [r4, #0]
 800fdb2:	2203      	movs	r2, #3
 800fdb4:	4650      	mov	r0, sl
 800fdb6:	f7f0 f9f3 	bl	80001a0 <memchr>
 800fdba:	b138      	cbz	r0, 800fdcc <_svfiprintf_r+0x150>
 800fdbc:	9b04      	ldr	r3, [sp, #16]
 800fdbe:	eba0 000a 	sub.w	r0, r0, sl
 800fdc2:	2240      	movs	r2, #64	; 0x40
 800fdc4:	4082      	lsls	r2, r0
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	3401      	adds	r4, #1
 800fdca:	9304      	str	r3, [sp, #16]
 800fdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdd0:	4825      	ldr	r0, [pc, #148]	; (800fe68 <_svfiprintf_r+0x1ec>)
 800fdd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdd6:	2206      	movs	r2, #6
 800fdd8:	f7f0 f9e2 	bl	80001a0 <memchr>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d038      	beq.n	800fe52 <_svfiprintf_r+0x1d6>
 800fde0:	4b22      	ldr	r3, [pc, #136]	; (800fe6c <_svfiprintf_r+0x1f0>)
 800fde2:	bb1b      	cbnz	r3, 800fe2c <_svfiprintf_r+0x1b0>
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	3307      	adds	r3, #7
 800fde8:	f023 0307 	bic.w	r3, r3, #7
 800fdec:	3308      	adds	r3, #8
 800fdee:	9303      	str	r3, [sp, #12]
 800fdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf2:	4433      	add	r3, r6
 800fdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf6:	e768      	b.n	800fcca <_svfiprintf_r+0x4e>
 800fdf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e7a6      	b.n	800fd50 <_svfiprintf_r+0xd4>
 800fe02:	2300      	movs	r3, #0
 800fe04:	3401      	adds	r4, #1
 800fe06:	9305      	str	r3, [sp, #20]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	f04f 0c0a 	mov.w	ip, #10
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe14:	3a30      	subs	r2, #48	; 0x30
 800fe16:	2a09      	cmp	r2, #9
 800fe18:	d903      	bls.n	800fe22 <_svfiprintf_r+0x1a6>
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d0c6      	beq.n	800fdac <_svfiprintf_r+0x130>
 800fe1e:	9105      	str	r1, [sp, #20]
 800fe20:	e7c4      	b.n	800fdac <_svfiprintf_r+0x130>
 800fe22:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe26:	4604      	mov	r4, r0
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e7f0      	b.n	800fe0e <_svfiprintf_r+0x192>
 800fe2c:	ab03      	add	r3, sp, #12
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	462a      	mov	r2, r5
 800fe32:	4b0f      	ldr	r3, [pc, #60]	; (800fe70 <_svfiprintf_r+0x1f4>)
 800fe34:	a904      	add	r1, sp, #16
 800fe36:	4638      	mov	r0, r7
 800fe38:	f3af 8000 	nop.w
 800fe3c:	1c42      	adds	r2, r0, #1
 800fe3e:	4606      	mov	r6, r0
 800fe40:	d1d6      	bne.n	800fdf0 <_svfiprintf_r+0x174>
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	065b      	lsls	r3, r3, #25
 800fe46:	f53f af2d 	bmi.w	800fca4 <_svfiprintf_r+0x28>
 800fe4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe4c:	b01d      	add	sp, #116	; 0x74
 800fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe52:	ab03      	add	r3, sp, #12
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	462a      	mov	r2, r5
 800fe58:	4b05      	ldr	r3, [pc, #20]	; (800fe70 <_svfiprintf_r+0x1f4>)
 800fe5a:	a904      	add	r1, sp, #16
 800fe5c:	4638      	mov	r0, r7
 800fe5e:	f000 f919 	bl	8010094 <_printf_i>
 800fe62:	e7eb      	b.n	800fe3c <_svfiprintf_r+0x1c0>
 800fe64:	08010d40 	.word	0x08010d40
 800fe68:	08010d4a 	.word	0x08010d4a
 800fe6c:	00000000 	.word	0x00000000
 800fe70:	0800fbc9 	.word	0x0800fbc9
 800fe74:	08010d46 	.word	0x08010d46

0800fe78 <sbrk_aligned>:
 800fe78:	b570      	push	{r4, r5, r6, lr}
 800fe7a:	4e0e      	ldr	r6, [pc, #56]	; (800feb4 <sbrk_aligned+0x3c>)
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	6831      	ldr	r1, [r6, #0]
 800fe80:	4605      	mov	r5, r0
 800fe82:	b911      	cbnz	r1, 800fe8a <sbrk_aligned+0x12>
 800fe84:	f000 fcbc 	bl	8010800 <_sbrk_r>
 800fe88:	6030      	str	r0, [r6, #0]
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f000 fcb7 	bl	8010800 <_sbrk_r>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	d00a      	beq.n	800feac <sbrk_aligned+0x34>
 800fe96:	1cc4      	adds	r4, r0, #3
 800fe98:	f024 0403 	bic.w	r4, r4, #3
 800fe9c:	42a0      	cmp	r0, r4
 800fe9e:	d007      	beq.n	800feb0 <sbrk_aligned+0x38>
 800fea0:	1a21      	subs	r1, r4, r0
 800fea2:	4628      	mov	r0, r5
 800fea4:	f000 fcac 	bl	8010800 <_sbrk_r>
 800fea8:	3001      	adds	r0, #1
 800feaa:	d101      	bne.n	800feb0 <sbrk_aligned+0x38>
 800feac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800feb0:	4620      	mov	r0, r4
 800feb2:	bd70      	pop	{r4, r5, r6, pc}
 800feb4:	200023bc 	.word	0x200023bc

0800feb8 <_malloc_r>:
 800feb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800febc:	1ccd      	adds	r5, r1, #3
 800febe:	f025 0503 	bic.w	r5, r5, #3
 800fec2:	3508      	adds	r5, #8
 800fec4:	2d0c      	cmp	r5, #12
 800fec6:	bf38      	it	cc
 800fec8:	250c      	movcc	r5, #12
 800feca:	2d00      	cmp	r5, #0
 800fecc:	4607      	mov	r7, r0
 800fece:	db01      	blt.n	800fed4 <_malloc_r+0x1c>
 800fed0:	42a9      	cmp	r1, r5
 800fed2:	d905      	bls.n	800fee0 <_malloc_r+0x28>
 800fed4:	230c      	movs	r3, #12
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	2600      	movs	r6, #0
 800feda:	4630      	mov	r0, r6
 800fedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ffb4 <_malloc_r+0xfc>
 800fee4:	f000 faa6 	bl	8010434 <__malloc_lock>
 800fee8:	f8d8 3000 	ldr.w	r3, [r8]
 800feec:	461c      	mov	r4, r3
 800feee:	bb5c      	cbnz	r4, 800ff48 <_malloc_r+0x90>
 800fef0:	4629      	mov	r1, r5
 800fef2:	4638      	mov	r0, r7
 800fef4:	f7ff ffc0 	bl	800fe78 <sbrk_aligned>
 800fef8:	1c43      	adds	r3, r0, #1
 800fefa:	4604      	mov	r4, r0
 800fefc:	d155      	bne.n	800ffaa <_malloc_r+0xf2>
 800fefe:	f8d8 4000 	ldr.w	r4, [r8]
 800ff02:	4626      	mov	r6, r4
 800ff04:	2e00      	cmp	r6, #0
 800ff06:	d145      	bne.n	800ff94 <_malloc_r+0xdc>
 800ff08:	2c00      	cmp	r4, #0
 800ff0a:	d048      	beq.n	800ff9e <_malloc_r+0xe6>
 800ff0c:	6823      	ldr	r3, [r4, #0]
 800ff0e:	4631      	mov	r1, r6
 800ff10:	4638      	mov	r0, r7
 800ff12:	eb04 0903 	add.w	r9, r4, r3
 800ff16:	f000 fc73 	bl	8010800 <_sbrk_r>
 800ff1a:	4581      	cmp	r9, r0
 800ff1c:	d13f      	bne.n	800ff9e <_malloc_r+0xe6>
 800ff1e:	6821      	ldr	r1, [r4, #0]
 800ff20:	1a6d      	subs	r5, r5, r1
 800ff22:	4629      	mov	r1, r5
 800ff24:	4638      	mov	r0, r7
 800ff26:	f7ff ffa7 	bl	800fe78 <sbrk_aligned>
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	d037      	beq.n	800ff9e <_malloc_r+0xe6>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	442b      	add	r3, r5
 800ff32:	6023      	str	r3, [r4, #0]
 800ff34:	f8d8 3000 	ldr.w	r3, [r8]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d038      	beq.n	800ffae <_malloc_r+0xf6>
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	42a2      	cmp	r2, r4
 800ff40:	d12b      	bne.n	800ff9a <_malloc_r+0xe2>
 800ff42:	2200      	movs	r2, #0
 800ff44:	605a      	str	r2, [r3, #4]
 800ff46:	e00f      	b.n	800ff68 <_malloc_r+0xb0>
 800ff48:	6822      	ldr	r2, [r4, #0]
 800ff4a:	1b52      	subs	r2, r2, r5
 800ff4c:	d41f      	bmi.n	800ff8e <_malloc_r+0xd6>
 800ff4e:	2a0b      	cmp	r2, #11
 800ff50:	d917      	bls.n	800ff82 <_malloc_r+0xca>
 800ff52:	1961      	adds	r1, r4, r5
 800ff54:	42a3      	cmp	r3, r4
 800ff56:	6025      	str	r5, [r4, #0]
 800ff58:	bf18      	it	ne
 800ff5a:	6059      	strne	r1, [r3, #4]
 800ff5c:	6863      	ldr	r3, [r4, #4]
 800ff5e:	bf08      	it	eq
 800ff60:	f8c8 1000 	streq.w	r1, [r8]
 800ff64:	5162      	str	r2, [r4, r5]
 800ff66:	604b      	str	r3, [r1, #4]
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f104 060b 	add.w	r6, r4, #11
 800ff6e:	f000 fa67 	bl	8010440 <__malloc_unlock>
 800ff72:	f026 0607 	bic.w	r6, r6, #7
 800ff76:	1d23      	adds	r3, r4, #4
 800ff78:	1af2      	subs	r2, r6, r3
 800ff7a:	d0ae      	beq.n	800feda <_malloc_r+0x22>
 800ff7c:	1b9b      	subs	r3, r3, r6
 800ff7e:	50a3      	str	r3, [r4, r2]
 800ff80:	e7ab      	b.n	800feda <_malloc_r+0x22>
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	6862      	ldr	r2, [r4, #4]
 800ff86:	d1dd      	bne.n	800ff44 <_malloc_r+0x8c>
 800ff88:	f8c8 2000 	str.w	r2, [r8]
 800ff8c:	e7ec      	b.n	800ff68 <_malloc_r+0xb0>
 800ff8e:	4623      	mov	r3, r4
 800ff90:	6864      	ldr	r4, [r4, #4]
 800ff92:	e7ac      	b.n	800feee <_malloc_r+0x36>
 800ff94:	4634      	mov	r4, r6
 800ff96:	6876      	ldr	r6, [r6, #4]
 800ff98:	e7b4      	b.n	800ff04 <_malloc_r+0x4c>
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	e7cc      	b.n	800ff38 <_malloc_r+0x80>
 800ff9e:	230c      	movs	r3, #12
 800ffa0:	603b      	str	r3, [r7, #0]
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	f000 fa4c 	bl	8010440 <__malloc_unlock>
 800ffa8:	e797      	b.n	800feda <_malloc_r+0x22>
 800ffaa:	6025      	str	r5, [r4, #0]
 800ffac:	e7dc      	b.n	800ff68 <_malloc_r+0xb0>
 800ffae:	605b      	str	r3, [r3, #4]
 800ffb0:	deff      	udf	#255	; 0xff
 800ffb2:	bf00      	nop
 800ffb4:	200023b8 	.word	0x200023b8

0800ffb8 <_printf_common>:
 800ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffbc:	4616      	mov	r6, r2
 800ffbe:	4699      	mov	r9, r3
 800ffc0:	688a      	ldr	r2, [r1, #8]
 800ffc2:	690b      	ldr	r3, [r1, #16]
 800ffc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	bfb8      	it	lt
 800ffcc:	4613      	movlt	r3, r2
 800ffce:	6033      	str	r3, [r6, #0]
 800ffd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	b10a      	cbz	r2, 800ffde <_printf_common+0x26>
 800ffda:	3301      	adds	r3, #1
 800ffdc:	6033      	str	r3, [r6, #0]
 800ffde:	6823      	ldr	r3, [r4, #0]
 800ffe0:	0699      	lsls	r1, r3, #26
 800ffe2:	bf42      	ittt	mi
 800ffe4:	6833      	ldrmi	r3, [r6, #0]
 800ffe6:	3302      	addmi	r3, #2
 800ffe8:	6033      	strmi	r3, [r6, #0]
 800ffea:	6825      	ldr	r5, [r4, #0]
 800ffec:	f015 0506 	ands.w	r5, r5, #6
 800fff0:	d106      	bne.n	8010000 <_printf_common+0x48>
 800fff2:	f104 0a19 	add.w	sl, r4, #25
 800fff6:	68e3      	ldr	r3, [r4, #12]
 800fff8:	6832      	ldr	r2, [r6, #0]
 800fffa:	1a9b      	subs	r3, r3, r2
 800fffc:	42ab      	cmp	r3, r5
 800fffe:	dc26      	bgt.n	801004e <_printf_common+0x96>
 8010000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010004:	1e13      	subs	r3, r2, #0
 8010006:	6822      	ldr	r2, [r4, #0]
 8010008:	bf18      	it	ne
 801000a:	2301      	movne	r3, #1
 801000c:	0692      	lsls	r2, r2, #26
 801000e:	d42b      	bmi.n	8010068 <_printf_common+0xb0>
 8010010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010014:	4649      	mov	r1, r9
 8010016:	4638      	mov	r0, r7
 8010018:	47c0      	blx	r8
 801001a:	3001      	adds	r0, #1
 801001c:	d01e      	beq.n	801005c <_printf_common+0xa4>
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	6922      	ldr	r2, [r4, #16]
 8010022:	f003 0306 	and.w	r3, r3, #6
 8010026:	2b04      	cmp	r3, #4
 8010028:	bf02      	ittt	eq
 801002a:	68e5      	ldreq	r5, [r4, #12]
 801002c:	6833      	ldreq	r3, [r6, #0]
 801002e:	1aed      	subeq	r5, r5, r3
 8010030:	68a3      	ldr	r3, [r4, #8]
 8010032:	bf0c      	ite	eq
 8010034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010038:	2500      	movne	r5, #0
 801003a:	4293      	cmp	r3, r2
 801003c:	bfc4      	itt	gt
 801003e:	1a9b      	subgt	r3, r3, r2
 8010040:	18ed      	addgt	r5, r5, r3
 8010042:	2600      	movs	r6, #0
 8010044:	341a      	adds	r4, #26
 8010046:	42b5      	cmp	r5, r6
 8010048:	d11a      	bne.n	8010080 <_printf_common+0xc8>
 801004a:	2000      	movs	r0, #0
 801004c:	e008      	b.n	8010060 <_printf_common+0xa8>
 801004e:	2301      	movs	r3, #1
 8010050:	4652      	mov	r2, sl
 8010052:	4649      	mov	r1, r9
 8010054:	4638      	mov	r0, r7
 8010056:	47c0      	blx	r8
 8010058:	3001      	adds	r0, #1
 801005a:	d103      	bne.n	8010064 <_printf_common+0xac>
 801005c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010064:	3501      	adds	r5, #1
 8010066:	e7c6      	b.n	800fff6 <_printf_common+0x3e>
 8010068:	18e1      	adds	r1, r4, r3
 801006a:	1c5a      	adds	r2, r3, #1
 801006c:	2030      	movs	r0, #48	; 0x30
 801006e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010072:	4422      	add	r2, r4
 8010074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801007c:	3302      	adds	r3, #2
 801007e:	e7c7      	b.n	8010010 <_printf_common+0x58>
 8010080:	2301      	movs	r3, #1
 8010082:	4622      	mov	r2, r4
 8010084:	4649      	mov	r1, r9
 8010086:	4638      	mov	r0, r7
 8010088:	47c0      	blx	r8
 801008a:	3001      	adds	r0, #1
 801008c:	d0e6      	beq.n	801005c <_printf_common+0xa4>
 801008e:	3601      	adds	r6, #1
 8010090:	e7d9      	b.n	8010046 <_printf_common+0x8e>
	...

08010094 <_printf_i>:
 8010094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	7e0f      	ldrb	r7, [r1, #24]
 801009a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801009c:	2f78      	cmp	r7, #120	; 0x78
 801009e:	4691      	mov	r9, r2
 80100a0:	4680      	mov	r8, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	469a      	mov	sl, r3
 80100a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80100aa:	d807      	bhi.n	80100bc <_printf_i+0x28>
 80100ac:	2f62      	cmp	r7, #98	; 0x62
 80100ae:	d80a      	bhi.n	80100c6 <_printf_i+0x32>
 80100b0:	2f00      	cmp	r7, #0
 80100b2:	f000 80d4 	beq.w	801025e <_printf_i+0x1ca>
 80100b6:	2f58      	cmp	r7, #88	; 0x58
 80100b8:	f000 80c0 	beq.w	801023c <_printf_i+0x1a8>
 80100bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100c4:	e03a      	b.n	801013c <_printf_i+0xa8>
 80100c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100ca:	2b15      	cmp	r3, #21
 80100cc:	d8f6      	bhi.n	80100bc <_printf_i+0x28>
 80100ce:	a101      	add	r1, pc, #4	; (adr r1, 80100d4 <_printf_i+0x40>)
 80100d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100d4:	0801012d 	.word	0x0801012d
 80100d8:	08010141 	.word	0x08010141
 80100dc:	080100bd 	.word	0x080100bd
 80100e0:	080100bd 	.word	0x080100bd
 80100e4:	080100bd 	.word	0x080100bd
 80100e8:	080100bd 	.word	0x080100bd
 80100ec:	08010141 	.word	0x08010141
 80100f0:	080100bd 	.word	0x080100bd
 80100f4:	080100bd 	.word	0x080100bd
 80100f8:	080100bd 	.word	0x080100bd
 80100fc:	080100bd 	.word	0x080100bd
 8010100:	08010245 	.word	0x08010245
 8010104:	0801016d 	.word	0x0801016d
 8010108:	080101ff 	.word	0x080101ff
 801010c:	080100bd 	.word	0x080100bd
 8010110:	080100bd 	.word	0x080100bd
 8010114:	08010267 	.word	0x08010267
 8010118:	080100bd 	.word	0x080100bd
 801011c:	0801016d 	.word	0x0801016d
 8010120:	080100bd 	.word	0x080100bd
 8010124:	080100bd 	.word	0x080100bd
 8010128:	08010207 	.word	0x08010207
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	1d1a      	adds	r2, r3, #4
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	602a      	str	r2, [r5, #0]
 8010134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801013c:	2301      	movs	r3, #1
 801013e:	e09f      	b.n	8010280 <_printf_i+0x1ec>
 8010140:	6820      	ldr	r0, [r4, #0]
 8010142:	682b      	ldr	r3, [r5, #0]
 8010144:	0607      	lsls	r7, r0, #24
 8010146:	f103 0104 	add.w	r1, r3, #4
 801014a:	6029      	str	r1, [r5, #0]
 801014c:	d501      	bpl.n	8010152 <_printf_i+0xbe>
 801014e:	681e      	ldr	r6, [r3, #0]
 8010150:	e003      	b.n	801015a <_printf_i+0xc6>
 8010152:	0646      	lsls	r6, r0, #25
 8010154:	d5fb      	bpl.n	801014e <_printf_i+0xba>
 8010156:	f9b3 6000 	ldrsh.w	r6, [r3]
 801015a:	2e00      	cmp	r6, #0
 801015c:	da03      	bge.n	8010166 <_printf_i+0xd2>
 801015e:	232d      	movs	r3, #45	; 0x2d
 8010160:	4276      	negs	r6, r6
 8010162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010166:	485a      	ldr	r0, [pc, #360]	; (80102d0 <_printf_i+0x23c>)
 8010168:	230a      	movs	r3, #10
 801016a:	e012      	b.n	8010192 <_printf_i+0xfe>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	6820      	ldr	r0, [r4, #0]
 8010170:	1d19      	adds	r1, r3, #4
 8010172:	6029      	str	r1, [r5, #0]
 8010174:	0605      	lsls	r5, r0, #24
 8010176:	d501      	bpl.n	801017c <_printf_i+0xe8>
 8010178:	681e      	ldr	r6, [r3, #0]
 801017a:	e002      	b.n	8010182 <_printf_i+0xee>
 801017c:	0641      	lsls	r1, r0, #25
 801017e:	d5fb      	bpl.n	8010178 <_printf_i+0xe4>
 8010180:	881e      	ldrh	r6, [r3, #0]
 8010182:	4853      	ldr	r0, [pc, #332]	; (80102d0 <_printf_i+0x23c>)
 8010184:	2f6f      	cmp	r7, #111	; 0x6f
 8010186:	bf0c      	ite	eq
 8010188:	2308      	moveq	r3, #8
 801018a:	230a      	movne	r3, #10
 801018c:	2100      	movs	r1, #0
 801018e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010192:	6865      	ldr	r5, [r4, #4]
 8010194:	60a5      	str	r5, [r4, #8]
 8010196:	2d00      	cmp	r5, #0
 8010198:	bfa2      	ittt	ge
 801019a:	6821      	ldrge	r1, [r4, #0]
 801019c:	f021 0104 	bicge.w	r1, r1, #4
 80101a0:	6021      	strge	r1, [r4, #0]
 80101a2:	b90e      	cbnz	r6, 80101a8 <_printf_i+0x114>
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	d04b      	beq.n	8010240 <_printf_i+0x1ac>
 80101a8:	4615      	mov	r5, r2
 80101aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80101ae:	fb03 6711 	mls	r7, r3, r1, r6
 80101b2:	5dc7      	ldrb	r7, [r0, r7]
 80101b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101b8:	4637      	mov	r7, r6
 80101ba:	42bb      	cmp	r3, r7
 80101bc:	460e      	mov	r6, r1
 80101be:	d9f4      	bls.n	80101aa <_printf_i+0x116>
 80101c0:	2b08      	cmp	r3, #8
 80101c2:	d10b      	bne.n	80101dc <_printf_i+0x148>
 80101c4:	6823      	ldr	r3, [r4, #0]
 80101c6:	07de      	lsls	r6, r3, #31
 80101c8:	d508      	bpl.n	80101dc <_printf_i+0x148>
 80101ca:	6923      	ldr	r3, [r4, #16]
 80101cc:	6861      	ldr	r1, [r4, #4]
 80101ce:	4299      	cmp	r1, r3
 80101d0:	bfde      	ittt	le
 80101d2:	2330      	movle	r3, #48	; 0x30
 80101d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80101dc:	1b52      	subs	r2, r2, r5
 80101de:	6122      	str	r2, [r4, #16]
 80101e0:	f8cd a000 	str.w	sl, [sp]
 80101e4:	464b      	mov	r3, r9
 80101e6:	aa03      	add	r2, sp, #12
 80101e8:	4621      	mov	r1, r4
 80101ea:	4640      	mov	r0, r8
 80101ec:	f7ff fee4 	bl	800ffb8 <_printf_common>
 80101f0:	3001      	adds	r0, #1
 80101f2:	d14a      	bne.n	801028a <_printf_i+0x1f6>
 80101f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101f8:	b004      	add	sp, #16
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	f043 0320 	orr.w	r3, r3, #32
 8010204:	6023      	str	r3, [r4, #0]
 8010206:	4833      	ldr	r0, [pc, #204]	; (80102d4 <_printf_i+0x240>)
 8010208:	2778      	movs	r7, #120	; 0x78
 801020a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	6829      	ldr	r1, [r5, #0]
 8010212:	061f      	lsls	r7, r3, #24
 8010214:	f851 6b04 	ldr.w	r6, [r1], #4
 8010218:	d402      	bmi.n	8010220 <_printf_i+0x18c>
 801021a:	065f      	lsls	r7, r3, #25
 801021c:	bf48      	it	mi
 801021e:	b2b6      	uxthmi	r6, r6
 8010220:	07df      	lsls	r7, r3, #31
 8010222:	bf48      	it	mi
 8010224:	f043 0320 	orrmi.w	r3, r3, #32
 8010228:	6029      	str	r1, [r5, #0]
 801022a:	bf48      	it	mi
 801022c:	6023      	strmi	r3, [r4, #0]
 801022e:	b91e      	cbnz	r6, 8010238 <_printf_i+0x1a4>
 8010230:	6823      	ldr	r3, [r4, #0]
 8010232:	f023 0320 	bic.w	r3, r3, #32
 8010236:	6023      	str	r3, [r4, #0]
 8010238:	2310      	movs	r3, #16
 801023a:	e7a7      	b.n	801018c <_printf_i+0xf8>
 801023c:	4824      	ldr	r0, [pc, #144]	; (80102d0 <_printf_i+0x23c>)
 801023e:	e7e4      	b.n	801020a <_printf_i+0x176>
 8010240:	4615      	mov	r5, r2
 8010242:	e7bd      	b.n	80101c0 <_printf_i+0x12c>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	6826      	ldr	r6, [r4, #0]
 8010248:	6961      	ldr	r1, [r4, #20]
 801024a:	1d18      	adds	r0, r3, #4
 801024c:	6028      	str	r0, [r5, #0]
 801024e:	0635      	lsls	r5, r6, #24
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	d501      	bpl.n	8010258 <_printf_i+0x1c4>
 8010254:	6019      	str	r1, [r3, #0]
 8010256:	e002      	b.n	801025e <_printf_i+0x1ca>
 8010258:	0670      	lsls	r0, r6, #25
 801025a:	d5fb      	bpl.n	8010254 <_printf_i+0x1c0>
 801025c:	8019      	strh	r1, [r3, #0]
 801025e:	2300      	movs	r3, #0
 8010260:	6123      	str	r3, [r4, #16]
 8010262:	4615      	mov	r5, r2
 8010264:	e7bc      	b.n	80101e0 <_printf_i+0x14c>
 8010266:	682b      	ldr	r3, [r5, #0]
 8010268:	1d1a      	adds	r2, r3, #4
 801026a:	602a      	str	r2, [r5, #0]
 801026c:	681d      	ldr	r5, [r3, #0]
 801026e:	6862      	ldr	r2, [r4, #4]
 8010270:	2100      	movs	r1, #0
 8010272:	4628      	mov	r0, r5
 8010274:	f7ef ff94 	bl	80001a0 <memchr>
 8010278:	b108      	cbz	r0, 801027e <_printf_i+0x1ea>
 801027a:	1b40      	subs	r0, r0, r5
 801027c:	6060      	str	r0, [r4, #4]
 801027e:	6863      	ldr	r3, [r4, #4]
 8010280:	6123      	str	r3, [r4, #16]
 8010282:	2300      	movs	r3, #0
 8010284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010288:	e7aa      	b.n	80101e0 <_printf_i+0x14c>
 801028a:	6923      	ldr	r3, [r4, #16]
 801028c:	462a      	mov	r2, r5
 801028e:	4649      	mov	r1, r9
 8010290:	4640      	mov	r0, r8
 8010292:	47d0      	blx	sl
 8010294:	3001      	adds	r0, #1
 8010296:	d0ad      	beq.n	80101f4 <_printf_i+0x160>
 8010298:	6823      	ldr	r3, [r4, #0]
 801029a:	079b      	lsls	r3, r3, #30
 801029c:	d413      	bmi.n	80102c6 <_printf_i+0x232>
 801029e:	68e0      	ldr	r0, [r4, #12]
 80102a0:	9b03      	ldr	r3, [sp, #12]
 80102a2:	4298      	cmp	r0, r3
 80102a4:	bfb8      	it	lt
 80102a6:	4618      	movlt	r0, r3
 80102a8:	e7a6      	b.n	80101f8 <_printf_i+0x164>
 80102aa:	2301      	movs	r3, #1
 80102ac:	4632      	mov	r2, r6
 80102ae:	4649      	mov	r1, r9
 80102b0:	4640      	mov	r0, r8
 80102b2:	47d0      	blx	sl
 80102b4:	3001      	adds	r0, #1
 80102b6:	d09d      	beq.n	80101f4 <_printf_i+0x160>
 80102b8:	3501      	adds	r5, #1
 80102ba:	68e3      	ldr	r3, [r4, #12]
 80102bc:	9903      	ldr	r1, [sp, #12]
 80102be:	1a5b      	subs	r3, r3, r1
 80102c0:	42ab      	cmp	r3, r5
 80102c2:	dcf2      	bgt.n	80102aa <_printf_i+0x216>
 80102c4:	e7eb      	b.n	801029e <_printf_i+0x20a>
 80102c6:	2500      	movs	r5, #0
 80102c8:	f104 0619 	add.w	r6, r4, #25
 80102cc:	e7f5      	b.n	80102ba <_printf_i+0x226>
 80102ce:	bf00      	nop
 80102d0:	08010d51 	.word	0x08010d51
 80102d4:	08010d62 	.word	0x08010d62

080102d8 <__sflush_r>:
 80102d8:	898a      	ldrh	r2, [r1, #12]
 80102da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	4605      	mov	r5, r0
 80102e0:	0710      	lsls	r0, r2, #28
 80102e2:	460c      	mov	r4, r1
 80102e4:	d458      	bmi.n	8010398 <__sflush_r+0xc0>
 80102e6:	684b      	ldr	r3, [r1, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	dc05      	bgt.n	80102f8 <__sflush_r+0x20>
 80102ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	dc02      	bgt.n	80102f8 <__sflush_r+0x20>
 80102f2:	2000      	movs	r0, #0
 80102f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102fa:	2e00      	cmp	r6, #0
 80102fc:	d0f9      	beq.n	80102f2 <__sflush_r+0x1a>
 80102fe:	2300      	movs	r3, #0
 8010300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010304:	682f      	ldr	r7, [r5, #0]
 8010306:	6a21      	ldr	r1, [r4, #32]
 8010308:	602b      	str	r3, [r5, #0]
 801030a:	d032      	beq.n	8010372 <__sflush_r+0x9a>
 801030c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	075a      	lsls	r2, r3, #29
 8010312:	d505      	bpl.n	8010320 <__sflush_r+0x48>
 8010314:	6863      	ldr	r3, [r4, #4]
 8010316:	1ac0      	subs	r0, r0, r3
 8010318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801031a:	b10b      	cbz	r3, 8010320 <__sflush_r+0x48>
 801031c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801031e:	1ac0      	subs	r0, r0, r3
 8010320:	2300      	movs	r3, #0
 8010322:	4602      	mov	r2, r0
 8010324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010326:	6a21      	ldr	r1, [r4, #32]
 8010328:	4628      	mov	r0, r5
 801032a:	47b0      	blx	r6
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	89a3      	ldrh	r3, [r4, #12]
 8010330:	d106      	bne.n	8010340 <__sflush_r+0x68>
 8010332:	6829      	ldr	r1, [r5, #0]
 8010334:	291d      	cmp	r1, #29
 8010336:	d82b      	bhi.n	8010390 <__sflush_r+0xb8>
 8010338:	4a29      	ldr	r2, [pc, #164]	; (80103e0 <__sflush_r+0x108>)
 801033a:	410a      	asrs	r2, r1
 801033c:	07d6      	lsls	r6, r2, #31
 801033e:	d427      	bmi.n	8010390 <__sflush_r+0xb8>
 8010340:	2200      	movs	r2, #0
 8010342:	6062      	str	r2, [r4, #4]
 8010344:	04d9      	lsls	r1, r3, #19
 8010346:	6922      	ldr	r2, [r4, #16]
 8010348:	6022      	str	r2, [r4, #0]
 801034a:	d504      	bpl.n	8010356 <__sflush_r+0x7e>
 801034c:	1c42      	adds	r2, r0, #1
 801034e:	d101      	bne.n	8010354 <__sflush_r+0x7c>
 8010350:	682b      	ldr	r3, [r5, #0]
 8010352:	b903      	cbnz	r3, 8010356 <__sflush_r+0x7e>
 8010354:	6560      	str	r0, [r4, #84]	; 0x54
 8010356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010358:	602f      	str	r7, [r5, #0]
 801035a:	2900      	cmp	r1, #0
 801035c:	d0c9      	beq.n	80102f2 <__sflush_r+0x1a>
 801035e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010362:	4299      	cmp	r1, r3
 8010364:	d002      	beq.n	801036c <__sflush_r+0x94>
 8010366:	4628      	mov	r0, r5
 8010368:	f000 fa6c 	bl	8010844 <_free_r>
 801036c:	2000      	movs	r0, #0
 801036e:	6360      	str	r0, [r4, #52]	; 0x34
 8010370:	e7c0      	b.n	80102f4 <__sflush_r+0x1c>
 8010372:	2301      	movs	r3, #1
 8010374:	4628      	mov	r0, r5
 8010376:	47b0      	blx	r6
 8010378:	1c41      	adds	r1, r0, #1
 801037a:	d1c8      	bne.n	801030e <__sflush_r+0x36>
 801037c:	682b      	ldr	r3, [r5, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d0c5      	beq.n	801030e <__sflush_r+0x36>
 8010382:	2b1d      	cmp	r3, #29
 8010384:	d001      	beq.n	801038a <__sflush_r+0xb2>
 8010386:	2b16      	cmp	r3, #22
 8010388:	d101      	bne.n	801038e <__sflush_r+0xb6>
 801038a:	602f      	str	r7, [r5, #0]
 801038c:	e7b1      	b.n	80102f2 <__sflush_r+0x1a>
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	e7ad      	b.n	80102f4 <__sflush_r+0x1c>
 8010398:	690f      	ldr	r7, [r1, #16]
 801039a:	2f00      	cmp	r7, #0
 801039c:	d0a9      	beq.n	80102f2 <__sflush_r+0x1a>
 801039e:	0793      	lsls	r3, r2, #30
 80103a0:	680e      	ldr	r6, [r1, #0]
 80103a2:	bf08      	it	eq
 80103a4:	694b      	ldreq	r3, [r1, #20]
 80103a6:	600f      	str	r7, [r1, #0]
 80103a8:	bf18      	it	ne
 80103aa:	2300      	movne	r3, #0
 80103ac:	eba6 0807 	sub.w	r8, r6, r7
 80103b0:	608b      	str	r3, [r1, #8]
 80103b2:	f1b8 0f00 	cmp.w	r8, #0
 80103b6:	dd9c      	ble.n	80102f2 <__sflush_r+0x1a>
 80103b8:	6a21      	ldr	r1, [r4, #32]
 80103ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103bc:	4643      	mov	r3, r8
 80103be:	463a      	mov	r2, r7
 80103c0:	4628      	mov	r0, r5
 80103c2:	47b0      	blx	r6
 80103c4:	2800      	cmp	r0, #0
 80103c6:	dc06      	bgt.n	80103d6 <__sflush_r+0xfe>
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103d4:	e78e      	b.n	80102f4 <__sflush_r+0x1c>
 80103d6:	4407      	add	r7, r0
 80103d8:	eba8 0800 	sub.w	r8, r8, r0
 80103dc:	e7e9      	b.n	80103b2 <__sflush_r+0xda>
 80103de:	bf00      	nop
 80103e0:	dfbffffe 	.word	0xdfbffffe

080103e4 <_fflush_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	690b      	ldr	r3, [r1, #16]
 80103e8:	4605      	mov	r5, r0
 80103ea:	460c      	mov	r4, r1
 80103ec:	b913      	cbnz	r3, 80103f4 <_fflush_r+0x10>
 80103ee:	2500      	movs	r5, #0
 80103f0:	4628      	mov	r0, r5
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	b118      	cbz	r0, 80103fe <_fflush_r+0x1a>
 80103f6:	6a03      	ldr	r3, [r0, #32]
 80103f8:	b90b      	cbnz	r3, 80103fe <_fflush_r+0x1a>
 80103fa:	f7ff fb11 	bl	800fa20 <__sinit>
 80103fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d0f3      	beq.n	80103ee <_fflush_r+0xa>
 8010406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010408:	07d0      	lsls	r0, r2, #31
 801040a:	d404      	bmi.n	8010416 <_fflush_r+0x32>
 801040c:	0599      	lsls	r1, r3, #22
 801040e:	d402      	bmi.n	8010416 <_fflush_r+0x32>
 8010410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010412:	f7ff fbc9 	bl	800fba8 <__retarget_lock_acquire_recursive>
 8010416:	4628      	mov	r0, r5
 8010418:	4621      	mov	r1, r4
 801041a:	f7ff ff5d 	bl	80102d8 <__sflush_r>
 801041e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010420:	07da      	lsls	r2, r3, #31
 8010422:	4605      	mov	r5, r0
 8010424:	d4e4      	bmi.n	80103f0 <_fflush_r+0xc>
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	059b      	lsls	r3, r3, #22
 801042a:	d4e1      	bmi.n	80103f0 <_fflush_r+0xc>
 801042c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801042e:	f7ff fbbc 	bl	800fbaa <__retarget_lock_release_recursive>
 8010432:	e7dd      	b.n	80103f0 <_fflush_r+0xc>

08010434 <__malloc_lock>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__malloc_lock+0x8>)
 8010436:	f7ff bbb7 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	200023b4 	.word	0x200023b4

08010440 <__malloc_unlock>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__malloc_unlock+0x8>)
 8010442:	f7ff bbb2 	b.w	800fbaa <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	200023b4 	.word	0x200023b4

0801044c <__sread>:
 801044c:	b510      	push	{r4, lr}
 801044e:	460c      	mov	r4, r1
 8010450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010454:	f000 f9c2 	bl	80107dc <_read_r>
 8010458:	2800      	cmp	r0, #0
 801045a:	bfab      	itete	ge
 801045c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801045e:	89a3      	ldrhlt	r3, [r4, #12]
 8010460:	181b      	addge	r3, r3, r0
 8010462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010466:	bfac      	ite	ge
 8010468:	6563      	strge	r3, [r4, #84]	; 0x54
 801046a:	81a3      	strhlt	r3, [r4, #12]
 801046c:	bd10      	pop	{r4, pc}

0801046e <__swrite>:
 801046e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010472:	461f      	mov	r7, r3
 8010474:	898b      	ldrh	r3, [r1, #12]
 8010476:	05db      	lsls	r3, r3, #23
 8010478:	4605      	mov	r5, r0
 801047a:	460c      	mov	r4, r1
 801047c:	4616      	mov	r6, r2
 801047e:	d505      	bpl.n	801048c <__swrite+0x1e>
 8010480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010484:	2302      	movs	r3, #2
 8010486:	2200      	movs	r2, #0
 8010488:	f000 f996 	bl	80107b8 <_lseek_r>
 801048c:	89a3      	ldrh	r3, [r4, #12]
 801048e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010496:	81a3      	strh	r3, [r4, #12]
 8010498:	4632      	mov	r2, r6
 801049a:	463b      	mov	r3, r7
 801049c:	4628      	mov	r0, r5
 801049e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	f000 b9bd 	b.w	8010820 <_write_r>

080104a6 <__sseek>:
 80104a6:	b510      	push	{r4, lr}
 80104a8:	460c      	mov	r4, r1
 80104aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ae:	f000 f983 	bl	80107b8 <_lseek_r>
 80104b2:	1c43      	adds	r3, r0, #1
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	bf15      	itete	ne
 80104b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80104ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104c2:	81a3      	strheq	r3, [r4, #12]
 80104c4:	bf18      	it	ne
 80104c6:	81a3      	strhne	r3, [r4, #12]
 80104c8:	bd10      	pop	{r4, pc}

080104ca <__sclose>:
 80104ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ce:	f000 b941 	b.w	8010754 <_close_r>

080104d2 <_realloc_r>:
 80104d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d6:	4680      	mov	r8, r0
 80104d8:	4614      	mov	r4, r2
 80104da:	460e      	mov	r6, r1
 80104dc:	b921      	cbnz	r1, 80104e8 <_realloc_r+0x16>
 80104de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104e2:	4611      	mov	r1, r2
 80104e4:	f7ff bce8 	b.w	800feb8 <_malloc_r>
 80104e8:	b92a      	cbnz	r2, 80104f6 <_realloc_r+0x24>
 80104ea:	f000 f9ab 	bl	8010844 <_free_r>
 80104ee:	4625      	mov	r5, r4
 80104f0:	4628      	mov	r0, r5
 80104f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f6:	f000 f9f1 	bl	80108dc <_malloc_usable_size_r>
 80104fa:	4284      	cmp	r4, r0
 80104fc:	4607      	mov	r7, r0
 80104fe:	d802      	bhi.n	8010506 <_realloc_r+0x34>
 8010500:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010504:	d812      	bhi.n	801052c <_realloc_r+0x5a>
 8010506:	4621      	mov	r1, r4
 8010508:	4640      	mov	r0, r8
 801050a:	f7ff fcd5 	bl	800feb8 <_malloc_r>
 801050e:	4605      	mov	r5, r0
 8010510:	2800      	cmp	r0, #0
 8010512:	d0ed      	beq.n	80104f0 <_realloc_r+0x1e>
 8010514:	42bc      	cmp	r4, r7
 8010516:	4622      	mov	r2, r4
 8010518:	4631      	mov	r1, r6
 801051a:	bf28      	it	cs
 801051c:	463a      	movcs	r2, r7
 801051e:	f7ff fb45 	bl	800fbac <memcpy>
 8010522:	4631      	mov	r1, r6
 8010524:	4640      	mov	r0, r8
 8010526:	f000 f98d 	bl	8010844 <_free_r>
 801052a:	e7e1      	b.n	80104f0 <_realloc_r+0x1e>
 801052c:	4635      	mov	r5, r6
 801052e:	e7df      	b.n	80104f0 <_realloc_r+0x1e>

08010530 <__swbuf_r>:
 8010530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010532:	460e      	mov	r6, r1
 8010534:	4614      	mov	r4, r2
 8010536:	4605      	mov	r5, r0
 8010538:	b118      	cbz	r0, 8010542 <__swbuf_r+0x12>
 801053a:	6a03      	ldr	r3, [r0, #32]
 801053c:	b90b      	cbnz	r3, 8010542 <__swbuf_r+0x12>
 801053e:	f7ff fa6f 	bl	800fa20 <__sinit>
 8010542:	69a3      	ldr	r3, [r4, #24]
 8010544:	60a3      	str	r3, [r4, #8]
 8010546:	89a3      	ldrh	r3, [r4, #12]
 8010548:	071a      	lsls	r2, r3, #28
 801054a:	d525      	bpl.n	8010598 <__swbuf_r+0x68>
 801054c:	6923      	ldr	r3, [r4, #16]
 801054e:	b31b      	cbz	r3, 8010598 <__swbuf_r+0x68>
 8010550:	6823      	ldr	r3, [r4, #0]
 8010552:	6922      	ldr	r2, [r4, #16]
 8010554:	1a98      	subs	r0, r3, r2
 8010556:	6963      	ldr	r3, [r4, #20]
 8010558:	b2f6      	uxtb	r6, r6
 801055a:	4283      	cmp	r3, r0
 801055c:	4637      	mov	r7, r6
 801055e:	dc04      	bgt.n	801056a <__swbuf_r+0x3a>
 8010560:	4621      	mov	r1, r4
 8010562:	4628      	mov	r0, r5
 8010564:	f7ff ff3e 	bl	80103e4 <_fflush_r>
 8010568:	b9e0      	cbnz	r0, 80105a4 <__swbuf_r+0x74>
 801056a:	68a3      	ldr	r3, [r4, #8]
 801056c:	3b01      	subs	r3, #1
 801056e:	60a3      	str	r3, [r4, #8]
 8010570:	6823      	ldr	r3, [r4, #0]
 8010572:	1c5a      	adds	r2, r3, #1
 8010574:	6022      	str	r2, [r4, #0]
 8010576:	701e      	strb	r6, [r3, #0]
 8010578:	6962      	ldr	r2, [r4, #20]
 801057a:	1c43      	adds	r3, r0, #1
 801057c:	429a      	cmp	r2, r3
 801057e:	d004      	beq.n	801058a <__swbuf_r+0x5a>
 8010580:	89a3      	ldrh	r3, [r4, #12]
 8010582:	07db      	lsls	r3, r3, #31
 8010584:	d506      	bpl.n	8010594 <__swbuf_r+0x64>
 8010586:	2e0a      	cmp	r6, #10
 8010588:	d104      	bne.n	8010594 <__swbuf_r+0x64>
 801058a:	4621      	mov	r1, r4
 801058c:	4628      	mov	r0, r5
 801058e:	f7ff ff29 	bl	80103e4 <_fflush_r>
 8010592:	b938      	cbnz	r0, 80105a4 <__swbuf_r+0x74>
 8010594:	4638      	mov	r0, r7
 8010596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010598:	4621      	mov	r1, r4
 801059a:	4628      	mov	r0, r5
 801059c:	f000 f806 	bl	80105ac <__swsetup_r>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d0d5      	beq.n	8010550 <__swbuf_r+0x20>
 80105a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80105a8:	e7f4      	b.n	8010594 <__swbuf_r+0x64>
	...

080105ac <__swsetup_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	4b2a      	ldr	r3, [pc, #168]	; (8010658 <__swsetup_r+0xac>)
 80105b0:	4605      	mov	r5, r0
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	460c      	mov	r4, r1
 80105b6:	b118      	cbz	r0, 80105c0 <__swsetup_r+0x14>
 80105b8:	6a03      	ldr	r3, [r0, #32]
 80105ba:	b90b      	cbnz	r3, 80105c0 <__swsetup_r+0x14>
 80105bc:	f7ff fa30 	bl	800fa20 <__sinit>
 80105c0:	89a3      	ldrh	r3, [r4, #12]
 80105c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105c6:	0718      	lsls	r0, r3, #28
 80105c8:	d422      	bmi.n	8010610 <__swsetup_r+0x64>
 80105ca:	06d9      	lsls	r1, r3, #27
 80105cc:	d407      	bmi.n	80105de <__swsetup_r+0x32>
 80105ce:	2309      	movs	r3, #9
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105dc:	e034      	b.n	8010648 <__swsetup_r+0x9c>
 80105de:	0758      	lsls	r0, r3, #29
 80105e0:	d512      	bpl.n	8010608 <__swsetup_r+0x5c>
 80105e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105e4:	b141      	cbz	r1, 80105f8 <__swsetup_r+0x4c>
 80105e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105ea:	4299      	cmp	r1, r3
 80105ec:	d002      	beq.n	80105f4 <__swsetup_r+0x48>
 80105ee:	4628      	mov	r0, r5
 80105f0:	f000 f928 	bl	8010844 <_free_r>
 80105f4:	2300      	movs	r3, #0
 80105f6:	6363      	str	r3, [r4, #52]	; 0x34
 80105f8:	89a3      	ldrh	r3, [r4, #12]
 80105fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	2300      	movs	r3, #0
 8010602:	6063      	str	r3, [r4, #4]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	6023      	str	r3, [r4, #0]
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	f043 0308 	orr.w	r3, r3, #8
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	6923      	ldr	r3, [r4, #16]
 8010612:	b94b      	cbnz	r3, 8010628 <__swsetup_r+0x7c>
 8010614:	89a3      	ldrh	r3, [r4, #12]
 8010616:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801061a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801061e:	d003      	beq.n	8010628 <__swsetup_r+0x7c>
 8010620:	4621      	mov	r1, r4
 8010622:	4628      	mov	r0, r5
 8010624:	f000 f840 	bl	80106a8 <__smakebuf_r>
 8010628:	89a0      	ldrh	r0, [r4, #12]
 801062a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801062e:	f010 0301 	ands.w	r3, r0, #1
 8010632:	d00a      	beq.n	801064a <__swsetup_r+0x9e>
 8010634:	2300      	movs	r3, #0
 8010636:	60a3      	str	r3, [r4, #8]
 8010638:	6963      	ldr	r3, [r4, #20]
 801063a:	425b      	negs	r3, r3
 801063c:	61a3      	str	r3, [r4, #24]
 801063e:	6923      	ldr	r3, [r4, #16]
 8010640:	b943      	cbnz	r3, 8010654 <__swsetup_r+0xa8>
 8010642:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010646:	d1c4      	bne.n	80105d2 <__swsetup_r+0x26>
 8010648:	bd38      	pop	{r3, r4, r5, pc}
 801064a:	0781      	lsls	r1, r0, #30
 801064c:	bf58      	it	pl
 801064e:	6963      	ldrpl	r3, [r4, #20]
 8010650:	60a3      	str	r3, [r4, #8]
 8010652:	e7f4      	b.n	801063e <__swsetup_r+0x92>
 8010654:	2000      	movs	r0, #0
 8010656:	e7f7      	b.n	8010648 <__swsetup_r+0x9c>
 8010658:	20000204 	.word	0x20000204

0801065c <__swhatbuf_r>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	460c      	mov	r4, r1
 8010660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010664:	2900      	cmp	r1, #0
 8010666:	b096      	sub	sp, #88	; 0x58
 8010668:	4615      	mov	r5, r2
 801066a:	461e      	mov	r6, r3
 801066c:	da0d      	bge.n	801068a <__swhatbuf_r+0x2e>
 801066e:	89a3      	ldrh	r3, [r4, #12]
 8010670:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010674:	f04f 0100 	mov.w	r1, #0
 8010678:	bf0c      	ite	eq
 801067a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801067e:	2340      	movne	r3, #64	; 0x40
 8010680:	2000      	movs	r0, #0
 8010682:	6031      	str	r1, [r6, #0]
 8010684:	602b      	str	r3, [r5, #0]
 8010686:	b016      	add	sp, #88	; 0x58
 8010688:	bd70      	pop	{r4, r5, r6, pc}
 801068a:	466a      	mov	r2, sp
 801068c:	f000 f872 	bl	8010774 <_fstat_r>
 8010690:	2800      	cmp	r0, #0
 8010692:	dbec      	blt.n	801066e <__swhatbuf_r+0x12>
 8010694:	9901      	ldr	r1, [sp, #4]
 8010696:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801069a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801069e:	4259      	negs	r1, r3
 80106a0:	4159      	adcs	r1, r3
 80106a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106a6:	e7eb      	b.n	8010680 <__swhatbuf_r+0x24>

080106a8 <__smakebuf_r>:
 80106a8:	898b      	ldrh	r3, [r1, #12]
 80106aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106ac:	079d      	lsls	r5, r3, #30
 80106ae:	4606      	mov	r6, r0
 80106b0:	460c      	mov	r4, r1
 80106b2:	d507      	bpl.n	80106c4 <__smakebuf_r+0x1c>
 80106b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	6123      	str	r3, [r4, #16]
 80106bc:	2301      	movs	r3, #1
 80106be:	6163      	str	r3, [r4, #20]
 80106c0:	b002      	add	sp, #8
 80106c2:	bd70      	pop	{r4, r5, r6, pc}
 80106c4:	ab01      	add	r3, sp, #4
 80106c6:	466a      	mov	r2, sp
 80106c8:	f7ff ffc8 	bl	801065c <__swhatbuf_r>
 80106cc:	9900      	ldr	r1, [sp, #0]
 80106ce:	4605      	mov	r5, r0
 80106d0:	4630      	mov	r0, r6
 80106d2:	f7ff fbf1 	bl	800feb8 <_malloc_r>
 80106d6:	b948      	cbnz	r0, 80106ec <__smakebuf_r+0x44>
 80106d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106dc:	059a      	lsls	r2, r3, #22
 80106de:	d4ef      	bmi.n	80106c0 <__smakebuf_r+0x18>
 80106e0:	f023 0303 	bic.w	r3, r3, #3
 80106e4:	f043 0302 	orr.w	r3, r3, #2
 80106e8:	81a3      	strh	r3, [r4, #12]
 80106ea:	e7e3      	b.n	80106b4 <__smakebuf_r+0xc>
 80106ec:	89a3      	ldrh	r3, [r4, #12]
 80106ee:	6020      	str	r0, [r4, #0]
 80106f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106f4:	81a3      	strh	r3, [r4, #12]
 80106f6:	9b00      	ldr	r3, [sp, #0]
 80106f8:	6163      	str	r3, [r4, #20]
 80106fa:	9b01      	ldr	r3, [sp, #4]
 80106fc:	6120      	str	r0, [r4, #16]
 80106fe:	b15b      	cbz	r3, 8010718 <__smakebuf_r+0x70>
 8010700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010704:	4630      	mov	r0, r6
 8010706:	f000 f847 	bl	8010798 <_isatty_r>
 801070a:	b128      	cbz	r0, 8010718 <__smakebuf_r+0x70>
 801070c:	89a3      	ldrh	r3, [r4, #12]
 801070e:	f023 0303 	bic.w	r3, r3, #3
 8010712:	f043 0301 	orr.w	r3, r3, #1
 8010716:	81a3      	strh	r3, [r4, #12]
 8010718:	89a3      	ldrh	r3, [r4, #12]
 801071a:	431d      	orrs	r5, r3
 801071c:	81a5      	strh	r5, [r4, #12]
 801071e:	e7cf      	b.n	80106c0 <__smakebuf_r+0x18>

08010720 <memmove>:
 8010720:	4288      	cmp	r0, r1
 8010722:	b510      	push	{r4, lr}
 8010724:	eb01 0402 	add.w	r4, r1, r2
 8010728:	d902      	bls.n	8010730 <memmove+0x10>
 801072a:	4284      	cmp	r4, r0
 801072c:	4623      	mov	r3, r4
 801072e:	d807      	bhi.n	8010740 <memmove+0x20>
 8010730:	1e43      	subs	r3, r0, #1
 8010732:	42a1      	cmp	r1, r4
 8010734:	d008      	beq.n	8010748 <memmove+0x28>
 8010736:	f811 2b01 	ldrb.w	r2, [r1], #1
 801073a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801073e:	e7f8      	b.n	8010732 <memmove+0x12>
 8010740:	4402      	add	r2, r0
 8010742:	4601      	mov	r1, r0
 8010744:	428a      	cmp	r2, r1
 8010746:	d100      	bne.n	801074a <memmove+0x2a>
 8010748:	bd10      	pop	{r4, pc}
 801074a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801074e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010752:	e7f7      	b.n	8010744 <memmove+0x24>

08010754 <_close_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4d06      	ldr	r5, [pc, #24]	; (8010770 <_close_r+0x1c>)
 8010758:	2300      	movs	r3, #0
 801075a:	4604      	mov	r4, r0
 801075c:	4608      	mov	r0, r1
 801075e:	602b      	str	r3, [r5, #0]
 8010760:	f7f0 fed3 	bl	800150a <_close>
 8010764:	1c43      	adds	r3, r0, #1
 8010766:	d102      	bne.n	801076e <_close_r+0x1a>
 8010768:	682b      	ldr	r3, [r5, #0]
 801076a:	b103      	cbz	r3, 801076e <_close_r+0x1a>
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	bd38      	pop	{r3, r4, r5, pc}
 8010770:	200023c0 	.word	0x200023c0

08010774 <_fstat_r>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4d07      	ldr	r5, [pc, #28]	; (8010794 <_fstat_r+0x20>)
 8010778:	2300      	movs	r3, #0
 801077a:	4604      	mov	r4, r0
 801077c:	4608      	mov	r0, r1
 801077e:	4611      	mov	r1, r2
 8010780:	602b      	str	r3, [r5, #0]
 8010782:	f7f0 fece 	bl	8001522 <_fstat>
 8010786:	1c43      	adds	r3, r0, #1
 8010788:	d102      	bne.n	8010790 <_fstat_r+0x1c>
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	b103      	cbz	r3, 8010790 <_fstat_r+0x1c>
 801078e:	6023      	str	r3, [r4, #0]
 8010790:	bd38      	pop	{r3, r4, r5, pc}
 8010792:	bf00      	nop
 8010794:	200023c0 	.word	0x200023c0

08010798 <_isatty_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d06      	ldr	r5, [pc, #24]	; (80107b4 <_isatty_r+0x1c>)
 801079c:	2300      	movs	r3, #0
 801079e:	4604      	mov	r4, r0
 80107a0:	4608      	mov	r0, r1
 80107a2:	602b      	str	r3, [r5, #0]
 80107a4:	f7f0 fecd 	bl	8001542 <_isatty>
 80107a8:	1c43      	adds	r3, r0, #1
 80107aa:	d102      	bne.n	80107b2 <_isatty_r+0x1a>
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	b103      	cbz	r3, 80107b2 <_isatty_r+0x1a>
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	bd38      	pop	{r3, r4, r5, pc}
 80107b4:	200023c0 	.word	0x200023c0

080107b8 <_lseek_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4d07      	ldr	r5, [pc, #28]	; (80107d8 <_lseek_r+0x20>)
 80107bc:	4604      	mov	r4, r0
 80107be:	4608      	mov	r0, r1
 80107c0:	4611      	mov	r1, r2
 80107c2:	2200      	movs	r2, #0
 80107c4:	602a      	str	r2, [r5, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	f7f0 fec6 	bl	8001558 <_lseek>
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	d102      	bne.n	80107d6 <_lseek_r+0x1e>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	b103      	cbz	r3, 80107d6 <_lseek_r+0x1e>
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	200023c0 	.word	0x200023c0

080107dc <_read_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d07      	ldr	r5, [pc, #28]	; (80107fc <_read_r+0x20>)
 80107e0:	4604      	mov	r4, r0
 80107e2:	4608      	mov	r0, r1
 80107e4:	4611      	mov	r1, r2
 80107e6:	2200      	movs	r2, #0
 80107e8:	602a      	str	r2, [r5, #0]
 80107ea:	461a      	mov	r2, r3
 80107ec:	f7f0 fe54 	bl	8001498 <_read>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d102      	bne.n	80107fa <_read_r+0x1e>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	b103      	cbz	r3, 80107fa <_read_r+0x1e>
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	bd38      	pop	{r3, r4, r5, pc}
 80107fc:	200023c0 	.word	0x200023c0

08010800 <_sbrk_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4d06      	ldr	r5, [pc, #24]	; (801081c <_sbrk_r+0x1c>)
 8010804:	2300      	movs	r3, #0
 8010806:	4604      	mov	r4, r0
 8010808:	4608      	mov	r0, r1
 801080a:	602b      	str	r3, [r5, #0]
 801080c:	f7f0 feb2 	bl	8001574 <_sbrk>
 8010810:	1c43      	adds	r3, r0, #1
 8010812:	d102      	bne.n	801081a <_sbrk_r+0x1a>
 8010814:	682b      	ldr	r3, [r5, #0]
 8010816:	b103      	cbz	r3, 801081a <_sbrk_r+0x1a>
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	bd38      	pop	{r3, r4, r5, pc}
 801081c:	200023c0 	.word	0x200023c0

08010820 <_write_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d07      	ldr	r5, [pc, #28]	; (8010840 <_write_r+0x20>)
 8010824:	4604      	mov	r4, r0
 8010826:	4608      	mov	r0, r1
 8010828:	4611      	mov	r1, r2
 801082a:	2200      	movs	r2, #0
 801082c:	602a      	str	r2, [r5, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	f7f0 fe4f 	bl	80014d2 <_write>
 8010834:	1c43      	adds	r3, r0, #1
 8010836:	d102      	bne.n	801083e <_write_r+0x1e>
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	b103      	cbz	r3, 801083e <_write_r+0x1e>
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	bd38      	pop	{r3, r4, r5, pc}
 8010840:	200023c0 	.word	0x200023c0

08010844 <_free_r>:
 8010844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010846:	2900      	cmp	r1, #0
 8010848:	d044      	beq.n	80108d4 <_free_r+0x90>
 801084a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801084e:	9001      	str	r0, [sp, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	f1a1 0404 	sub.w	r4, r1, #4
 8010856:	bfb8      	it	lt
 8010858:	18e4      	addlt	r4, r4, r3
 801085a:	f7ff fdeb 	bl	8010434 <__malloc_lock>
 801085e:	4a1e      	ldr	r2, [pc, #120]	; (80108d8 <_free_r+0x94>)
 8010860:	9801      	ldr	r0, [sp, #4]
 8010862:	6813      	ldr	r3, [r2, #0]
 8010864:	b933      	cbnz	r3, 8010874 <_free_r+0x30>
 8010866:	6063      	str	r3, [r4, #4]
 8010868:	6014      	str	r4, [r2, #0]
 801086a:	b003      	add	sp, #12
 801086c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010870:	f7ff bde6 	b.w	8010440 <__malloc_unlock>
 8010874:	42a3      	cmp	r3, r4
 8010876:	d908      	bls.n	801088a <_free_r+0x46>
 8010878:	6825      	ldr	r5, [r4, #0]
 801087a:	1961      	adds	r1, r4, r5
 801087c:	428b      	cmp	r3, r1
 801087e:	bf01      	itttt	eq
 8010880:	6819      	ldreq	r1, [r3, #0]
 8010882:	685b      	ldreq	r3, [r3, #4]
 8010884:	1949      	addeq	r1, r1, r5
 8010886:	6021      	streq	r1, [r4, #0]
 8010888:	e7ed      	b.n	8010866 <_free_r+0x22>
 801088a:	461a      	mov	r2, r3
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	b10b      	cbz	r3, 8010894 <_free_r+0x50>
 8010890:	42a3      	cmp	r3, r4
 8010892:	d9fa      	bls.n	801088a <_free_r+0x46>
 8010894:	6811      	ldr	r1, [r2, #0]
 8010896:	1855      	adds	r5, r2, r1
 8010898:	42a5      	cmp	r5, r4
 801089a:	d10b      	bne.n	80108b4 <_free_r+0x70>
 801089c:	6824      	ldr	r4, [r4, #0]
 801089e:	4421      	add	r1, r4
 80108a0:	1854      	adds	r4, r2, r1
 80108a2:	42a3      	cmp	r3, r4
 80108a4:	6011      	str	r1, [r2, #0]
 80108a6:	d1e0      	bne.n	801086a <_free_r+0x26>
 80108a8:	681c      	ldr	r4, [r3, #0]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	6053      	str	r3, [r2, #4]
 80108ae:	440c      	add	r4, r1
 80108b0:	6014      	str	r4, [r2, #0]
 80108b2:	e7da      	b.n	801086a <_free_r+0x26>
 80108b4:	d902      	bls.n	80108bc <_free_r+0x78>
 80108b6:	230c      	movs	r3, #12
 80108b8:	6003      	str	r3, [r0, #0]
 80108ba:	e7d6      	b.n	801086a <_free_r+0x26>
 80108bc:	6825      	ldr	r5, [r4, #0]
 80108be:	1961      	adds	r1, r4, r5
 80108c0:	428b      	cmp	r3, r1
 80108c2:	bf04      	itt	eq
 80108c4:	6819      	ldreq	r1, [r3, #0]
 80108c6:	685b      	ldreq	r3, [r3, #4]
 80108c8:	6063      	str	r3, [r4, #4]
 80108ca:	bf04      	itt	eq
 80108cc:	1949      	addeq	r1, r1, r5
 80108ce:	6021      	streq	r1, [r4, #0]
 80108d0:	6054      	str	r4, [r2, #4]
 80108d2:	e7ca      	b.n	801086a <_free_r+0x26>
 80108d4:	b003      	add	sp, #12
 80108d6:	bd30      	pop	{r4, r5, pc}
 80108d8:	200023b8 	.word	0x200023b8

080108dc <_malloc_usable_size_r>:
 80108dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e0:	1f18      	subs	r0, r3, #4
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	bfbc      	itt	lt
 80108e6:	580b      	ldrlt	r3, [r1, r0]
 80108e8:	18c0      	addlt	r0, r0, r3
 80108ea:	4770      	bx	lr

080108ec <_init>:
 80108ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ee:	bf00      	nop
 80108f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108f2:	bc08      	pop	{r3}
 80108f4:	469e      	mov	lr, r3
 80108f6:	4770      	bx	lr

080108f8 <_fini>:
 80108f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fa:	bf00      	nop
 80108fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108fe:	bc08      	pop	{r3}
 8010900:	469e      	mov	lr, r3
 8010902:	4770      	bx	lr
